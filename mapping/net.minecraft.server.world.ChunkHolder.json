{
	"title": "net.minecraft.server.level.ChunkHolder",
	"items": [
		{
			"forge": "net.minecraft.server.level.ChunkHolder",
			"fabric": "net.minecraft.server.world.ChunkHolder"
		},
		{
			"forge": "UNLOADED_CHUNK",
			"fabric": "UNLOADED_CHUNK"
		},
		{
			"forge": "UNLOADED_CHUNK",
			"fabric": "UNLOADED_CHUNK"
		},
		{
			"forge": "UNLOADED_CHUNK_FUTURE",
			"fabric": "UNLOADED_CHUNK_FUTURE"
		},
		{
			"forge": "UNLOADED_LEVEL_CHUNK",
			"fabric": "UNLOADED_WORLD_CHUNK"
		},
		{
			"forge": "NOT_DONE_YET",
			"fabric": "field_36388"
		},
		{
			"forge": "UNLOADED_LEVEL_CHUNK_FUTURE",
			"fabric": "UNLOADED_WORLD_CHUNK_FUTURE"
		},
		{
			"forge": "CHUNK_STATUSES",
			"fabric": "CHUNK_STATUSES"
		},
		{
			"forge": "futures",
			"fabric": "futuresByStatus"
		},
		{
			"forge": "levelHeightAccessor",
			"fabric": "world"
		},
		{
			"forge": "fullChunkFuture",
			"fabric": "accessibleFuture"
		},
		{
			"forge": "tickingChunkFuture",
			"fabric": "tickingFuture"
		},
		{
			"forge": "entityTickingChunkFuture",
			"fabric": "entityTickingFuture"
		},
		{
			"forge": "chunkToSave",
			"fabric": "savingFuture"
		},
		{
			"forge": "chunkToSaveHistory",
			"fabric": "actionStack"
		},
		{
			"forge": "oldTicketLevel",
			"fabric": "lastTickLevel"
		},
		{
			"forge": "ticketLevel",
			"fabric": "level"
		},
		{
			"forge": "queueLevel",
			"fabric": "completedLevel"
		},
		{
			"forge": "pos",
			"fabric": "pos"
		},
		{
			"forge": "hasChangedSections",
			"fabric": "pendingBlockUpdates"
		},
		{
			"forge": "changedBlocksPerSection",
			"fabric": "blockUpdatesBySection"
		},
		{
			"forge": "blockChangedLightSectionFilter",
			"fabric": "blockLightUpdateBits"
		},
		{
			"forge": "skyChangedLightSectionFilter",
			"fabric": "skyLightUpdateBits"
		},
		{
			"forge": "lightEngine",
			"fabric": "lightingProvider"
		},
		{
			"forge": "onLevelChange",
			"fabric": "levelUpdateListener"
		},
		{
			"forge": "playerProvider",
			"fabric": "playersWatchingChunkProvider"
		},
		{
			"forge": "wasAccessibleSinceLastSave",
			"fabric": "accessible"
		},
		{
			"forge": "pendingFullStateConfirmation",
			"fabric": "field_26930"
		},
		{
			"forge": "getFutureIfPresentUnchecked(ChunkStatus arg0)",
			"fabric": "getFutureFor(ChunkStatus leastStatus)"
		},
		{
			"forge": "getFutureIfPresentUnchecked(ChunkStatus arg0)",
			"fabric": "getFutureFor(ChunkStatus leastStatus)"
		},
		{
			"forge": "getFutureIfPresent(ChunkStatus arg0)",
			"fabric": "getValidFutureFor(ChunkStatus leastStatus)"
		},
		{
			"forge": "getTickingChunkFuture()",
			"fabric": "getTickingFuture()"
		},
		{
			"forge": "getEntityTickingChunkFuture()",
			"fabric": "getEntityTickingFuture()"
		},
		{
			"forge": "getFullChunkFuture()",
			"fabric": "getAccessibleFuture()"
		},
		{
			"forge": "getTickingChunk()",
			"fabric": "getWorldChunk()"
		},
		{
			"forge": "getFullChunk()",
			"fabric": "method_41205()"
		},
		{
			"forge": "getLastAvailableStatus()",
			"fabric": "getCurrentStatus()"
		},
		{
			"forge": "getLastAvailable()",
			"fabric": "getCurrentChunk()"
		},
		{
			"forge": "getChunkToSave()",
			"fabric": "getSavingFuture()"
		},
		{
			"forge": "blockChanged(BlockPos arg0)",
			"fabric": "markForBlockUpdate(BlockPos pos)"
		},
		{
			"forge": "sectionLightChanged(LightLayer arg0, int arg1)",
			"fabric": "markForLightUpdate(LightType lightType, int y)"
		},
		{
			"forge": "broadcastChanges(LevelChunk arg0)",
			"fabric": "flushUpdates(WorldChunk chunk)"
		},
		{
			"forge": "broadcastBlockEntityIfNeeded(List<ServerPlayer> arg0, Level arg1, BlockPos arg2, BlockState arg3)",
			"fabric": "tryUpdateBlockEntityAt(List<ServerPlayerEntity> players, World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "broadcastBlockEntity(List<ServerPlayer> arg0, Level arg1, BlockPos arg2)",
			"fabric": "sendBlockEntityUpdatePacket(List<ServerPlayerEntity> players, World world, BlockPos pos)"
		},
		{
			"forge": "broadcast(List<ServerPlayer> arg0, Packet<?> arg1)",
			"fabric": "sendPacketToPlayers(List<ServerPlayerEntity> players, Packet<?> packet)"
		},
		{
			"forge": "getOrScheduleFuture(ChunkStatus arg0, ChunkMap arg1)",
			"fabric": "getChunkAt(ChunkStatus targetStatus, ThreadedAnvilChunkStorage chunkStorage)"
		},
		{
			"forge": "addSaveDependency(String arg0, CompletableFuture<?> arg1)",
			"fabric": "combineSavingFuture(String thenDesc, CompletableFuture<?> then)"
		},
		{
			"forge": "updateChunkToSave(CompletableFuture<? extends com.mojang.datafixers.util.Either<? extends ChunkAccess, ChunkHolder$ChunkLoadingFailure>> arg0, String arg1)",
			"fabric": "combineSavingFuture(CompletableFuture<? extends com.mojang.datafixers.util.Either<? extends Chunk, ChunkHolder$Unloaded>> then, String thenDesc)"
		},
		{
			"forge": "getFullStatus()",
			"fabric": "getLevelType()"
		},
		{
			"forge": "getPos()",
			"fabric": "getPos()"
		},
		{
			"forge": "getTicketLevel()",
			"fabric": "getLevel()"
		},
		{
			"forge": "getQueueLevel()",
			"fabric": "getCompletedLevel()"
		},
		{
			"forge": "setQueueLevel(int arg0)",
			"fabric": "setCompletedLevel(int level)"
		},
		{
			"forge": "setTicketLevel(int arg0)",
			"fabric": "setLevel(int level)"
		},
		{
			"forge": "scheduleFullChunkPromotion(ChunkMap arg0, CompletableFuture<com.mojang.datafixers.util.Either<LevelChunk, ChunkHolder$ChunkLoadingFailure>> arg1, Executor arg2, FullChunkStatus arg3)",
			"fabric": "method_31409(ThreadedAnvilChunkStorage arg0, CompletableFuture<com.mojang.datafixers.util.Either<WorldChunk, ChunkHolder$Unloaded>> arg1, Executor arg2, ChunkLevelType arg3)"
		},
		{
			"forge": "demoteFullChunk(ChunkMap arg0, FullChunkStatus arg1)",
			"fabric": "method_31408(ThreadedAnvilChunkStorage arg0, ChunkLevelType arg1)"
		},
		{
			"forge": "updateFutures(ChunkMap arg0, Executor arg1)",
			"fabric": "tick(ThreadedAnvilChunkStorage chunkStorage, Executor arg1)"
		},
		{
			"forge": "wasAccessibleSinceLastSave()",
			"fabric": "isAccessible()"
		},
		{
			"forge": "refreshAccessibility()",
			"fabric": "updateAccessibleStatus()"
		},
		{
			"forge": "replaceProtoChunk(ImposterProtoChunk arg0)",
			"fabric": "setCompletedChunk(WrapperProtoChunk chunk)"
		},
		{
			"forge": "getAllFutures()",
			"fabric": "collectFuturesByStatus()"
		}
	]
}