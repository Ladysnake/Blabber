{
	"title": "net.minecraft.world.level.pathfinder.Path",
	"items": [
		{
			"forge": "net.minecraft.world.level.pathfinder.Path",
			"fabric": "net.minecraft.entity.ai.pathing.Path"
		},
		{
			"forge": "nodes",
			"fabric": "nodes"
		},
		{
			"forge": "nodes",
			"fabric": "nodes"
		},
		{
			"forge": "openSet",
			"fabric": "debugNodes"
		},
		{
			"forge": "closedSet",
			"fabric": "debugSecondNodes"
		},
		{
			"forge": "targetNodes",
			"fabric": "debugTargetNodes"
		},
		{
			"forge": "nextNodeIndex",
			"fabric": "currentNodeIndex"
		},
		{
			"forge": "target",
			"fabric": "target"
		},
		{
			"forge": "distToTarget",
			"fabric": "manhattanDistanceFromTarget"
		},
		{
			"forge": "reached",
			"fabric": "reachesTarget"
		},
		{
			"forge": "advance()",
			"fabric": "next()"
		},
		{
			"forge": "advance()",
			"fabric": "next()"
		},
		{
			"forge": "notStarted()",
			"fabric": "isStart()"
		},
		{
			"forge": "isDone()",
			"fabric": "isFinished()"
		},
		{
			"forge": "getEndNode()",
			"fabric": "getEnd()"
		},
		{
			"forge": "getNode(int arg0)",
			"fabric": "getNode(int index)"
		},
		{
			"forge": "truncateNodes(int arg0)",
			"fabric": "setLength(int length)"
		},
		{
			"forge": "replaceNode(int arg0, Node arg1)",
			"fabric": "setNode(int index, PathNode node)"
		},
		{
			"forge": "getNodeCount()",
			"fabric": "getLength()"
		},
		{
			"forge": "getNextNodeIndex()",
			"fabric": "getCurrentNodeIndex()"
		},
		{
			"forge": "setNextNodeIndex(int arg0)",
			"fabric": "setCurrentNodeIndex(int nodeIndex)"
		},
		{
			"forge": "getEntityPosAtNode(Entity arg0, int arg1)",
			"fabric": "getNodePosition(Entity entity, int index)"
		},
		{
			"forge": "getNodePos(int arg0)",
			"fabric": "getNodePos(int index)"
		},
		{
			"forge": "getNextEntityPos(Entity arg0)",
			"fabric": "getNodePosition(Entity entity)"
		},
		{
			"forge": "getNextNodePos()",
			"fabric": "getCurrentNodePos()"
		},
		{
			"forge": "getNextNode()",
			"fabric": "getCurrentNode()"
		},
		{
			"forge": "getPreviousNode()",
			"fabric": "getLastNode()"
		},
		{
			"forge": "sameAs(Path arg0)",
			"fabric": "equalsPath(Path o)"
		},
		{
			"forge": "canReach()",
			"fabric": "reachesTarget()"
		},
		{
			"forge": "setDebug(Node[] arg0, Node[] arg1, Set<Target> arg2)",
			"fabric": "setDebugInfo(PathNode[] debugNodes, PathNode[] debugSecondNodes, Set<TargetPathNode> debugTargetNodes)"
		},
		{
			"forge": "getOpenSet()",
			"fabric": "getDebugNodes()"
		},
		{
			"forge": "getClosedSet()",
			"fabric": "getDebugSecondNodes()"
		},
		{
			"forge": "writeToStream(FriendlyByteBuf arg0)",
			"fabric": "toBuffer(PacketByteBuf buffer)"
		},
		{
			"forge": "createFromStream(FriendlyByteBuf arg0)",
			"fabric": "fromBuffer(PacketByteBuf buffer)"
		},
		{
			"forge": "getTarget()",
			"fabric": "getTarget()"
		},
		{
			"forge": "getDistToTarget()",
			"fabric": "getManhattanDistanceFromTarget()"
		}
	]
}