{
	"title": "net.minecraft.client.renderer.blockentity.SignRenderer",
	"items": [
		{
			"forge": "net.minecraft.client.renderer.blockentity.SignRenderer",
			"fabric": "net.minecraft.client.render.block.entity.SignBlockEntityRenderer"
		},
		{
			"forge": "STICK",
			"fabric": "STICK"
		},
		{
			"forge": "STICK",
			"fabric": "STICK"
		},
		{
			"forge": "BLACK_TEXT_OUTLINE_COLOR",
			"fabric": "GLOWING_BLACK_COLOR"
		},
		{
			"forge": "OUTLINE_RENDER_DISTANCE",
			"fabric": "RENDER_DISTANCE"
		},
		{
			"forge": "RENDER_SCALE",
			"fabric": "SCALE"
		},
		{
			"forge": "TEXT_OFFSET",
			"fabric": "TEXT_OFFSET"
		},
		{
			"forge": "signModels",
			"fabric": "typeToModel"
		},
		{
			"forge": "font",
			"fabric": "textRenderer"
		},
		{
			"forge": "render(SignBlockEntity arg0, float arg1, PoseStack arg2, MultiBufferSource arg3, int arg4, int arg5)",
			"fabric": "render(SignBlockEntity arg0, float arg1, MatrixStack arg2, VertexConsumerProvider arg3, int arg4, int arg5)"
		},
		{
			"forge": "render(SignBlockEntity arg0, float arg1, PoseStack arg2, MultiBufferSource arg3, int arg4, int arg5)",
			"fabric": "render(SignBlockEntity arg0, float arg1, MatrixStack arg2, VertexConsumerProvider arg3, int arg4, int arg5)"
		},
		{
			"forge": "getSignModelRenderScale()",
			"fabric": "getSignScale()"
		},
		{
			"forge": "getSignTextRenderScale()",
			"fabric": "getTextScale()"
		},
		{
			"forge": "renderSignWithText(SignBlockEntity arg0, PoseStack arg1, MultiBufferSource arg2, int arg3, int arg4, BlockState arg5, SignBlock arg6, WoodType arg7, Model arg8)",
			"fabric": "render(SignBlockEntity entity, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, BlockState state, AbstractSignBlock block, WoodType woodType, Model model)"
		},
		{
			"forge": "translateSign(PoseStack arg0, float arg1, BlockState arg2)",
			"fabric": "setAngles(MatrixStack matrices, float rotationDegrees, BlockState state)"
		},
		{
			"forge": "renderSign(PoseStack arg0, MultiBufferSource arg1, int arg2, int arg3, WoodType arg4, Model arg5)",
			"fabric": "renderSign(MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, WoodType woodType, Model model)"
		},
		{
			"forge": "renderSignModel(PoseStack arg0, int arg1, int arg2, Model arg3, VertexConsumer arg4)",
			"fabric": "renderSignModel(MatrixStack matrices, int light, int overlay, Model model, VertexConsumer vertexConsumers)"
		},
		{
			"forge": "getSignMaterial(WoodType arg0)",
			"fabric": "getTextureId(WoodType signType)"
		},
		{
			"forge": "renderSignText(BlockPos arg0, SignText arg1, PoseStack arg2, MultiBufferSource arg3, int arg4, int arg5, int arg6, boolean arg7)",
			"fabric": "renderText(BlockPos pos, SignText signText, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int lineHeight, int lineWidth, boolean front)"
		},
		{
			"forge": "translateSignText(PoseStack arg0, boolean arg1, Vec3 arg2)",
			"fabric": "setTextAngles(MatrixStack matrices, boolean front, Vec3d translation)"
		},
		{
			"forge": "getTextOffset()",
			"fabric": "getTextOffset()"
		},
		{
			"forge": "isOutlineVisible(BlockPos arg0, int arg1)",
			"fabric": "shouldRender(BlockPos pos, int signColor)"
		},
		{
			"forge": "getDarkColor(SignText arg0)",
			"fabric": "getColor(SignText sign)"
		},
		{
			"forge": "createSignModel(EntityModelSet arg0, WoodType arg1)",
			"fabric": "createSignModel(EntityModelLoader entityModelLoader, WoodType type)"
		},
		{
			"forge": "createSignLayer()",
			"fabric": "getTexturedModelData()"
		}
	]
}