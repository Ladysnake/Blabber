{
	"title": "net.minecraft.world.level.levelgen.carver.WorldCarver",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.carver.WorldCarver",
			"fabric": "net.minecraft.world.gen.carver.Carver"
		},
		{
			"forge": "CAVE",
			"fabric": "CAVE"
		},
		{
			"forge": "CAVE",
			"fabric": "CAVE"
		},
		{
			"forge": "NETHER_CAVE",
			"fabric": "NETHER_CAVE"
		},
		{
			"forge": "CANYON",
			"fabric": "RAVINE"
		},
		{
			"forge": "AIR",
			"fabric": "AIR"
		},
		{
			"forge": "CAVE_AIR",
			"fabric": "CAVE_AIR"
		},
		{
			"forge": "WATER",
			"fabric": "WATER"
		},
		{
			"forge": "LAVA",
			"fabric": "LAVA"
		},
		{
			"forge": "liquids",
			"fabric": "carvableFluids"
		},
		{
			"forge": "configuredCodec",
			"fabric": "codec"
		},
		{
			"forge": "register(String arg0, F arg1)",
			"fabric": "register(String name, F carver)"
		},
		{
			"forge": "register(String arg0, F arg1)",
			"fabric": "register(String name, F carver)"
		},
		{
			"forge": "configured(C arg0)",
			"fabric": "configure(C config)"
		},
		{
			"forge": "configuredCodec()",
			"fabric": "getCodec()"
		},
		{
			"forge": "getRange()",
			"fabric": "getBranchFactor()"
		},
		{
			"forge": "carveEllipsoid(CarvingContext arg0, C arg1, ChunkAccess arg2, Function<BlockPos, Holder<Biome>> arg3, Aquifer arg4, double arg5, double arg6, double arg7, double arg8, double arg9, CarvingMask arg10, WorldCarver$CarveSkipChecker arg11)",
			"fabric": "carveRegion(CarverContext context, C config, Chunk chunk, Function<BlockPos, RegistryEntry<Biome>> posToBiome, AquiferSampler aquiferSampler, double x, double y, double z, double width, double height, CarvingMask mask, Carver$SkipPredicate skipPredicate)"
		},
		{
			"forge": "carveBlock(CarvingContext arg0, C arg1, ChunkAccess arg2, Function<BlockPos, Holder<Biome>> arg3, CarvingMask arg4, BlockPos$MutableBlockPos arg5, BlockPos$MutableBlockPos arg6, Aquifer arg7, org.apache.commons.lang3.mutable.MutableBoolean arg8)",
			"fabric": "carveAtPoint(CarverContext context, C config, Chunk chunk, Function<BlockPos, RegistryEntry<Biome>> posToBiome, CarvingMask mask, BlockPos$Mutable pos, BlockPos$Mutable tmp, AquiferSampler aquiferSampler, org.apache.commons.lang3.mutable.MutableBoolean replacedGrassy)"
		},
		{
			"forge": "getCarveState(CarvingContext arg0, C arg1, BlockPos arg2, Aquifer arg3)",
			"fabric": "getState(CarverContext context, C config, BlockPos pos, AquiferSampler sampler)"
		},
		{
			"forge": "getDebugState(CarverConfiguration arg0, BlockState arg1)",
			"fabric": "getDebugState(CarverConfig config, BlockState state)"
		},
		{
			"forge": "carve(CarvingContext arg0, C arg1, ChunkAccess arg2, Function<BlockPos, Holder<Biome>> arg3, RandomSource arg4, Aquifer arg5, ChunkPos arg6, CarvingMask arg7)",
			"fabric": "carve(CarverContext context, C config, Chunk chunk, Function<BlockPos, RegistryEntry<Biome>> posToBiome, Random random, AquiferSampler aquiferSampler, ChunkPos pos, CarvingMask mask)"
		},
		{
			"forge": "isStartChunk(C arg0, RandomSource arg1)",
			"fabric": "shouldCarve(C config, Random random)"
		},
		{
			"forge": "canReplaceBlock(C arg0, BlockState arg1)",
			"fabric": "canAlwaysCarveBlock(C config, BlockState state)"
		},
		{
			"forge": "canReach(ChunkPos arg0, double arg1, double arg2, int arg3, int arg4, float arg5)",
			"fabric": "canCarveBranch(ChunkPos pos, double x, double z, int branchIndex, int branchCount, float baseWidth)"
		},
		{
			"forge": "isDebugEnabled(CarverConfiguration arg0)",
			"fabric": "isDebug(CarverConfig config)"
		}
	]
}