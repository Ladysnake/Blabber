{
	"title": "net.minecraft.world.entity.monster.Slime",
	"items": [
		{
			"forge": "net.minecraft.world.entity.monster.Slime",
			"fabric": "net.minecraft.entity.mob.SlimeEntity"
		},
		{
			"forge": "ID_SIZE",
			"fabric": "SLIME_SIZE"
		},
		{
			"forge": "ID_SIZE",
			"fabric": "SLIME_SIZE"
		},
		{
			"forge": "MIN_SIZE",
			"fabric": "MIN_SIZE"
		},
		{
			"forge": "MAX_SIZE",
			"fabric": "MAX_SIZE"
		},
		{
			"forge": "targetSquish",
			"fabric": "targetStretch"
		},
		{
			"forge": "squish",
			"fabric": "stretch"
		},
		{
			"forge": "oSquish",
			"fabric": "lastStretch"
		},
		{
			"forge": "wasOnGround",
			"fabric": "onGroundLastTick"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "setSize(int arg0, boolean arg1)",
			"fabric": "setSize(int size, boolean heal)"
		},
		{
			"forge": "getSize()",
			"fabric": "getSize()"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "isTiny()",
			"fabric": "isSmall()"
		},
		{
			"forge": "getParticleType()",
			"fabric": "getParticles()"
		},
		{
			"forge": "shouldDespawnInPeaceful()",
			"fabric": "isDisallowedInPeaceful()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "decreaseSquish()",
			"fabric": "updateStretch()"
		},
		{
			"forge": "getJumpDelay()",
			"fabric": "getTicksUntilNextJump()"
		},
		{
			"forge": "refreshDimensions()",
			"fabric": "calculateDimensions()"
		},
		{
			"forge": "onSyncedDataUpdated(EntityDataAccessor<?> arg0)",
			"fabric": "onTrackedDataSet(TrackedData<?> arg0)"
		},
		{
			"forge": "getType()",
			"fabric": "getType()"
		},
		{
			"forge": "remove(Entity$RemovalReason arg0)",
			"fabric": "remove(Entity$RemovalReason arg0)"
		},
		{
			"forge": "push(Entity arg0)",
			"fabric": "pushAwayFrom(Entity arg0)"
		},
		{
			"forge": "playerTouch(Player arg0)",
			"fabric": "onPlayerCollision(PlayerEntity arg0)"
		},
		{
			"forge": "dealDamage(LivingEntity arg0)",
			"fabric": "damage(LivingEntity target)"
		},
		{
			"forge": "getStandingEyeHeight(Pose arg0, EntityDimensions arg1)",
			"fabric": "getActiveEyeHeight(EntityPose arg0, EntityDimensions arg1)"
		},
		{
			"forge": "isDealsDamage()",
			"fabric": "canAttack()"
		},
		{
			"forge": "getAttackDamage()",
			"fabric": "getDamageAmount()"
		},
		{
			"forge": "getHurtSound(DamageSource arg0)",
			"fabric": "getHurtSound(DamageSource arg0)"
		},
		{
			"forge": "getDeathSound()",
			"fabric": "getDeathSound()"
		},
		{
			"forge": "getSquishSound()",
			"fabric": "getSquishSound()"
		},
		{
			"forge": "checkSlimeSpawnRules(EntityType<Slime> arg0, LevelAccessor arg1, MobSpawnType arg2, BlockPos arg3, RandomSource arg4)",
			"fabric": "canSpawn(EntityType<SlimeEntity> type, WorldAccess world, SpawnReason spawnReason, BlockPos pos, Random random)"
		},
		{
			"forge": "getSoundVolume()",
			"fabric": "getSoundVolume()"
		},
		{
			"forge": "getMaxHeadXRot()",
			"fabric": "getMaxLookPitchChange()"
		},
		{
			"forge": "doPlayJumpSound()",
			"fabric": "makesJumpSound()"
		},
		{
			"forge": "jumpFromGround()",
			"fabric": "jump()"
		},
		{
			"forge": "finalizeSpawn(ServerLevelAccessor arg0, DifficultyInstance arg1, MobSpawnType arg2, SpawnGroupData arg3, CompoundTag arg4)",
			"fabric": "initialize(ServerWorldAccess arg0, LocalDifficulty arg1, SpawnReason arg2, EntityData arg3, NbtCompound arg4)"
		},
		{
			"forge": "getSoundPitch()",
			"fabric": "getJumpSoundPitch()"
		},
		{
			"forge": "getJumpSound()",
			"fabric": "getJumpSound()"
		},
		{
			"forge": "getDimensions(Pose arg0)",
			"fabric": "getDimensions(EntityPose arg0)"
		}
	]
}