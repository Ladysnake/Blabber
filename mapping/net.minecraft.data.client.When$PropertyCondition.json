{
	"title": "net.minecraft.data.models.blockstates.Condition$TerminalCondition",
	"items": [
		{
			"forge": "net.minecraft.data.models.blockstates.Condition$TerminalCondition",
			"fabric": "net.minecraft.data.client.When$PropertyCondition"
		},
		{
			"forge": "terms",
			"fabric": "properties"
		},
		{
			"forge": "terms",
			"fabric": "properties"
		},
		{
			"forge": "joinValues(Property<T> arg0, Stream<T> arg1)",
			"fabric": "name(Property<T> property, Stream<T> valueStream)"
		},
		{
			"forge": "joinValues(Property<T> arg0, Stream<T> arg1)",
			"fabric": "name(Property<T> property, Stream<T> valueStream)"
		},
		{
			"forge": "getTerm(Property<T> arg0, T arg1, T[] arg2)",
			"fabric": "name(Property<T> property, T value, T[] otherValues)"
		},
		{
			"forge": "putValue(Property<T> arg0, String arg1)",
			"fabric": "set(Property<T> property, String value)"
		},
		{
			"forge": "term(Property<T> arg0, T arg1)",
			"fabric": "set(Property<T> property, T value)"
		},
		{
			"forge": "term(Property<T> arg0, T arg1, T... arg2)",
			"fabric": "set(Property<T> property, T value, T... otherValues)"
		},
		{
			"forge": "negatedTerm(Property<T> arg0, T arg1)",
			"fabric": "setNegated(Property<T> property, T value)"
		},
		{
			"forge": "negatedTerm(Property<T> arg0, T arg1, T... arg2)",
			"fabric": "setNegated(Property<T> property, T value, T... otherValues)"
		},
		{
			"forge": "get()",
			"fabric": "get()"
		},
		{
			"forge": "validate(StateDefinition<?, ?> arg0)",
			"fabric": "validate(StateManager<?, ?> arg0)"
		}
	]
}