{
	"title": "net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder",
	"items": [
		{
			"forge": "net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder",
			"fabric": "net.minecraft.util.profiler.DebugRecorder"
		},
		{
			"forge": "PROFILING_MAX_DURATION_SECONDS",
			"fabric": "MAX_DURATION_IN_SECONDS"
		},
		{
			"forge": "PROFILING_MAX_DURATION_SECONDS",
			"fabric": "MAX_DURATION_IN_SECONDS"
		},
		{
			"forge": "globalOnReportFinished",
			"fabric": "globalDumpConsumer"
		},
		{
			"forge": "deviationsBySampler",
			"fabric": "deviations"
		},
		{
			"forge": "taskProfiler",
			"fabric": "timeTracker"
		},
		{
			"forge": "ioExecutor",
			"fabric": "dumpExecutor"
		},
		{
			"forge": "metricsPersister",
			"fabric": "dumper"
		},
		{
			"forge": "onProfilingEnd",
			"fabric": "resultConsumer"
		},
		{
			"forge": "onReportFinished",
			"fabric": "dumpConsumer"
		},
		{
			"forge": "metricsSamplerProvider",
			"fabric": "samplerSource"
		},
		{
			"forge": "wallTimeSource",
			"fabric": "timeGetter"
		},
		{
			"forge": "deadlineNano",
			"fabric": "endTime"
		},
		{
			"forge": "currentTick",
			"fabric": "ticks"
		},
		{
			"forge": "singleTickProfiler",
			"fabric": "profiler"
		},
		{
			"forge": "killSwitch",
			"fabric": "stopping"
		},
		{
			"forge": "thisTickSamplers",
			"fabric": "samplers"
		},
		{
			"forge": "createStarted(MetricsSamplerProvider arg0, LongSupplier arg1, Executor arg2, MetricsPersister arg3, Consumer<ProfileResults> arg4, Consumer<Path> arg5)",
			"fabric": "of(SamplerSource source, LongSupplier timeGetter, Executor dumpExecutor, RecordDumper dumper, Consumer<ProfileResult> resultConsumer, Consumer<Path> dumpConsumer)"
		},
		{
			"forge": "createStarted(MetricsSamplerProvider arg0, LongSupplier arg1, Executor arg2, MetricsPersister arg3, Consumer<ProfileResults> arg4, Consumer<Path> arg5)",
			"fabric": "of(SamplerSource source, LongSupplier timeGetter, Executor dumpExecutor, RecordDumper dumper, Consumer<ProfileResult> resultConsumer, Consumer<Path> dumpConsumer)"
		},
		{
			"forge": "end()",
			"fabric": "stop()"
		},
		{
			"forge": "cancel()",
			"fabric": "forceStop()"
		},
		{
			"forge": "startTick()",
			"fabric": "startTick()"
		},
		{
			"forge": "endTick()",
			"fabric": "endTick()"
		},
		{
			"forge": "isRecording()",
			"fabric": "isActive()"
		},
		{
			"forge": "getProfiler()",
			"fabric": "getProfiler()"
		},
		{
			"forge": "verifyStarted()",
			"fabric": "checkState()"
		},
		{
			"forge": "scheduleSaveResults(ProfileResults arg0)",
			"fabric": "dump(ProfileResult result)"
		},
		{
			"forge": "cleanup(Collection<MetricSampler> arg0)",
			"fabric": "forceStop(Collection<Sampler> samplers)"
		},
		{
			"forge": "registerGlobalCompletionCallback(Consumer<Path> arg0)",
			"fabric": "setGlobalDumpConsumer(Consumer<Path> consumer)"
		}
	]
}