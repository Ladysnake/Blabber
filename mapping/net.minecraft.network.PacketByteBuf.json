{
	"title": "net.minecraft.network.FriendlyByteBuf",
	"items": [
		{
			"forge": "net.minecraft.network.FriendlyByteBuf",
			"fabric": "net.minecraft.network.PacketByteBuf"
		},
		{
			"forge": "MAX_VARINT_SIZE",
			"fabric": "MAX_VAR_INT_LENGTH"
		},
		{
			"forge": "MAX_VARINT_SIZE",
			"fabric": "MAX_VAR_INT_LENGTH"
		},
		{
			"forge": "MAX_VARLONG_SIZE",
			"fabric": "MAX_VAR_LONG_LENGTH"
		},
		{
			"forge": "DEFAULT_NBT_QUOTA",
			"fabric": "MAX_READ_NBT_SIZE"
		},
		{
			"forge": "source",
			"fabric": "parent"
		},
		{
			"forge": "MAX_STRING_LENGTH",
			"fabric": "DEFAULT_MAX_STRING_LENGTH"
		},
		{
			"forge": "MAX_COMPONENT_STRING_LENGTH",
			"fabric": "MAX_TEXT_LENGTH"
		},
		{
			"forge": "PUBLIC_KEY_SIZE",
			"fabric": "field_39381"
		},
		{
			"forge": "MAX_PUBLIC_KEY_HEADER_SIZE",
			"fabric": "field_39382"
		},
		{
			"forge": "MAX_PUBLIC_KEY_LENGTH",
			"fabric": "field_39383"
		},
		{
			"forge": "GSON",
			"fabric": "GSON"
		},
		{
			"forge": "getVarIntSize(int arg0)",
			"fabric": "getVarIntLength(int value)"
		},
		{
			"forge": "getVarIntSize(int arg0)",
			"fabric": "getVarIntLength(int value)"
		},
		{
			"forge": "getVarLongSize(long arg0)",
			"fabric": "getVarLongLength(long value)"
		},
		{
			"forge": "readWithCodec(com.mojang.serialization.DynamicOps<Tag> arg0, com.mojang.serialization.Codec<T> arg1)",
			"fabric": "decode(com.mojang.serialization.DynamicOps<NbtElement> ops, com.mojang.serialization.Codec<T> codec)"
		},
		{
			"forge": "writeWithCodec(com.mojang.serialization.DynamicOps<Tag> arg0, com.mojang.serialization.Codec<T> arg1, T arg2)",
			"fabric": "encode(com.mojang.serialization.DynamicOps<NbtElement> ops, com.mojang.serialization.Codec<T> codec, T value)"
		},
		{
			"forge": "readJsonWithCodec(com.mojang.serialization.Codec<T> arg0)",
			"fabric": "decodeAsJson(com.mojang.serialization.Codec<T> codec)"
		},
		{
			"forge": "writeJsonWithCodec(com.mojang.serialization.Codec<T> arg0, T arg1)",
			"fabric": "encodeAsJson(com.mojang.serialization.Codec<T> codec, T value)"
		},
		{
			"forge": "writeId(IdMap<T> arg0, T arg1)",
			"fabric": "writeRegistryValue(IndexedIterable<T> registry, T value)"
		},
		{
			"forge": "writeId(IdMap<Holder<T>> arg0, Holder<T> arg1, FriendlyByteBuf$Writer<T> arg2)",
			"fabric": "writeRegistryEntry(IndexedIterable<RegistryEntry<T>> registryEntries, RegistryEntry<T> entry, PacketByteBuf$PacketWriter<T> writer)"
		},
		{
			"forge": "readById(IdMap<T> arg0)",
			"fabric": "readRegistryValue(IndexedIterable<T> registry)"
		},
		{
			"forge": "readById(IdMap<Holder<T>> arg0, FriendlyByteBuf$Reader<T> arg1)",
			"fabric": "readRegistryEntry(IndexedIterable<RegistryEntry<T>> registryEntries, PacketByteBuf$PacketReader<T> reader)"
		},
		{
			"forge": "limitValue(IntFunction<T> arg0, int arg1)",
			"fabric": "getMaxValidator(IntFunction<T> applier, int max)"
		},
		{
			"forge": "readCollection(IntFunction<C> arg0, FriendlyByteBuf$Reader<T> arg1)",
			"fabric": "readCollection(IntFunction<C> collectionFactory, PacketByteBuf$PacketReader<T> reader)"
		},
		{
			"forge": "writeCollection(Collection<T> arg0, FriendlyByteBuf$Writer<T> arg1)",
			"fabric": "writeCollection(Collection<T> collection, PacketByteBuf$PacketWriter<T> writer)"
		},
		{
			"forge": "readList(FriendlyByteBuf$Reader<T> arg0)",
			"fabric": "readList(PacketByteBuf$PacketReader<T> reader)"
		},
		{
			"forge": "readIntIdList()",
			"fabric": "readIntList()"
		},
		{
			"forge": "writeIntIdList(it.unimi.dsi.fastutil.ints.IntList arg0)",
			"fabric": "writeIntList(it.unimi.dsi.fastutil.ints.IntList list)"
		},
		{
			"forge": "readMap(IntFunction<M> arg0, FriendlyByteBuf$Reader<K> arg1, FriendlyByteBuf$Reader<V> arg2)",
			"fabric": "readMap(IntFunction<M> mapFactory, PacketByteBuf$PacketReader<K> keyReader, PacketByteBuf$PacketReader<V> valueReader)"
		},
		{
			"forge": "readMap(FriendlyByteBuf$Reader<K> arg0, FriendlyByteBuf$Reader<V> arg1)",
			"fabric": "readMap(PacketByteBuf$PacketReader<K> keyReader, PacketByteBuf$PacketReader<V> valueReader)"
		},
		{
			"forge": "writeMap(Map<K, V> arg0, FriendlyByteBuf$Writer<K> arg1, FriendlyByteBuf$Writer<V> arg2)",
			"fabric": "writeMap(Map<K, V> map, PacketByteBuf$PacketWriter<K> keyWriter, PacketByteBuf$PacketWriter<V> valueWriter)"
		},
		{
			"forge": "readWithCount(Consumer<FriendlyByteBuf> arg0)",
			"fabric": "forEachInCollection(Consumer<PacketByteBuf> consumer)"
		},
		{
			"forge": "writeEnumSet(EnumSet<E> arg0, Class<E> arg1)",
			"fabric": "writeEnumSet(EnumSet<E> enumSet, Class<E> type)"
		},
		{
			"forge": "readEnumSet(Class<E> arg0)",
			"fabric": "readEnumSet(Class<E> type)"
		},
		{
			"forge": "writeOptional(Optional<T> arg0, FriendlyByteBuf$Writer<T> arg1)",
			"fabric": "writeOptional(Optional<T> value, PacketByteBuf$PacketWriter<T> writer)"
		},
		{
			"forge": "readOptional(FriendlyByteBuf$Reader<T> arg0)",
			"fabric": "readOptional(PacketByteBuf$PacketReader<T> reader)"
		},
		{
			"forge": "readNullable(FriendlyByteBuf$Reader<T> arg0)",
			"fabric": "readNullable(PacketByteBuf$PacketReader<T> reader)"
		},
		{
			"forge": "writeNullable(T arg0, FriendlyByteBuf$Writer<T> arg1)",
			"fabric": "writeNullable(T value, PacketByteBuf$PacketWriter<T> writer)"
		},
		{
			"forge": "writeEither(com.mojang.datafixers.util.Either<L, R> arg0, FriendlyByteBuf$Writer<L> arg1, FriendlyByteBuf$Writer<R> arg2)",
			"fabric": "writeEither(com.mojang.datafixers.util.Either<L, R> either, PacketByteBuf$PacketWriter<L> leftWriter, PacketByteBuf$PacketWriter<R> rightWriter)"
		},
		{
			"forge": "readEither(FriendlyByteBuf$Reader<L> arg0, FriendlyByteBuf$Reader<R> arg1)",
			"fabric": "readEither(PacketByteBuf$PacketReader<L> leftReader, PacketByteBuf$PacketReader<R> rightReader)"
		},
		{
			"forge": "readByteArray()",
			"fabric": "readByteArray()"
		},
		{
			"forge": "writeByteArray(byte[] arg0)",
			"fabric": "writeByteArray(byte[] array)"
		},
		{
			"forge": "readByteArray(int arg0)",
			"fabric": "readByteArray(int maxSize)"
		},
		{
			"forge": "writeVarIntArray(int[] arg0)",
			"fabric": "writeIntArray(int[] array)"
		},
		{
			"forge": "readVarIntArray()",
			"fabric": "readIntArray()"
		},
		{
			"forge": "readVarIntArray(int arg0)",
			"fabric": "readIntArray(int maxSize)"
		},
		{
			"forge": "writeLongArray(long[] arg0)",
			"fabric": "writeLongArray(long[] array)"
		},
		{
			"forge": "readLongArray()",
			"fabric": "readLongArray()"
		},
		{
			"forge": "readLongArray(long[] arg0)",
			"fabric": "readLongArray(long[] toArray)"
		},
		{
			"forge": "readLongArray(long[] arg0, int arg1)",
			"fabric": "readLongArray(long[] toArray, int maxSize)"
		},
		{
			"forge": "accessByteBufWithCorrectSize()",
			"fabric": "getWrittenBytes()"
		},
		{
			"forge": "readBlockPos()",
			"fabric": "readBlockPos()"
		},
		{
			"forge": "writeBlockPos(BlockPos arg0)",
			"fabric": "writeBlockPos(BlockPos pos)"
		},
		{
			"forge": "readChunkPos()",
			"fabric": "readChunkPos()"
		},
		{
			"forge": "writeChunkPos(ChunkPos arg0)",
			"fabric": "writeChunkPos(ChunkPos pos)"
		},
		{
			"forge": "readSectionPos()",
			"fabric": "readChunkSectionPos()"
		},
		{
			"forge": "writeSectionPos(SectionPos arg0)",
			"fabric": "writeChunkSectionPos(ChunkSectionPos pos)"
		},
		{
			"forge": "readGlobalPos()",
			"fabric": "readGlobalPos()"
		},
		{
			"forge": "writeGlobalPos(GlobalPos arg0)",
			"fabric": "writeGlobalPos(GlobalPos pos)"
		},
		{
			"forge": "readVector3f()",
			"fabric": "readVector3f()"
		},
		{
			"forge": "writeVector3f(org.joml.Vector3f arg0)",
			"fabric": "writeVector3f(org.joml.Vector3f vector3f)"
		},
		{
			"forge": "readQuaternion()",
			"fabric": "readQuaternionf()"
		},
		{
			"forge": "writeQuaternion(org.joml.Quaternionf arg0)",
			"fabric": "writeQuaternionf(org.joml.Quaternionf quaternionf)"
		},
		{
			"forge": "readComponent()",
			"fabric": "readText()"
		},
		{
			"forge": "writeComponent(Component arg0)",
			"fabric": "writeText(Text text)"
		},
		{
			"forge": "readEnum(Class<T> arg0)",
			"fabric": "readEnumConstant(Class<T> enumClass)"
		},
		{
			"forge": "writeEnum(Enum<?> arg0)",
			"fabric": "writeEnumConstant(Enum<?> instance)"
		},
		{
			"forge": "readVarInt()",
			"fabric": "readVarInt()"
		},
		{
			"forge": "readVarLong()",
			"fabric": "readVarLong()"
		},
		{
			"forge": "writeUUID(UUID arg0)",
			"fabric": "writeUuid(UUID uuid)"
		},
		{
			"forge": "readUUID()",
			"fabric": "readUuid()"
		},
		{
			"forge": "writeVarInt(int arg0)",
			"fabric": "writeVarInt(int value)"
		},
		{
			"forge": "writeVarLong(long arg0)",
			"fabric": "writeVarLong(long value)"
		},
		{
			"forge": "writeNbt(CompoundTag arg0)",
			"fabric": "writeNbt(NbtCompound compound)"
		},
		{
			"forge": "readNbt()",
			"fabric": "readNbt()"
		},
		{
			"forge": "readAnySizeNbt()",
			"fabric": "readUnlimitedNbt()"
		},
		{
			"forge": "readNbt(NbtAccounter arg0)",
			"fabric": "readNbt(NbtTagSizeTracker sizeTracker)"
		},
		{
			"forge": "writeItem(ItemStack arg0)",
			"fabric": "writeItemStack(ItemStack stack)"
		},
		{
			"forge": "readItem()",
			"fabric": "readItemStack()"
		},
		{
			"forge": "readUtf()",
			"fabric": "readString()"
		},
		{
			"forge": "readUtf(int arg0)",
			"fabric": "readString(int maxLength)"
		},
		{
			"forge": "writeUtf(String arg0)",
			"fabric": "writeString(String string)"
		},
		{
			"forge": "writeUtf(String arg0, int arg1)",
			"fabric": "writeString(String string, int maxLength)"
		},
		{
			"forge": "getMaxEncodedUtfLength(int arg0)",
			"fabric": "toEncodedStringLength(int decodedLength)"
		},
		{
			"forge": "readResourceLocation()",
			"fabric": "readIdentifier()"
		},
		{
			"forge": "writeResourceLocation(ResourceLocation arg0)",
			"fabric": "writeIdentifier(Identifier id)"
		},
		{
			"forge": "readResourceKey(ResourceKey<? extends Registry<T>> arg0)",
			"fabric": "readRegistryKey(RegistryKey<? extends Registry<T>> registryRef)"
		},
		{
			"forge": "writeResourceKey(ResourceKey<?> arg0)",
			"fabric": "writeRegistryKey(RegistryKey<?> key)"
		},
		{
			"forge": "readDate()",
			"fabric": "readDate()"
		},
		{
			"forge": "writeDate(Date arg0)",
			"fabric": "writeDate(Date date)"
		},
		{
			"forge": "readInstant()",
			"fabric": "readInstant()"
		},
		{
			"forge": "writeInstant(Instant arg0)",
			"fabric": "writeInstant(Instant instant)"
		},
		{
			"forge": "readPublicKey()",
			"fabric": "readPublicKey()"
		},
		{
			"forge": "writePublicKey(PublicKey arg0)",
			"fabric": "writePublicKey(PublicKey publicKey)"
		},
		{
			"forge": "readBlockHitResult()",
			"fabric": "readBlockHitResult()"
		},
		{
			"forge": "writeBlockHitResult(BlockHitResult arg0)",
			"fabric": "writeBlockHitResult(BlockHitResult hitResult)"
		},
		{
			"forge": "readBitSet()",
			"fabric": "readBitSet()"
		},
		{
			"forge": "writeBitSet(BitSet arg0)",
			"fabric": "writeBitSet(BitSet bitSet)"
		},
		{
			"forge": "readFixedBitSet(int arg0)",
			"fabric": "readBitSet(int size)"
		},
		{
			"forge": "writeFixedBitSet(BitSet arg0, int arg1)",
			"fabric": "writeBitSet(BitSet bitSet, int size)"
		},
		{
			"forge": "readGameProfile()",
			"fabric": "readGameProfile()"
		},
		{
			"forge": "writeGameProfile(com.mojang.authlib.GameProfile arg0)",
			"fabric": "writeGameProfile(com.mojang.authlib.GameProfile gameProfile)"
		},
		{
			"forge": "readGameProfileProperties()",
			"fabric": "readPropertyMap()"
		},
		{
			"forge": "writeGameProfileProperties(com.mojang.authlib.properties.PropertyMap arg0)",
			"fabric": "writePropertyMap(com.mojang.authlib.properties.PropertyMap propertyMap)"
		},
		{
			"forge": "readProperty()",
			"fabric": "readProperty()"
		},
		{
			"forge": "writeProperty(com.mojang.authlib.properties.Property arg0)",
			"fabric": "writeProperty(com.mojang.authlib.properties.Property property)"
		},
		{
			"forge": "capacity(int arg0)",
			"fabric": "capacity(int capacity)"
		},
		{
			"forge": "order(ByteOrder arg0)",
			"fabric": "order(ByteOrder byteOrder)"
		},
		{
			"forge": "readerIndex(int arg0)",
			"fabric": "readerIndex(int index)"
		},
		{
			"forge": "writerIndex(int arg0)",
			"fabric": "writerIndex(int index)"
		},
		{
			"forge": "setIndex(int arg0, int arg1)",
			"fabric": "setIndex(int readerIndex, int writerIndex)"
		},
		{
			"forge": "isReadable(int arg0)",
			"fabric": "isReadable(int size)"
		},
		{
			"forge": "isWritable(int arg0)",
			"fabric": "isWritable(int size)"
		},
		{
			"forge": "ensureWritable(int arg0)",
			"fabric": "ensureWritable(int minBytes)"
		},
		{
			"forge": "ensureWritable(int arg0, boolean arg1)",
			"fabric": "ensureWritable(int minBytes, boolean force)"
		},
		{
			"forge": "getBoolean(int arg0)",
			"fabric": "getBoolean(int index)"
		},
		{
			"forge": "getByte(int arg0)",
			"fabric": "getByte(int index)"
		},
		{
			"forge": "getUnsignedByte(int arg0)",
			"fabric": "getUnsignedByte(int index)"
		},
		{
			"forge": "getShort(int arg0)",
			"fabric": "getShort(int index)"
		},
		{
			"forge": "getShortLE(int arg0)",
			"fabric": "getShortLE(int index)"
		},
		{
			"forge": "getUnsignedShort(int arg0)",
			"fabric": "getUnsignedShort(int index)"
		},
		{
			"forge": "getUnsignedShortLE(int arg0)",
			"fabric": "getUnsignedShortLE(int index)"
		},
		{
			"forge": "getMedium(int arg0)",
			"fabric": "getMedium(int index)"
		},
		{
			"forge": "getMediumLE(int arg0)",
			"fabric": "getMediumLE(int index)"
		},
		{
			"forge": "getUnsignedMedium(int arg0)",
			"fabric": "getUnsignedMedium(int index)"
		},
		{
			"forge": "getUnsignedMediumLE(int arg0)",
			"fabric": "getUnsignedMediumLE(int index)"
		},
		{
			"forge": "getInt(int arg0)",
			"fabric": "getInt(int index)"
		},
		{
			"forge": "getIntLE(int arg0)",
			"fabric": "getIntLE(int index)"
		},
		{
			"forge": "getUnsignedInt(int arg0)",
			"fabric": "getUnsignedInt(int index)"
		},
		{
			"forge": "getUnsignedIntLE(int arg0)",
			"fabric": "getUnsignedIntLE(int index)"
		},
		{
			"forge": "getLong(int arg0)",
			"fabric": "getLong(int index)"
		},
		{
			"forge": "getLongLE(int arg0)",
			"fabric": "getLongLE(int index)"
		},
		{
			"forge": "getChar(int arg0)",
			"fabric": "getChar(int index)"
		},
		{
			"forge": "getFloat(int arg0)",
			"fabric": "getFloat(int index)"
		},
		{
			"forge": "getDouble(int arg0)",
			"fabric": "getDouble(int index)"
		},
		{
			"forge": "getBytes(int arg0, io.netty.buffer.ByteBuf arg1)",
			"fabric": "getBytes(int index, io.netty.buffer.ByteBuf buf)"
		},
		{
			"forge": "getBytes(int arg0, io.netty.buffer.ByteBuf arg1, int arg2)",
			"fabric": "getBytes(int index, io.netty.buffer.ByteBuf buf, int length)"
		},
		{
			"forge": "getBytes(int arg0, io.netty.buffer.ByteBuf arg1, int arg2, int arg3)",
			"fabric": "getBytes(int index, io.netty.buffer.ByteBuf buf, int outputIndex, int length)"
		},
		{
			"forge": "getBytes(int arg0, byte[] arg1)",
			"fabric": "getBytes(int index, byte[] bytes)"
		},
		{
			"forge": "getBytes(int arg0, byte[] arg1, int arg2, int arg3)",
			"fabric": "getBytes(int index, byte[] bytes, int outputIndex, int length)"
		},
		{
			"forge": "getBytes(int arg0, ByteBuffer arg1)",
			"fabric": "getBytes(int index, ByteBuffer buf)"
		},
		{
			"forge": "getBytes(int arg0, OutputStream arg1, int arg2)",
			"fabric": "getBytes(int index, OutputStream stream, int length)"
		},
		{
			"forge": "getBytes(int arg0, GatheringByteChannel arg1, int arg2)",
			"fabric": "getBytes(int index, GatheringByteChannel channel, int length)"
		},
		{
			"forge": "getBytes(int arg0, FileChannel arg1, long arg2, int arg3)",
			"fabric": "getBytes(int index, FileChannel channel, long pos, int length)"
		},
		{
			"forge": "getCharSequence(int arg0, int arg1, Charset arg2)",
			"fabric": "getCharSequence(int index, int length, Charset charset)"
		},
		{
			"forge": "setBoolean(int arg0, boolean arg1)",
			"fabric": "setBoolean(int index, boolean value)"
		},
		{
			"forge": "setByte(int arg0, int arg1)",
			"fabric": "setByte(int index, int value)"
		},
		{
			"forge": "setShort(int arg0, int arg1)",
			"fabric": "setShort(int index, int value)"
		},
		{
			"forge": "setShortLE(int arg0, int arg1)",
			"fabric": "setShortLE(int index, int value)"
		},
		{
			"forge": "setMedium(int arg0, int arg1)",
			"fabric": "setMedium(int index, int value)"
		},
		{
			"forge": "setMediumLE(int arg0, int arg1)",
			"fabric": "setMediumLE(int index, int value)"
		},
		{
			"forge": "setInt(int arg0, int arg1)",
			"fabric": "setInt(int index, int value)"
		},
		{
			"forge": "setIntLE(int arg0, int arg1)",
			"fabric": "setIntLE(int index, int value)"
		},
		{
			"forge": "setLong(int arg0, long arg1)",
			"fabric": "setLong(int index, long value)"
		},
		{
			"forge": "setLongLE(int arg0, long arg1)",
			"fabric": "setLongLE(int index, long value)"
		},
		{
			"forge": "setChar(int arg0, int arg1)",
			"fabric": "setChar(int index, int value)"
		},
		{
			"forge": "setFloat(int arg0, float arg1)",
			"fabric": "setFloat(int index, float value)"
		},
		{
			"forge": "setDouble(int arg0, double arg1)",
			"fabric": "setDouble(int index, double value)"
		},
		{
			"forge": "setBytes(int arg0, io.netty.buffer.ByteBuf arg1)",
			"fabric": "setBytes(int index, io.netty.buffer.ByteBuf buf)"
		},
		{
			"forge": "setBytes(int arg0, io.netty.buffer.ByteBuf arg1, int arg2)",
			"fabric": "setBytes(int index, io.netty.buffer.ByteBuf buf, int length)"
		},
		{
			"forge": "setBytes(int arg0, io.netty.buffer.ByteBuf arg1, int arg2, int arg3)",
			"fabric": "setBytes(int index, io.netty.buffer.ByteBuf buf, int sourceIndex, int length)"
		},
		{
			"forge": "setBytes(int arg0, byte[] arg1)",
			"fabric": "setBytes(int index, byte[] bytes)"
		},
		{
			"forge": "setBytes(int arg0, byte[] arg1, int arg2, int arg3)",
			"fabric": "setBytes(int index, byte[] bytes, int sourceIndex, int length)"
		},
		{
			"forge": "setBytes(int arg0, ByteBuffer arg1)",
			"fabric": "setBytes(int index, ByteBuffer buf)"
		},
		{
			"forge": "setBytes(int arg0, InputStream arg1, int arg2)",
			"fabric": "setBytes(int index, InputStream stream, int length)"
		},
		{
			"forge": "setBytes(int arg0, ScatteringByteChannel arg1, int arg2)",
			"fabric": "setBytes(int index, ScatteringByteChannel channel, int length)"
		},
		{
			"forge": "setBytes(int arg0, FileChannel arg1, long arg2, int arg3)",
			"fabric": "setBytes(int index, FileChannel channel, long pos, int length)"
		},
		{
			"forge": "setZero(int arg0, int arg1)",
			"fabric": "setZero(int index, int length)"
		},
		{
			"forge": "setCharSequence(int arg0, CharSequence arg1, Charset arg2)",
			"fabric": "setCharSequence(int index, CharSequence sequence, Charset charset)"
		},
		{
			"forge": "readBytes(int arg0)",
			"fabric": "readBytes(int length)"
		},
		{
			"forge": "readSlice(int arg0)",
			"fabric": "readSlice(int length)"
		},
		{
			"forge": "readRetainedSlice(int arg0)",
			"fabric": "readRetainedSlice(int length)"
		},
		{
			"forge": "readBytes(io.netty.buffer.ByteBuf arg0)",
			"fabric": "readBytes(io.netty.buffer.ByteBuf buf)"
		},
		{
			"forge": "readBytes(io.netty.buffer.ByteBuf arg0, int arg1)",
			"fabric": "readBytes(io.netty.buffer.ByteBuf buf, int length)"
		},
		{
			"forge": "readBytes(io.netty.buffer.ByteBuf arg0, int arg1, int arg2)",
			"fabric": "readBytes(io.netty.buffer.ByteBuf buf, int outputIndex, int length)"
		},
		{
			"forge": "readBytes(byte[] arg0)",
			"fabric": "readBytes(byte[] bytes)"
		},
		{
			"forge": "readBytes(byte[] arg0, int arg1, int arg2)",
			"fabric": "readBytes(byte[] bytes, int outputIndex, int length)"
		},
		{
			"forge": "readBytes(ByteBuffer arg0)",
			"fabric": "readBytes(ByteBuffer buf)"
		},
		{
			"forge": "readBytes(OutputStream arg0, int arg1)",
			"fabric": "readBytes(OutputStream stream, int length)"
		},
		{
			"forge": "readBytes(GatheringByteChannel arg0, int arg1)",
			"fabric": "readBytes(GatheringByteChannel channel, int length)"
		},
		{
			"forge": "readCharSequence(int arg0, Charset arg1)",
			"fabric": "readCharSequence(int length, Charset charset)"
		},
		{
			"forge": "readBytes(FileChannel arg0, long arg1, int arg2)",
			"fabric": "readBytes(FileChannel channel, long pos, int length)"
		},
		{
			"forge": "skipBytes(int arg0)",
			"fabric": "skipBytes(int length)"
		},
		{
			"forge": "writeBoolean(boolean arg0)",
			"fabric": "writeBoolean(boolean value)"
		},
		{
			"forge": "writeByte(int arg0)",
			"fabric": "writeByte(int value)"
		},
		{
			"forge": "writeShort(int arg0)",
			"fabric": "writeShort(int value)"
		},
		{
			"forge": "writeShortLE(int arg0)",
			"fabric": "writeShortLE(int value)"
		},
		{
			"forge": "writeMedium(int arg0)",
			"fabric": "writeMedium(int value)"
		},
		{
			"forge": "writeMediumLE(int arg0)",
			"fabric": "writeMediumLE(int value)"
		},
		{
			"forge": "writeInt(int arg0)",
			"fabric": "writeInt(int value)"
		},
		{
			"forge": "writeIntLE(int arg0)",
			"fabric": "writeIntLE(int value)"
		},
		{
			"forge": "writeLong(long arg0)",
			"fabric": "writeLong(long value)"
		},
		{
			"forge": "writeLongLE(long arg0)",
			"fabric": "writeLongLE(long value)"
		},
		{
			"forge": "writeChar(int arg0)",
			"fabric": "writeChar(int value)"
		},
		{
			"forge": "writeFloat(float arg0)",
			"fabric": "writeFloat(float value)"
		},
		{
			"forge": "writeDouble(double arg0)",
			"fabric": "writeDouble(double value)"
		},
		{
			"forge": "writeBytes(io.netty.buffer.ByteBuf arg0)",
			"fabric": "writeBytes(io.netty.buffer.ByteBuf buf)"
		},
		{
			"forge": "writeBytes(io.netty.buffer.ByteBuf arg0, int arg1)",
			"fabric": "writeBytes(io.netty.buffer.ByteBuf buf, int length)"
		},
		{
			"forge": "writeBytes(io.netty.buffer.ByteBuf arg0, int arg1, int arg2)",
			"fabric": "writeBytes(io.netty.buffer.ByteBuf buf, int sourceIndex, int length)"
		},
		{
			"forge": "writeBytes(byte[] arg0)",
			"fabric": "writeBytes(byte[] bytes)"
		},
		{
			"forge": "writeBytes(byte[] arg0, int arg1, int arg2)",
			"fabric": "writeBytes(byte[] bytes, int sourceIndex, int length)"
		},
		{
			"forge": "writeBytes(ByteBuffer arg0)",
			"fabric": "writeBytes(ByteBuffer buf)"
		},
		{
			"forge": "writeBytes(InputStream arg0, int arg1)",
			"fabric": "writeBytes(InputStream stream, int length)"
		},
		{
			"forge": "writeBytes(ScatteringByteChannel arg0, int arg1)",
			"fabric": "writeBytes(ScatteringByteChannel channel, int length)"
		},
		{
			"forge": "writeBytes(FileChannel arg0, long arg1, int arg2)",
			"fabric": "writeBytes(FileChannel channel, long pos, int length)"
		},
		{
			"forge": "writeZero(int arg0)",
			"fabric": "writeZero(int length)"
		},
		{
			"forge": "writeCharSequence(CharSequence arg0, Charset arg1)",
			"fabric": "writeCharSequence(CharSequence sequence, Charset charset)"
		},
		{
			"forge": "indexOf(int arg0, int arg1, byte arg2)",
			"fabric": "indexOf(int from, int to, byte value)"
		},
		{
			"forge": "bytesBefore(byte arg0)",
			"fabric": "bytesBefore(byte value)"
		},
		{
			"forge": "bytesBefore(int arg0, byte arg1)",
			"fabric": "bytesBefore(int length, byte value)"
		},
		{
			"forge": "bytesBefore(int arg0, int arg1, byte arg2)",
			"fabric": "bytesBefore(int index, int length, byte value)"
		},
		{
			"forge": "forEachByte(io.netty.util.ByteProcessor arg0)",
			"fabric": "forEachByte(io.netty.util.ByteProcessor byteProcessor)"
		},
		{
			"forge": "forEachByte(int arg0, int arg1, io.netty.util.ByteProcessor arg2)",
			"fabric": "forEachByte(int index, int length, io.netty.util.ByteProcessor byteProcessor)"
		},
		{
			"forge": "forEachByteDesc(io.netty.util.ByteProcessor arg0)",
			"fabric": "forEachByteDesc(io.netty.util.ByteProcessor byteProcessor)"
		},
		{
			"forge": "forEachByteDesc(int arg0, int arg1, io.netty.util.ByteProcessor arg2)",
			"fabric": "forEachByteDesc(int index, int length, io.netty.util.ByteProcessor byteProcessor)"
		},
		{
			"forge": "copy(int arg0, int arg1)",
			"fabric": "copy(int index, int length)"
		},
		{
			"forge": "slice(int arg0, int arg1)",
			"fabric": "slice(int index, int length)"
		},
		{
			"forge": "retainedSlice(int arg0, int arg1)",
			"fabric": "retainedSlice(int index, int length)"
		},
		{
			"forge": "nioBuffer(int arg0, int arg1)",
			"fabric": "nioBuffer(int index, int length)"
		},
		{
			"forge": "internalNioBuffer(int arg0, int arg1)",
			"fabric": "internalNioBuffer(int index, int length)"
		},
		{
			"forge": "nioBuffers(int arg0, int arg1)",
			"fabric": "nioBuffers(int index, int length)"
		},
		{
			"forge": "toString(Charset arg0)",
			"fabric": "toString(Charset charset)"
		},
		{
			"forge": "toString(int arg0, int arg1, Charset arg2)",
			"fabric": "toString(int index, int length, Charset charset)"
		},
		{
			"forge": "compareTo(io.netty.buffer.ByteBuf arg0)",
			"fabric": "compareTo(io.netty.buffer.ByteBuf arg0)"
		},
		{
			"forge": "retain(int arg0)",
			"fabric": "retain(int arg0)"
		},
		{
			"forge": "retain()",
			"fabric": "retain()"
		},
		{
			"forge": "touch()",
			"fabric": "touch()"
		},
		{
			"forge": "touch(Object arg0)",
			"fabric": "touch(Object arg0)"
		},
		{
			"forge": "release(int arg0)",
			"fabric": "release(int decrement)"
		}
	]
}