{
	"title": "net.minecraft.world.inventory.AbstractContainerMenu",
	"items": [
		{
			"forge": "net.minecraft.world.inventory.AbstractContainerMenu",
			"fabric": "net.minecraft.screen.ScreenHandler"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "SLOT_CLICKED_OUTSIDE",
			"fabric": "EMPTY_SPACE_SLOT_INDEX"
		},
		{
			"forge": "QUICKCRAFT_TYPE_CHARITABLE",
			"fabric": "field_30731"
		},
		{
			"forge": "QUICKCRAFT_TYPE_GREEDY",
			"fabric": "field_30732"
		},
		{
			"forge": "QUICKCRAFT_TYPE_CLONE",
			"fabric": "field_30733"
		},
		{
			"forge": "QUICKCRAFT_HEADER_START",
			"fabric": "field_30734"
		},
		{
			"forge": "QUICKCRAFT_HEADER_CONTINUE",
			"fabric": "field_30735"
		},
		{
			"forge": "QUICKCRAFT_HEADER_END",
			"fabric": "field_30736"
		},
		{
			"forge": "CARRIED_SLOT_SIZE",
			"fabric": "field_30737"
		},
		{
			"forge": "lastSlots",
			"fabric": "trackedStacks"
		},
		{
			"forge": "slots",
			"fabric": "slots"
		},
		{
			"forge": "dataSlots",
			"fabric": "properties"
		},
		{
			"forge": "carried",
			"fabric": "cursorStack"
		},
		{
			"forge": "remoteSlots",
			"fabric": "previousTrackedStacks"
		},
		{
			"forge": "remoteDataSlots",
			"fabric": "trackedPropertyValues"
		},
		{
			"forge": "remoteCarried",
			"fabric": "previousCursorStack"
		},
		{
			"forge": "stateId",
			"fabric": "revision"
		},
		{
			"forge": "menuType",
			"fabric": "type"
		},
		{
			"forge": "containerId",
			"fabric": "syncId"
		},
		{
			"forge": "quickcraftType",
			"fabric": "quickCraftButton"
		},
		{
			"forge": "quickcraftStatus",
			"fabric": "quickCraftStage"
		},
		{
			"forge": "quickcraftSlots",
			"fabric": "quickCraftSlots"
		},
		{
			"forge": "containerListeners",
			"fabric": "listeners"
		},
		{
			"forge": "synchronizer",
			"fabric": "syncHandler"
		},
		{
			"forge": "suppressRemoteUpdates",
			"fabric": "disableSync"
		},
		{
			"forge": "stillValid(ContainerLevelAccess arg0, Player arg1, Block arg2)",
			"fabric": "canUse(ScreenHandlerContext context, PlayerEntity player, Block block)"
		},
		{
			"forge": "stillValid(ContainerLevelAccess arg0, Player arg1, Block arg2)",
			"fabric": "canUse(ScreenHandlerContext context, PlayerEntity player, Block block)"
		},
		{
			"forge": "getType()",
			"fabric": "getType()"
		},
		{
			"forge": "checkContainerSize(Container arg0, int arg1)",
			"fabric": "checkSize(Inventory inventory, int expectedSize)"
		},
		{
			"forge": "checkContainerDataCount(ContainerData arg0, int arg1)",
			"fabric": "checkDataCount(PropertyDelegate data, int expectedCount)"
		},
		{
			"forge": "isValidSlotIndex(int arg0)",
			"fabric": "isValid(int slot)"
		},
		{
			"forge": "addSlot(Slot arg0)",
			"fabric": "addSlot(Slot slot)"
		},
		{
			"forge": "addDataSlot(DataSlot arg0)",
			"fabric": "addProperty(Property property)"
		},
		{
			"forge": "addDataSlots(ContainerData arg0)",
			"fabric": "addProperties(PropertyDelegate propertyDelegate)"
		},
		{
			"forge": "addSlotListener(ContainerListener arg0)",
			"fabric": "addListener(ScreenHandlerListener listener)"
		},
		{
			"forge": "setSynchronizer(ContainerSynchronizer arg0)",
			"fabric": "updateSyncHandler(ScreenHandlerSyncHandler handler)"
		},
		{
			"forge": "sendAllDataToRemote()",
			"fabric": "syncState()"
		},
		{
			"forge": "removeSlotListener(ContainerListener arg0)",
			"fabric": "removeListener(ScreenHandlerListener listener)"
		},
		{
			"forge": "getItems()",
			"fabric": "getStacks()"
		},
		{
			"forge": "broadcastChanges()",
			"fabric": "sendContentUpdates()"
		},
		{
			"forge": "broadcastFullState()",
			"fabric": "updateToClient()"
		},
		{
			"forge": "updateDataSlotListeners(int arg0, int arg1)",
			"fabric": "notifyPropertyUpdate(int index, int value)"
		},
		{
			"forge": "triggerSlotListeners(int arg0, ItemStack arg1, Supplier<ItemStack> arg2)",
			"fabric": "updateTrackedSlot(int slot, ItemStack stack, Supplier<ItemStack> copySupplier)"
		},
		{
			"forge": "synchronizeSlotToRemote(int arg0, ItemStack arg1, Supplier<ItemStack> arg2)",
			"fabric": "checkSlotUpdates(int slot, ItemStack stack, Supplier<ItemStack> copySupplier)"
		},
		{
			"forge": "synchronizeDataSlotToRemote(int arg0, int arg1)",
			"fabric": "checkPropertyUpdates(int id, int value)"
		},
		{
			"forge": "synchronizeCarriedToRemote()",
			"fabric": "checkCursorStackUpdates()"
		},
		{
			"forge": "setRemoteSlot(int arg0, ItemStack arg1)",
			"fabric": "setPreviousTrackedSlot(int slot, ItemStack stack)"
		},
		{
			"forge": "setRemoteSlotNoCopy(int arg0, ItemStack arg1)",
			"fabric": "setPreviousTrackedSlotMutable(int slot, ItemStack stack)"
		},
		{
			"forge": "setRemoteCarried(ItemStack arg0)",
			"fabric": "setPreviousCursorStack(ItemStack stack)"
		},
		{
			"forge": "clickMenuButton(Player arg0, int arg1)",
			"fabric": "onButtonClick(PlayerEntity player, int id)"
		},
		{
			"forge": "getSlot(int arg0)",
			"fabric": "getSlot(int index)"
		},
		{
			"forge": "quickMoveStack(Player arg0, int arg1)",
			"fabric": "quickMove(PlayerEntity player, int slot)"
		},
		{
			"forge": "clicked(int arg0, int arg1, ClickType arg2, Player arg3)",
			"fabric": "onSlotClick(int slotIndex, int button, SlotActionType actionType, PlayerEntity player)"
		},
		{
			"forge": "doClick(int arg0, int arg1, ClickType arg2, Player arg3)",
			"fabric": "internalOnSlotClick(int slotIndex, int button, SlotActionType actionType, PlayerEntity player)"
		},
		{
			"forge": "tryItemClickBehaviourOverride(Player arg0, ClickAction arg1, Slot arg2, ItemStack arg3, ItemStack arg4)",
			"fabric": "handleSlotClick(PlayerEntity player, ClickType clickType, Slot slot, ItemStack stack, ItemStack cursorStack)"
		},
		{
			"forge": "createCarriedSlotAccess()",
			"fabric": "getCursorStackReference()"
		},
		{
			"forge": "canTakeItemForPickAll(ItemStack arg0, Slot arg1)",
			"fabric": "canInsertIntoSlot(ItemStack stack, Slot slot)"
		},
		{
			"forge": "removed(Player arg0)",
			"fabric": "onClosed(PlayerEntity player)"
		},
		{
			"forge": "clearContainer(Player arg0, Container arg1)",
			"fabric": "dropInventory(PlayerEntity player, Inventory inventory)"
		},
		{
			"forge": "slotsChanged(Container arg0)",
			"fabric": "onContentChanged(Inventory inventory)"
		},
		{
			"forge": "setItem(int arg0, int arg1, ItemStack arg2)",
			"fabric": "setStackInSlot(int slot, int revision, ItemStack stack)"
		},
		{
			"forge": "initializeContents(int arg0, List<ItemStack> arg1, ItemStack arg2)",
			"fabric": "updateSlotStacks(int revision, List<ItemStack> stacks, ItemStack cursorStack)"
		},
		{
			"forge": "setData(int arg0, int arg1)",
			"fabric": "setProperty(int id, int value)"
		},
		{
			"forge": "stillValid(Player arg0)",
			"fabric": "canUse(PlayerEntity player)"
		},
		{
			"forge": "moveItemStackTo(ItemStack arg0, int arg1, int arg2, boolean arg3)",
			"fabric": "insertItem(ItemStack stack, int startIndex, int endIndex, boolean fromLast)"
		},
		{
			"forge": "getQuickcraftType(int arg0)",
			"fabric": "unpackQuickCraftButton(int quickCraftData)"
		},
		{
			"forge": "getQuickcraftHeader(int arg0)",
			"fabric": "unpackQuickCraftStage(int quickCraftData)"
		},
		{
			"forge": "getQuickcraftMask(int arg0, int arg1)",
			"fabric": "packQuickCraftData(int quickCraftStage, int buttonId)"
		},
		{
			"forge": "isValidQuickcraftType(int arg0, Player arg1)",
			"fabric": "shouldQuickCraftContinue(int stage, PlayerEntity player)"
		},
		{
			"forge": "resetQuickCraft()",
			"fabric": "endQuickCraft()"
		},
		{
			"forge": "canItemQuickReplace(Slot arg0, ItemStack arg1, boolean arg2)",
			"fabric": "canInsertItemIntoSlot(Slot slot, ItemStack stack, boolean allowOverflow)"
		},
		{
			"forge": "getQuickCraftPlaceCount(Set<Slot> arg0, int arg1, ItemStack arg2)",
			"fabric": "calculateStackSize(Set<Slot> slots, int mode, ItemStack stack)"
		},
		{
			"forge": "canDragTo(Slot arg0)",
			"fabric": "canInsertIntoSlot(Slot slot)"
		},
		{
			"forge": "getRedstoneSignalFromBlockEntity(BlockEntity arg0)",
			"fabric": "calculateComparatorOutput(BlockEntity entity)"
		},
		{
			"forge": "getRedstoneSignalFromContainer(Container arg0)",
			"fabric": "calculateComparatorOutput(Inventory inventory)"
		},
		{
			"forge": "setCarried(ItemStack arg0)",
			"fabric": "setCursorStack(ItemStack stack)"
		},
		{
			"forge": "getCarried()",
			"fabric": "getCursorStack()"
		},
		{
			"forge": "suppressRemoteUpdates()",
			"fabric": "disableSyncing()"
		},
		{
			"forge": "resumeRemoteUpdates()",
			"fabric": "enableSyncing()"
		},
		{
			"forge": "transferState(AbstractContainerMenu arg0)",
			"fabric": "copySharedSlots(ScreenHandler handler)"
		},
		{
			"forge": "findSlot(Container arg0, int arg1)",
			"fabric": "getSlotIndex(Inventory inventory, int index)"
		},
		{
			"forge": "getStateId()",
			"fabric": "getRevision()"
		},
		{
			"forge": "incrementStateId()",
			"fabric": "nextRevision()"
		}
	]
}