{
	"title": "net.minecraft.world.level.block.DiodeBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.DiodeBlock",
			"fabric": "net.minecraft.block.AbstractRedstoneGateBlock"
		},
		{
			"forge": "SHAPE",
			"fabric": "SHAPE"
		},
		{
			"forge": "SHAPE",
			"fabric": "SHAPE"
		},
		{
			"forge": "POWERED",
			"fabric": "POWERED"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "canSurvive(BlockState arg0, LevelReader arg1, BlockPos arg2)",
			"fabric": "canPlaceAt(BlockState arg0, WorldView arg1, BlockPos arg2)"
		},
		{
			"forge": "tick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "scheduledTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "getDirectSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getStrongRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "getSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getWeakRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "neighborChanged(BlockState arg0, Level arg1, BlockPos arg2, Block arg3, BlockPos arg4, boolean arg5)",
			"fabric": "neighborUpdate(BlockState arg0, World arg1, BlockPos arg2, Block arg3, BlockPos arg4, boolean arg5)"
		},
		{
			"forge": "checkTickOnNeighbor(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "updatePowered(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "isLocked(LevelReader arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "isLocked(WorldView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "shouldTurnOn(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "hasPower(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getInputSignal(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getPower(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getAlternateSignal(SignalGetter arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getMaxInputLevelSides(RedstoneView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "isSignalSource(BlockState arg0)",
			"fabric": "emitsRedstonePower(BlockState arg0)"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext arg0)"
		},
		{
			"forge": "setPlacedBy(Level arg0, BlockPos arg1, BlockState arg2, LivingEntity arg3, ItemStack arg4)",
			"fabric": "onPlaced(World arg0, BlockPos arg1, BlockState arg2, LivingEntity arg3, ItemStack arg4)"
		},
		{
			"forge": "onPlace(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onBlockAdded(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "onRemove(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onStateReplaced(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "updateNeighborsInFront(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "updateTarget(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "sideInputDiodesOnly()",
			"fabric": "getSideInputFromGatesOnly()"
		},
		{
			"forge": "getOutputSignal(BlockGetter arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getOutputLevel(BlockView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "isDiode(BlockState arg0)",
			"fabric": "isRedstoneGate(BlockState state)"
		},
		{
			"forge": "shouldPrioritize(BlockGetter arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "isTargetNotAligned(BlockView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getDelay(BlockState arg0)",
			"fabric": "getUpdateDelayInternal(BlockState state)"
		}
	]
}