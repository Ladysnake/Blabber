{
	"title": "net.minecraft.world.entity.Mob",
	"items": [
		{
			"forge": "net.minecraft.world.entity.Mob",
			"fabric": "net.minecraft.entity.mob.MobEntity"
		},
		{
			"forge": "DATA_MOB_FLAGS_ID",
			"fabric": "MOB_FLAGS"
		},
		{
			"forge": "DATA_MOB_FLAGS_ID",
			"fabric": "MOB_FLAGS"
		},
		{
			"forge": "MOB_FLAG_NO_AI",
			"fabric": "AI_DISABLED_FLAG"
		},
		{
			"forge": "MOB_FLAG_LEFTHANDED",
			"fabric": "LEFT_HANDED_FLAG"
		},
		{
			"forge": "MOB_FLAG_AGGRESSIVE",
			"fabric": "ATTACKING_FLAG"
		},
		{
			"forge": "PICKUP_REACH",
			"fabric": "MINIMUM_DROPPED_XP_PER_EQUIPMENT"
		},
		{
			"forge": "ITEM_PICKUP_REACH",
			"fabric": "ITEM_PICK_UP_RANGE_EXPANDER"
		},
		{
			"forge": "MAX_WEARING_ARMOR_CHANCE",
			"fabric": "BASE_SPAWN_EQUIPMENT_CHANCE"
		},
		{
			"forge": "MAX_PICKUP_LOOT_CHANCE",
			"fabric": "DEFAULT_CAN_PICKUP_LOOT_CHANCE"
		},
		{
			"forge": "MAX_ENCHANTED_ARMOR_CHANCE",
			"fabric": "BASE_ENCHANTED_ARMOR_CHANCE"
		},
		{
			"forge": "MAX_ENCHANTED_WEAPON_CHANCE",
			"fabric": "BASE_ENCHANTED_MAIN_HAND_EQUIPMENT_CHANCE"
		},
		{
			"forge": "LEASH_TAG",
			"fabric": "LEASH_KEY"
		},
		{
			"forge": "DEFAULT_EQUIPMENT_DROP_CHANCE",
			"fabric": "DEFAULT_DROP_CHANCE"
		},
		{
			"forge": "PRESERVE_ITEM_DROP_CHANCE",
			"fabric": "field_38932"
		},
		{
			"forge": "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS",
			"fabric": "field_35039"
		},
		{
			"forge": "ambientSoundTime",
			"fabric": "ambientSoundChance"
		},
		{
			"forge": "xpReward",
			"fabric": "experiencePoints"
		},
		{
			"forge": "lookControl",
			"fabric": "lookControl"
		},
		{
			"forge": "moveControl",
			"fabric": "moveControl"
		},
		{
			"forge": "jumpControl",
			"fabric": "jumpControl"
		},
		{
			"forge": "bodyRotationControl",
			"fabric": "bodyControl"
		},
		{
			"forge": "navigation",
			"fabric": "navigation"
		},
		{
			"forge": "goalSelector",
			"fabric": "goalSelector"
		},
		{
			"forge": "targetSelector",
			"fabric": "targetSelector"
		},
		{
			"forge": "target",
			"fabric": "target"
		},
		{
			"forge": "sensing",
			"fabric": "visibilityCache"
		},
		{
			"forge": "handItems",
			"fabric": "handItems"
		},
		{
			"forge": "handDropChances",
			"fabric": "handDropChances"
		},
		{
			"forge": "armorItems",
			"fabric": "armorItems"
		},
		{
			"forge": "armorDropChances",
			"fabric": "armorDropChances"
		},
		{
			"forge": "canPickUpLoot",
			"fabric": "canPickUpLoot"
		},
		{
			"forge": "persistenceRequired",
			"fabric": "persistent"
		},
		{
			"forge": "pathfindingMalus",
			"fabric": "pathfindingPenalties"
		},
		{
			"forge": "lootTable",
			"fabric": "lootTable"
		},
		{
			"forge": "lootTableSeed",
			"fabric": "lootTableSeed"
		},
		{
			"forge": "leashHolder",
			"fabric": "holdingEntity"
		},
		{
			"forge": "delayedLeashHolderId",
			"fabric": "holdingEntityId"
		},
		{
			"forge": "leashInfoTag",
			"fabric": "leashNbt"
		},
		{
			"forge": "restrictCenter",
			"fabric": "positionTarget"
		},
		{
			"forge": "restrictRadius",
			"fabric": "positionTargetRange"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "createMobAttributes()",
			"fabric": "createMobAttributes()"
		},
		{
			"forge": "createNavigation(Level arg0)",
			"fabric": "createNavigation(World world)"
		},
		{
			"forge": "shouldPassengersInheritMalus()",
			"fabric": "movesIndependently()"
		},
		{
			"forge": "getPathfindingMalus(BlockPathTypes arg0)",
			"fabric": "getPathfindingPenalty(PathNodeType nodeType)"
		},
		{
			"forge": "setPathfindingMalus(BlockPathTypes arg0, float arg1)",
			"fabric": "setPathfindingPenalty(PathNodeType nodeType, float penalty)"
		},
		{
			"forge": "onPathfindingStart()",
			"fabric": "onStartPathfinding()"
		},
		{
			"forge": "onPathfindingDone()",
			"fabric": "onFinishPathfinding()"
		},
		{
			"forge": "createBodyControl()",
			"fabric": "createBodyControl()"
		},
		{
			"forge": "getLookControl()",
			"fabric": "getLookControl()"
		},
		{
			"forge": "getMoveControl()",
			"fabric": "getMoveControl()"
		},
		{
			"forge": "getJumpControl()",
			"fabric": "getJumpControl()"
		},
		{
			"forge": "getNavigation()",
			"fabric": "getNavigation()"
		},
		{
			"forge": "getControllingPassenger()",
			"fabric": "getControllingPassenger()"
		},
		{
			"forge": "getSensing()",
			"fabric": "getVisibilityCache()"
		},
		{
			"forge": "getTarget()",
			"fabric": "getTarget()"
		},
		{
			"forge": "setTarget(LivingEntity arg0)",
			"fabric": "setTarget(LivingEntity target)"
		},
		{
			"forge": "canAttackType(EntityType<?> arg0)",
			"fabric": "canTarget(EntityType<?> arg0)"
		},
		{
			"forge": "canFireProjectileWeapon(ProjectileWeaponItem arg0)",
			"fabric": "canUseRangedWeapon(RangedWeaponItem weapon)"
		},
		{
			"forge": "ate()",
			"fabric": "onEatingGrass()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "getAmbientSoundInterval()",
			"fabric": "getMinAmbientSoundDelay()"
		},
		{
			"forge": "playAmbientSound()",
			"fabric": "playAmbientSound()"
		},
		{
			"forge": "baseTick()",
			"fabric": "baseTick()"
		},
		{
			"forge": "playHurtSound(DamageSource arg0)",
			"fabric": "playHurtSound(DamageSource arg0)"
		},
		{
			"forge": "resetAmbientSoundTime()",
			"fabric": "resetSoundDelay()"
		},
		{
			"forge": "getExperienceReward()",
			"fabric": "getXpToDrop()"
		},
		{
			"forge": "spawnAnim()",
			"fabric": "playSpawnEffects()"
		},
		{
			"forge": "handleEntityEvent(byte arg0)",
			"fabric": "handleStatus(byte arg0)"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "updateControlFlags()",
			"fabric": "updateGoalControls()"
		},
		{
			"forge": "tickHeadTurn(float arg0, float arg1)",
			"fabric": "turnHead(float arg0, float arg1)"
		},
		{
			"forge": "getAmbientSound()",
			"fabric": "getAmbientSound()"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "dropFromLootTable(DamageSource arg0, boolean arg1)",
			"fabric": "dropLoot(DamageSource arg0, boolean arg1)"
		},
		{
			"forge": "getLootTable()",
			"fabric": "getLootTable()"
		},
		{
			"forge": "getDefaultLootTable()",
			"fabric": "getLootTableId()"
		},
		{
			"forge": "getLootTableSeed()",
			"fabric": "getLootTableSeed()"
		},
		{
			"forge": "setZza(float arg0)",
			"fabric": "setForwardSpeed(float forwardSpeed)"
		},
		{
			"forge": "setYya(float arg0)",
			"fabric": "setUpwardSpeed(float upwardSpeed)"
		},
		{
			"forge": "setXxa(float arg0)",
			"fabric": "setSidewaysSpeed(float sidewaysSpeed)"
		},
		{
			"forge": "setSpeed(float arg0)",
			"fabric": "setMovementSpeed(float arg0)"
		},
		{
			"forge": "aiStep()",
			"fabric": "tickMovement()"
		},
		{
			"forge": "getPickupReach()",
			"fabric": "getItemPickUpRangeExpander()"
		},
		{
			"forge": "pickUpItem(ItemEntity arg0)",
			"fabric": "loot(ItemEntity item)"
		},
		{
			"forge": "equipItemIfPossible(ItemStack arg0)",
			"fabric": "tryEquip(ItemStack stack)"
		},
		{
			"forge": "setItemSlotAndDropWhenKilled(EquipmentSlot arg0, ItemStack arg1)",
			"fabric": "equipLootStack(EquipmentSlot slot, ItemStack stack)"
		},
		{
			"forge": "setGuaranteedDrop(EquipmentSlot arg0)",
			"fabric": "updateDropChances(EquipmentSlot slot)"
		},
		{
			"forge": "canReplaceCurrentItem(ItemStack arg0, ItemStack arg1)",
			"fabric": "prefersNewEquipment(ItemStack newStack, ItemStack oldStack)"
		},
		{
			"forge": "canReplaceEqualItem(ItemStack arg0, ItemStack arg1)",
			"fabric": "prefersNewDamageableItem(ItemStack newStack, ItemStack oldStack)"
		},
		{
			"forge": "canHoldItem(ItemStack arg0)",
			"fabric": "canPickupItem(ItemStack stack)"
		},
		{
			"forge": "wantsToPickUp(ItemStack arg0)",
			"fabric": "canGather(ItemStack stack)"
		},
		{
			"forge": "removeWhenFarAway(double arg0)",
			"fabric": "canImmediatelyDespawn(double distanceSquared)"
		},
		{
			"forge": "requiresCustomPersistence()",
			"fabric": "cannotDespawn()"
		},
		{
			"forge": "shouldDespawnInPeaceful()",
			"fabric": "isDisallowedInPeaceful()"
		},
		{
			"forge": "checkDespawn()",
			"fabric": "checkDespawn()"
		},
		{
			"forge": "serverAiStep()",
			"fabric": "tickNewAi()"
		},
		{
			"forge": "sendDebugPackets()",
			"fabric": "sendAiDebugData()"
		},
		{
			"forge": "customServerAiStep()",
			"fabric": "mobTick()"
		},
		{
			"forge": "getMaxHeadXRot()",
			"fabric": "getMaxLookPitchChange()"
		},
		{
			"forge": "getMaxHeadYRot()",
			"fabric": "getMaxHeadRotation()"
		},
		{
			"forge": "getHeadRotSpeed()",
			"fabric": "getMaxLookYawChange()"
		},
		{
			"forge": "lookAt(Entity arg0, float arg1, float arg2)",
			"fabric": "lookAtEntity(Entity targetEntity, float maxYawChange, float maxPitchChange)"
		},
		{
			"forge": "rotlerp(float arg0, float arg1, float arg2)",
			"fabric": "changeAngle(float from, float to, float max)"
		},
		{
			"forge": "checkMobSpawnRules(EntityType<? extends Mob> arg0, LevelAccessor arg1, MobSpawnType arg2, BlockPos arg3, RandomSource arg4)",
			"fabric": "canMobSpawn(EntityType<? extends MobEntity> type, WorldAccess world, SpawnReason spawnReason, BlockPos pos, Random random)"
		},
		{
			"forge": "checkSpawnRules(LevelAccessor arg0, MobSpawnType arg1)",
			"fabric": "canSpawn(WorldAccess world, SpawnReason spawnReason)"
		},
		{
			"forge": "checkSpawnObstruction(LevelReader arg0)",
			"fabric": "canSpawn(WorldView world)"
		},
		{
			"forge": "getMaxSpawnClusterSize()",
			"fabric": "getLimitPerChunk()"
		},
		{
			"forge": "isMaxGroupSizeReached(int arg0)",
			"fabric": "spawnsTooManyForEachTry(int count)"
		},
		{
			"forge": "getMaxFallDistance()",
			"fabric": "getSafeFallDistance()"
		},
		{
			"forge": "getHandSlots()",
			"fabric": "getHandItems()"
		},
		{
			"forge": "getArmorSlots()",
			"fabric": "getArmorItems()"
		},
		{
			"forge": "getItemBySlot(EquipmentSlot arg0)",
			"fabric": "getEquippedStack(EquipmentSlot arg0)"
		},
		{
			"forge": "setItemSlot(EquipmentSlot arg0, ItemStack arg1)",
			"fabric": "equipStack(EquipmentSlot arg0, ItemStack arg1)"
		},
		{
			"forge": "dropCustomDeathLoot(DamageSource arg0, int arg1, boolean arg2)",
			"fabric": "dropEquipment(DamageSource arg0, int arg1, boolean arg2)"
		},
		{
			"forge": "getEquipmentDropChance(EquipmentSlot arg0)",
			"fabric": "getDropChance(EquipmentSlot slot)"
		},
		{
			"forge": "populateDefaultEquipmentSlots(RandomSource arg0, DifficultyInstance arg1)",
			"fabric": "initEquipment(Random random, LocalDifficulty localDifficulty)"
		},
		{
			"forge": "getEquipmentForSlot(EquipmentSlot arg0, int arg1)",
			"fabric": "getEquipmentForSlot(EquipmentSlot equipmentSlot, int equipmentLevel)"
		},
		{
			"forge": "populateDefaultEquipmentEnchantments(RandomSource arg0, DifficultyInstance arg1)",
			"fabric": "updateEnchantments(Random random, LocalDifficulty localDifficulty)"
		},
		{
			"forge": "enchantSpawnedWeapon(RandomSource arg0, float arg1)",
			"fabric": "enchantMainHandItem(Random random, float power)"
		},
		{
			"forge": "enchantSpawnedArmor(RandomSource arg0, float arg1, EquipmentSlot arg2)",
			"fabric": "enchantEquipment(Random random, float power, EquipmentSlot slot)"
		},
		{
			"forge": "finalizeSpawn(ServerLevelAccessor arg0, DifficultyInstance arg1, MobSpawnType arg2, SpawnGroupData arg3, CompoundTag arg4)",
			"fabric": "initialize(ServerWorldAccess world, LocalDifficulty difficulty, SpawnReason spawnReason, EntityData entityData, NbtCompound entityNbt)"
		},
		{
			"forge": "setPersistenceRequired()",
			"fabric": "setPersistent()"
		},
		{
			"forge": "setDropChance(EquipmentSlot arg0, float arg1)",
			"fabric": "setEquipmentDropChance(EquipmentSlot slot, float chance)"
		},
		{
			"forge": "canPickUpLoot()",
			"fabric": "canPickUpLoot()"
		},
		{
			"forge": "setCanPickUpLoot(boolean arg0)",
			"fabric": "setCanPickUpLoot(boolean canPickUpLoot)"
		},
		{
			"forge": "canTakeItem(ItemStack arg0)",
			"fabric": "canEquip(ItemStack arg0)"
		},
		{
			"forge": "isPersistenceRequired()",
			"fabric": "isPersistent()"
		},
		{
			"forge": "interact(Player arg0, InteractionHand arg1)",
			"fabric": "interact(PlayerEntity arg0, Hand arg1)"
		},
		{
			"forge": "checkAndHandleImportantInteractions(Player arg0, InteractionHand arg1)",
			"fabric": "interactWithItem(PlayerEntity player, Hand hand)"
		},
		{
			"forge": "onOffspringSpawnedFromEgg(Player arg0, Mob arg1)",
			"fabric": "onPlayerSpawnedChild(PlayerEntity player, MobEntity child)"
		},
		{
			"forge": "mobInteract(Player arg0, InteractionHand arg1)",
			"fabric": "interactMob(PlayerEntity player, Hand hand)"
		},
		{
			"forge": "isWithinRestriction()",
			"fabric": "isInWalkTargetRange()"
		},
		{
			"forge": "isWithinRestriction(BlockPos arg0)",
			"fabric": "isInWalkTargetRange(BlockPos pos)"
		},
		{
			"forge": "restrictTo(BlockPos arg0, int arg1)",
			"fabric": "setPositionTarget(BlockPos target, int range)"
		},
		{
			"forge": "getRestrictCenter()",
			"fabric": "getPositionTarget()"
		},
		{
			"forge": "getRestrictRadius()",
			"fabric": "getPositionTargetRange()"
		},
		{
			"forge": "clearRestriction()",
			"fabric": "clearPositionTarget()"
		},
		{
			"forge": "hasRestriction()",
			"fabric": "hasPositionTarget()"
		},
		{
			"forge": "convertTo(EntityType<T> arg0, boolean arg1)",
			"fabric": "convertTo(EntityType<T> entityType, boolean keepEquipment)"
		},
		{
			"forge": "tickLeash()",
			"fabric": "updateLeash()"
		},
		{
			"forge": "dropLeash(boolean arg0, boolean arg1)",
			"fabric": "detachLeash(boolean sendPacket, boolean dropItem)"
		},
		{
			"forge": "canBeLeashed(Player arg0)",
			"fabric": "canBeLeashedBy(PlayerEntity player)"
		},
		{
			"forge": "isLeashed()",
			"fabric": "isLeashed()"
		},
		{
			"forge": "getLeashHolder()",
			"fabric": "getHoldingEntity()"
		},
		{
			"forge": "setLeashedTo(Entity arg0, boolean arg1)",
			"fabric": "attachLeash(Entity entity, boolean sendPacket)"
		},
		{
			"forge": "setDelayedLeashHolderId(int arg0)",
			"fabric": "setHoldingEntityId(int id)"
		},
		{
			"forge": "startRiding(Entity arg0, boolean arg1)",
			"fabric": "startRiding(Entity arg0, boolean arg1)"
		},
		{
			"forge": "restoreLeashFromSave()",
			"fabric": "readLeashNbt()"
		},
		{
			"forge": "isEffectiveAi()",
			"fabric": "canMoveVoluntarily()"
		},
		{
			"forge": "setNoAi(boolean arg0)",
			"fabric": "setAiDisabled(boolean aiDisabled)"
		},
		{
			"forge": "setLeftHanded(boolean arg0)",
			"fabric": "setLeftHanded(boolean leftHanded)"
		},
		{
			"forge": "setAggressive(boolean arg0)",
			"fabric": "setAttacking(boolean attacking)"
		},
		{
			"forge": "isNoAi()",
			"fabric": "isAiDisabled()"
		},
		{
			"forge": "isLeftHanded()",
			"fabric": "isLeftHanded()"
		},
		{
			"forge": "isAggressive()",
			"fabric": "isAttacking()"
		},
		{
			"forge": "setBaby(boolean arg0)",
			"fabric": "setBaby(boolean baby)"
		},
		{
			"forge": "getMainArm()",
			"fabric": "getMainArm()"
		},
		{
			"forge": "getMeleeAttackRangeSqr(LivingEntity arg0)",
			"fabric": "squaredAttackRange(LivingEntity target)"
		},
		{
			"forge": "getPerceivedTargetDistanceSquareForMeleeAttack(LivingEntity arg0)",
			"fabric": "getSquaredDistanceToAttackPosOf(LivingEntity target)"
		},
		{
			"forge": "isWithinMeleeAttackRange(LivingEntity arg0)",
			"fabric": "isInAttackRange(LivingEntity entity)"
		},
		{
			"forge": "doHurtTarget(Entity arg0)",
			"fabric": "tryAttack(Entity arg0)"
		},
		{
			"forge": "maybeDisableShield(Player arg0, ItemStack arg1, ItemStack arg2)",
			"fabric": "disablePlayerShield(PlayerEntity player, ItemStack mobStack, ItemStack playerStack)"
		},
		{
			"forge": "isSunBurnTick()",
			"fabric": "isAffectedByDaylight()"
		},
		{
			"forge": "jumpInLiquid(TagKey<Fluid> arg0)",
			"fabric": "swimUpward(TagKey<Fluid> arg0)"
		},
		{
			"forge": "removeFreeWill()",
			"fabric": "clearGoalsAndTasks()"
		},
		{
			"forge": "removeAllGoals(Predicate<Goal> arg0)",
			"fabric": "clearGoals(Predicate<Goal> predicate)"
		},
		{
			"forge": "removeAfterChangingDimensions()",
			"fabric": "removeFromDimension()"
		},
		{
			"forge": "getPickResult()",
			"fabric": "getPickBlockStack()"
		}
	]
}