{
	"title": "net.minecraft.world.level.block.entity.SignBlockEntity",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.entity.SignBlockEntity",
			"fabric": "net.minecraft.block.entity.SignBlockEntity"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "MAX_TEXT_LINE_WIDTH",
			"fabric": "MAX_TEXT_WIDTH"
		},
		{
			"forge": "TEXT_LINE_HEIGHT",
			"fabric": "TEXT_LINE_HEIGHT"
		},
		{
			"forge": "playerWhoMayEdit",
			"fabric": "editor"
		},
		{
			"forge": "frontText",
			"fabric": "frontText"
		},
		{
			"forge": "backText",
			"fabric": "backText"
		},
		{
			"forge": "isWaxed",
			"fabric": "waxed"
		},
		{
			"forge": "createDefaultSignText()",
			"fabric": "createText()"
		},
		{
			"forge": "createDefaultSignText()",
			"fabric": "createText()"
		},
		{
			"forge": "isFacingFrontText(Player arg0)",
			"fabric": "isPlayerFacingFront(PlayerEntity player)"
		},
		{
			"forge": "getTextFacingPlayer(Player arg0)",
			"fabric": "getTextFacing(PlayerEntity player)"
		},
		{
			"forge": "getText(boolean arg0)",
			"fabric": "getText(boolean front)"
		},
		{
			"forge": "getFrontText()",
			"fabric": "getFrontText()"
		},
		{
			"forge": "getBackText()",
			"fabric": "getBackText()"
		},
		{
			"forge": "getTextLineHeight()",
			"fabric": "getTextLineHeight()"
		},
		{
			"forge": "getMaxTextLineWidth()",
			"fabric": "getMaxTextWidth()"
		},
		{
			"forge": "saveAdditional(CompoundTag arg0)",
			"fabric": "writeNbt(NbtCompound arg0)"
		},
		{
			"forge": "load(CompoundTag arg0)",
			"fabric": "readNbt(NbtCompound arg0)"
		},
		{
			"forge": "loadLines(SignText arg0)",
			"fabric": "parseLines(SignText signText)"
		},
		{
			"forge": "loadLine(Component arg0)",
			"fabric": "parseLine(Text text)"
		},
		{
			"forge": "updateSignText(Player arg0, boolean arg1, List<FilteredText> arg2)",
			"fabric": "tryChangeText(PlayerEntity player, boolean front, List<FilteredMessage> messages)"
		},
		{
			"forge": "updateText(UnaryOperator<SignText> arg0, boolean arg1)",
			"fabric": "changeText(UnaryOperator<SignText> textChanger, boolean front)"
		},
		{
			"forge": "setMessages(Player arg0, List<FilteredText> arg1, SignText arg2)",
			"fabric": "getTextWithMessages(PlayerEntity player, List<FilteredMessage> messages, SignText text)"
		},
		{
			"forge": "setText(SignText arg0, boolean arg1)",
			"fabric": "setText(SignText text, boolean front)"
		},
		{
			"forge": "setBackText(SignText arg0)",
			"fabric": "setBackText(SignText backText)"
		},
		{
			"forge": "setFrontText(SignText arg0)",
			"fabric": "setFrontText(SignText frontText)"
		},
		{
			"forge": "canExecuteClickCommands(boolean arg0, Player arg1)",
			"fabric": "canRunCommandClickEvent(boolean front, PlayerEntity player)"
		},
		{
			"forge": "executeClickCommandsIfPresent(Player arg0, Level arg1, BlockPos arg2, boolean arg3)",
			"fabric": "runCommandClickEvent(PlayerEntity player, World world, BlockPos pos, boolean front)"
		},
		{
			"forge": "createCommandSourceStack(Player arg0, Level arg1, BlockPos arg2)",
			"fabric": "createCommandSource(PlayerEntity player, World world, BlockPos pos)"
		},
		{
			"forge": "getUpdatePacket()",
			"fabric": "toUpdatePacket()"
		},
		{
			"forge": "getUpdateTag()",
			"fabric": "toInitialChunkDataNbt()"
		},
		{
			"forge": "onlyOpCanSetNbt()",
			"fabric": "copyItemDataRequiresOperator()"
		},
		{
			"forge": "setAllowedPlayerEditor(UUID arg0)",
			"fabric": "setEditor(UUID editor)"
		},
		{
			"forge": "getPlayerWhoMayEdit()",
			"fabric": "getEditor()"
		},
		{
			"forge": "markUpdated()",
			"fabric": "updateListeners()"
		},
		{
			"forge": "isWaxed()",
			"fabric": "isWaxed()"
		},
		{
			"forge": "setWaxed(boolean arg0)",
			"fabric": "setWaxed(boolean waxed)"
		},
		{
			"forge": "playerIsTooFarAwayToEdit(UUID arg0)",
			"fabric": "isPlayerTooFarToEdit(UUID uuid)"
		},
		{
			"forge": "tick(Level arg0, BlockPos arg1, BlockState arg2, SignBlockEntity arg3)",
			"fabric": "tick(World world, BlockPos pos, BlockState state, SignBlockEntity blockEntity)"
		},
		{
			"forge": "clearInvalidPlayerWhoMayEdit(SignBlockEntity arg0, Level arg1, UUID arg2)",
			"fabric": "tryClearInvalidEditor(SignBlockEntity blockEntity, World world, UUID uuid)"
		}
	]
}