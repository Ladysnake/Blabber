{
	"title": "net.minecraft.world.level.block.TripWireBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.TripWireBlock",
			"fabric": "net.minecraft.block.TripwireBlock"
		},
		{
			"forge": "POWERED",
			"fabric": "POWERED"
		},
		{
			"forge": "POWERED",
			"fabric": "POWERED"
		},
		{
			"forge": "ATTACHED",
			"fabric": "ATTACHED"
		},
		{
			"forge": "DISARMED",
			"fabric": "DISARMED"
		},
		{
			"forge": "NORTH",
			"fabric": "NORTH"
		},
		{
			"forge": "EAST",
			"fabric": "EAST"
		},
		{
			"forge": "SOUTH",
			"fabric": "SOUTH"
		},
		{
			"forge": "WEST",
			"fabric": "WEST"
		},
		{
			"forge": "PROPERTY_BY_DIRECTION",
			"fabric": "FACING_PROPERTIES"
		},
		{
			"forge": "AABB",
			"fabric": "ATTACHED_SHAPE"
		},
		{
			"forge": "NOT_ATTACHED_AABB",
			"fabric": "DETACHED_SHAPE"
		},
		{
			"forge": "RECHECK_PERIOD",
			"fabric": "SCHEDULED_TICK_DELAY"
		},
		{
			"forge": "hook",
			"fabric": "hookBlock"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext arg0)"
		},
		{
			"forge": "updateShape(BlockState arg0, Direction arg1, BlockState arg2, LevelAccessor arg3, BlockPos arg4, BlockPos arg5)",
			"fabric": "getStateForNeighborUpdate(BlockState arg0, Direction arg1, BlockState arg2, WorldAccess arg3, BlockPos arg4, BlockPos arg5)"
		},
		{
			"forge": "onPlace(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onBlockAdded(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "onRemove(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onStateReplaced(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "playerWillDestroy(Level arg0, BlockPos arg1, BlockState arg2, Player arg3)",
			"fabric": "onBreak(World arg0, BlockPos arg1, BlockState arg2, PlayerEntity arg3)"
		},
		{
			"forge": "updateSource(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "update(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "entityInside(BlockState arg0, Level arg1, BlockPos arg2, Entity arg3)",
			"fabric": "onEntityCollision(BlockState arg0, World arg1, BlockPos arg2, Entity arg3)"
		},
		{
			"forge": "tick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "scheduledTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "checkPressed(Level arg0, BlockPos arg1)",
			"fabric": "updatePowered(World world, BlockPos pos)"
		},
		{
			"forge": "shouldConnectTo(BlockState arg0, Direction arg1)",
			"fabric": "shouldConnectTo(BlockState state, Direction facing)"
		},
		{
			"forge": "rotate(BlockState arg0, Rotation arg1)",
			"fabric": "rotate(BlockState arg0, BlockRotation arg1)"
		},
		{
			"forge": "mirror(BlockState arg0, Mirror arg1)",
			"fabric": "mirror(BlockState arg0, BlockMirror arg1)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> arg0)"
		}
	]
}