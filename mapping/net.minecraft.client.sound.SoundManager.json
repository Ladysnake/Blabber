{
	"title": "net.minecraft.client.sounds.SoundManager",
	"items": [
		{
			"forge": "net.minecraft.client.sounds.SoundManager",
			"fabric": "net.minecraft.client.sound.SoundManager"
		},
		{
			"forge": "EMPTY_SOUND",
			"fabric": "MISSING_SOUND"
		},
		{
			"forge": "EMPTY_SOUND",
			"fabric": "MISSING_SOUND"
		},
		{
			"forge": "INTENTIONALLY_EMPTY_SOUND_LOCATION",
			"fabric": "INTENTIONALLY_EMPTY_ID"
		},
		{
			"forge": "INTENTIONALLY_EMPTY_SOUND_EVENT",
			"fabric": "INTENTIONALLY_EMPTY_SOUND_SET"
		},
		{
			"forge": "INTENTIONALLY_EMPTY_SOUND",
			"fabric": "INTENTIONALLY_EMPTY_SOUND"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "SOUNDS_PATH",
			"fabric": "SOUNDS_JSON"
		},
		{
			"forge": "GSON",
			"fabric": "GSON"
		},
		{
			"forge": "SOUND_EVENT_REGISTRATION_TYPE",
			"fabric": "TYPE"
		},
		{
			"forge": "registry",
			"fabric": "sounds"
		},
		{
			"forge": "soundEngine",
			"fabric": "soundSystem"
		},
		{
			"forge": "soundCache",
			"fabric": "soundResources"
		},
		{
			"forge": "prepare(ResourceManager arg0, ProfilerFiller arg1)",
			"fabric": "prepare(ResourceManager arg0, Profiler arg1)"
		},
		{
			"forge": "prepare(ResourceManager arg0, ProfilerFiller arg1)",
			"fabric": "prepare(ResourceManager arg0, Profiler arg1)"
		},
		{
			"forge": "apply(SoundManager$Preparations arg0, ResourceManager arg1, ProfilerFiller arg2)",
			"fabric": "apply(SoundManager$SoundList arg0, ResourceManager arg1, Profiler arg2)"
		},
		{
			"forge": "getAvailableSoundDevices()",
			"fabric": "getSoundDevices()"
		},
		{
			"forge": "validateSoundResource(Sound arg0, ResourceLocation arg1, ResourceProvider arg2)",
			"fabric": "isSoundResourcePresent(Sound sound, Identifier id, ResourceFactory resourceFactory)"
		},
		{
			"forge": "getSoundEvent(ResourceLocation arg0)",
			"fabric": "get(Identifier id)"
		},
		{
			"forge": "getAvailableSounds()",
			"fabric": "getKeys()"
		},
		{
			"forge": "queueTickingSound(TickableSoundInstance arg0)",
			"fabric": "playNextTick(TickableSoundInstance sound)"
		},
		{
			"forge": "play(SoundInstance arg0)",
			"fabric": "play(SoundInstance sound)"
		},
		{
			"forge": "playDelayed(SoundInstance arg0, int arg1)",
			"fabric": "play(SoundInstance sound, int delay)"
		},
		{
			"forge": "updateSource(Camera arg0)",
			"fabric": "updateListenerPosition(Camera camera)"
		},
		{
			"forge": "pause()",
			"fabric": "pauseAll()"
		},
		{
			"forge": "stop()",
			"fabric": "stopAll()"
		},
		{
			"forge": "destroy()",
			"fabric": "close()"
		},
		{
			"forge": "tick(boolean arg0)",
			"fabric": "tick(boolean paused)"
		},
		{
			"forge": "resume()",
			"fabric": "resumeAll()"
		},
		{
			"forge": "updateSourceVolume(SoundSource arg0, float arg1)",
			"fabric": "updateSoundVolume(SoundCategory category, float volume)"
		},
		{
			"forge": "stop(SoundInstance arg0)",
			"fabric": "stop(SoundInstance sound)"
		},
		{
			"forge": "isActive(SoundInstance arg0)",
			"fabric": "isPlaying(SoundInstance sound)"
		},
		{
			"forge": "addListener(SoundEventListener arg0)",
			"fabric": "registerListener(SoundInstanceListener listener)"
		},
		{
			"forge": "removeListener(SoundEventListener arg0)",
			"fabric": "unregisterListener(SoundInstanceListener listener)"
		},
		{
			"forge": "stop(ResourceLocation arg0, SoundSource arg1)",
			"fabric": "stopSounds(Identifier id, SoundCategory soundCategory)"
		},
		{
			"forge": "getDebugString()",
			"fabric": "getDebugString()"
		},
		{
			"forge": "reload()",
			"fabric": "reloadSounds()"
		}
	]
}