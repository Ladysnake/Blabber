{
	"title": "net.minecraft.commands.arguments.selector.EntitySelectorParser",
	"items": [
		{
			"forge": "net.minecraft.commands.arguments.selector.EntitySelectorParser",
			"fabric": "net.minecraft.command.EntitySelectorReader"
		},
		{
			"forge": "SYNTAX_SELECTOR_START",
			"fabric": "SELECTOR_PREFIX"
		},
		{
			"forge": "SYNTAX_SELECTOR_START",
			"fabric": "SELECTOR_PREFIX"
		},
		{
			"forge": "SYNTAX_OPTIONS_START",
			"fabric": "ARGUMENTS_OPENING"
		},
		{
			"forge": "SYNTAX_OPTIONS_END",
			"fabric": "ARGUMENTS_CLOSING"
		},
		{
			"forge": "SYNTAX_OPTIONS_KEY_VALUE_SEPARATOR",
			"fabric": "ARGUMENT_DEFINER"
		},
		{
			"forge": "SYNTAX_OPTIONS_SEPARATOR",
			"fabric": "ARGUMENT_SEPARATOR"
		},
		{
			"forge": "SYNTAX_NOT",
			"fabric": "INVERT_MODIFIER"
		},
		{
			"forge": "SYNTAX_TAG",
			"fabric": "TAG_MODIFIER"
		},
		{
			"forge": "SELECTOR_NEAREST_PLAYER",
			"fabric": "NEAREST_PLAYER"
		},
		{
			"forge": "SELECTOR_ALL_PLAYERS",
			"fabric": "ALL_PLAYERS"
		},
		{
			"forge": "SELECTOR_RANDOM_PLAYERS",
			"fabric": "RANDOM_PLAYER"
		},
		{
			"forge": "SELECTOR_CURRENT_ENTITY",
			"fabric": "SELF"
		},
		{
			"forge": "SELECTOR_ALL_ENTITIES",
			"fabric": "ALL_ENTITIES"
		},
		{
			"forge": "ERROR_INVALID_NAME_OR_UUID",
			"fabric": "INVALID_ENTITY_EXCEPTION"
		},
		{
			"forge": "ERROR_UNKNOWN_SELECTOR_TYPE",
			"fabric": "UNKNOWN_SELECTOR_EXCEPTION"
		},
		{
			"forge": "ERROR_SELECTORS_NOT_ALLOWED",
			"fabric": "NOT_ALLOWED_EXCEPTION"
		},
		{
			"forge": "ERROR_MISSING_SELECTOR_TYPE",
			"fabric": "MISSING_EXCEPTION"
		},
		{
			"forge": "ERROR_EXPECTED_END_OF_OPTIONS",
			"fabric": "UNTERMINATED_EXCEPTION"
		},
		{
			"forge": "ERROR_EXPECTED_OPTION_VALUE",
			"fabric": "VALUELESS_EXCEPTION"
		},
		{
			"forge": "ORDER_NEAREST",
			"fabric": "NEAREST"
		},
		{
			"forge": "ORDER_FURTHEST",
			"fabric": "FURTHEST"
		},
		{
			"forge": "ORDER_RANDOM",
			"fabric": "RANDOM"
		},
		{
			"forge": "SUGGEST_NOTHING",
			"fabric": "DEFAULT_SUGGESTION_PROVIDER"
		},
		{
			"forge": "reader",
			"fabric": "reader"
		},
		{
			"forge": "allowSelectors",
			"fabric": "atAllowed"
		},
		{
			"forge": "maxResults",
			"fabric": "limit"
		},
		{
			"forge": "includesEntities",
			"fabric": "includesNonPlayers"
		},
		{
			"forge": "worldLimited",
			"fabric": "localWorldOnly"
		},
		{
			"forge": "distance",
			"fabric": "distance"
		},
		{
			"forge": "level",
			"fabric": "levelRange"
		},
		{
			"forge": "x",
			"fabric": "x"
		},
		{
			"forge": "y",
			"fabric": "y"
		},
		{
			"forge": "z",
			"fabric": "z"
		},
		{
			"forge": "deltaX",
			"fabric": "dx"
		},
		{
			"forge": "deltaY",
			"fabric": "dy"
		},
		{
			"forge": "deltaZ",
			"fabric": "dz"
		},
		{
			"forge": "rotX",
			"fabric": "pitchRange"
		},
		{
			"forge": "rotY",
			"fabric": "yawRange"
		},
		{
			"forge": "predicate",
			"fabric": "predicate"
		},
		{
			"forge": "order",
			"fabric": "sorter"
		},
		{
			"forge": "currentEntity",
			"fabric": "senderOnly"
		},
		{
			"forge": "playerName",
			"fabric": "playerName"
		},
		{
			"forge": "startPosition",
			"fabric": "startCursor"
		},
		{
			"forge": "entityUUID",
			"fabric": "uuid"
		},
		{
			"forge": "suggestions",
			"fabric": "suggestionProvider"
		},
		{
			"forge": "hasNameEquals",
			"fabric": "selectsName"
		},
		{
			"forge": "hasNameNotEquals",
			"fabric": "excludesName"
		},
		{
			"forge": "isLimited",
			"fabric": "hasLimit"
		},
		{
			"forge": "isSorted",
			"fabric": "hasSorter"
		},
		{
			"forge": "hasGamemodeEquals",
			"fabric": "selectsGameMode"
		},
		{
			"forge": "hasGamemodeNotEquals",
			"fabric": "excludesGameMode"
		},
		{
			"forge": "hasTeamEquals",
			"fabric": "selectsTeam"
		},
		{
			"forge": "hasTeamNotEquals",
			"fabric": "excludesTeam"
		},
		{
			"forge": "type",
			"fabric": "entityType"
		},
		{
			"forge": "typeInverse",
			"fabric": "excludesEntityType"
		},
		{
			"forge": "hasScores",
			"fabric": "selectsScores"
		},
		{
			"forge": "hasAdvancements",
			"fabric": "selectsAdvancements"
		},
		{
			"forge": "usesSelectors",
			"fabric": "usesAt"
		},
		{
			"forge": "getSelector()",
			"fabric": "build()"
		},
		{
			"forge": "getSelector()",
			"fabric": "build()"
		},
		{
			"forge": "createAabb(double arg0, double arg1, double arg2)",
			"fabric": "createBox(double x, double y, double z)"
		},
		{
			"forge": "finalizePredicates()",
			"fabric": "buildPredicate()"
		},
		{
			"forge": "createRotationPredicate(WrappedMinMaxBounds arg0, ToDoubleFunction<Entity> arg1)",
			"fabric": "rotationPredicate(FloatRangeArgument angleRange, ToDoubleFunction<Entity> entityToAngle)"
		},
		{
			"forge": "parseSelector()",
			"fabric": "readAtVariable()"
		},
		{
			"forge": "parseNameOrUUID()",
			"fabric": "readRegular()"
		},
		{
			"forge": "parseOptions()",
			"fabric": "readArguments()"
		},
		{
			"forge": "shouldInvertValue()",
			"fabric": "readNegationCharacter()"
		},
		{
			"forge": "isTag()",
			"fabric": "readTagCharacter()"
		},
		{
			"forge": "getReader()",
			"fabric": "getReader()"
		},
		{
			"forge": "addPredicate(Predicate<Entity> arg0)",
			"fabric": "setPredicate(Predicate<Entity> predicate)"
		},
		{
			"forge": "setWorldLimited()",
			"fabric": "setLocalWorldOnly()"
		},
		{
			"forge": "getDistance()",
			"fabric": "getDistance()"
		},
		{
			"forge": "setDistance(MinMaxBounds$Doubles arg0)",
			"fabric": "setDistance(NumberRange$FloatRange distance)"
		},
		{
			"forge": "getLevel()",
			"fabric": "getLevelRange()"
		},
		{
			"forge": "setLevel(MinMaxBounds$Ints arg0)",
			"fabric": "setLevelRange(NumberRange$IntRange levelRange)"
		},
		{
			"forge": "getRotX()",
			"fabric": "getPitchRange()"
		},
		{
			"forge": "setRotX(WrappedMinMaxBounds arg0)",
			"fabric": "setPitchRange(FloatRangeArgument pitchRange)"
		},
		{
			"forge": "getRotY()",
			"fabric": "getYawRange()"
		},
		{
			"forge": "setRotY(WrappedMinMaxBounds arg0)",
			"fabric": "setYawRange(FloatRangeArgument yawRange)"
		},
		{
			"forge": "getX()",
			"fabric": "getX()"
		},
		{
			"forge": "getY()",
			"fabric": "getY()"
		},
		{
			"forge": "getZ()",
			"fabric": "getZ()"
		},
		{
			"forge": "setX(double arg0)",
			"fabric": "setX(double x)"
		},
		{
			"forge": "setY(double arg0)",
			"fabric": "setY(double y)"
		},
		{
			"forge": "setZ(double arg0)",
			"fabric": "setZ(double z)"
		},
		{
			"forge": "setDeltaX(double arg0)",
			"fabric": "setDx(double dx)"
		},
		{
			"forge": "setDeltaY(double arg0)",
			"fabric": "setDy(double dy)"
		},
		{
			"forge": "setDeltaZ(double arg0)",
			"fabric": "setDz(double dz)"
		},
		{
			"forge": "getDeltaX()",
			"fabric": "getDx()"
		},
		{
			"forge": "getDeltaY()",
			"fabric": "getDy()"
		},
		{
			"forge": "getDeltaZ()",
			"fabric": "getDz()"
		},
		{
			"forge": "setMaxResults(int arg0)",
			"fabric": "setLimit(int limit)"
		},
		{
			"forge": "setIncludesEntities(boolean arg0)",
			"fabric": "setIncludesNonPlayers(boolean includesNonPlayers)"
		},
		{
			"forge": "getOrder()",
			"fabric": "getSorter()"
		},
		{
			"forge": "setOrder(BiConsumer<Vec3, List<? extends Entity>> arg0)",
			"fabric": "setSorter(BiConsumer<Vec3d, List<? extends Entity>> sorter)"
		},
		{
			"forge": "parse()",
			"fabric": "read()"
		},
		{
			"forge": "fillSelectorSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0)",
			"fabric": "suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder builder)"
		},
		{
			"forge": "suggestNameOrSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestName(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestNormal(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestSelectorRest(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestOpenOptions(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestOpen(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestOptionsKeyOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestOptionOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestOptionsKey(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestOption(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestOptionsNextOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestEndNext(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "suggestDefinerNext(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "isCurrentEntity()",
			"fabric": "isSenderOnly()"
		},
		{
			"forge": "setSuggestions(BiFunction<com.mojang.brigadier.suggestion.SuggestionsBuilder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder>, CompletableFuture<com.mojang.brigadier.suggestion.Suggestions>> arg0)",
			"fabric": "setSuggestionProvider(BiFunction<com.mojang.brigadier.suggestion.SuggestionsBuilder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder>, CompletableFuture<com.mojang.brigadier.suggestion.Suggestions>> suggestionProvider)"
		},
		{
			"forge": "fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder arg0, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> arg1)",
			"fabric": "listSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer)"
		},
		{
			"forge": "hasNameEquals()",
			"fabric": "selectsName()"
		},
		{
			"forge": "setHasNameEquals(boolean arg0)",
			"fabric": "setSelectsName(boolean selectsName)"
		},
		{
			"forge": "hasNameNotEquals()",
			"fabric": "excludesName()"
		},
		{
			"forge": "setHasNameNotEquals(boolean arg0)",
			"fabric": "setExcludesName(boolean excludesName)"
		},
		{
			"forge": "isLimited()",
			"fabric": "hasLimit()"
		},
		{
			"forge": "setLimited(boolean arg0)",
			"fabric": "setHasLimit(boolean hasLimit)"
		},
		{
			"forge": "isSorted()",
			"fabric": "hasSorter()"
		},
		{
			"forge": "setSorted(boolean arg0)",
			"fabric": "setHasSorter(boolean hasSorter)"
		},
		{
			"forge": "hasGamemodeEquals()",
			"fabric": "selectsGameMode()"
		},
		{
			"forge": "setHasGamemodeEquals(boolean arg0)",
			"fabric": "setSelectsGameMode(boolean selectsGameMode)"
		},
		{
			"forge": "hasGamemodeNotEquals()",
			"fabric": "excludesGameMode()"
		},
		{
			"forge": "setHasGamemodeNotEquals(boolean arg0)",
			"fabric": "setExcludesGameMode(boolean excludesGameMode)"
		},
		{
			"forge": "hasTeamEquals()",
			"fabric": "selectsTeam()"
		},
		{
			"forge": "setHasTeamEquals(boolean arg0)",
			"fabric": "setSelectsTeam(boolean selectsTeam)"
		},
		{
			"forge": "hasTeamNotEquals()",
			"fabric": "excludesTeam()"
		},
		{
			"forge": "setHasTeamNotEquals(boolean arg0)",
			"fabric": "setExcludesTeam(boolean excludesTeam)"
		},
		{
			"forge": "limitToType(EntityType<?> arg0)",
			"fabric": "setEntityType(EntityType<?> entityType)"
		},
		{
			"forge": "setTypeLimitedInversely()",
			"fabric": "setExcludesEntityType()"
		},
		{
			"forge": "isTypeLimited()",
			"fabric": "selectsEntityType()"
		},
		{
			"forge": "isTypeLimitedInversely()",
			"fabric": "excludesEntityType()"
		},
		{
			"forge": "hasScores()",
			"fabric": "selectsScores()"
		},
		{
			"forge": "setHasScores(boolean arg0)",
			"fabric": "setSelectsScores(boolean selectsScores)"
		},
		{
			"forge": "hasAdvancements()",
			"fabric": "selectsAdvancements()"
		},
		{
			"forge": "setHasAdvancements(boolean arg0)",
			"fabric": "setSelectsAdvancements(boolean selectsAdvancements)"
		}
	]
}