{
	"title": "net.minecraft.server.level.ServerEntity",
	"items": [
		{
			"forge": "net.minecraft.server.level.ServerEntity",
			"fabric": "net.minecraft.server.network.EntityTrackerEntry"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "TOLERANCE_LEVEL_ROTATION",
			"fabric": "field_29767"
		},
		{
			"forge": "level",
			"fabric": "world"
		},
		{
			"forge": "entity",
			"fabric": "entity"
		},
		{
			"forge": "updateInterval",
			"fabric": "tickInterval"
		},
		{
			"forge": "trackDelta",
			"fabric": "alwaysUpdateVelocity"
		},
		{
			"forge": "broadcast",
			"fabric": "receiver"
		},
		{
			"forge": "positionCodec",
			"fabric": "trackedPos"
		},
		{
			"forge": "yRotp",
			"fabric": "lastYaw"
		},
		{
			"forge": "xRotp",
			"fabric": "lastPitch"
		},
		{
			"forge": "yHeadRotp",
			"fabric": "lastHeadPitch"
		},
		{
			"forge": "ap",
			"fabric": "velocity"
		},
		{
			"forge": "tickCount",
			"fabric": "trackingTick"
		},
		{
			"forge": "teleportDelay",
			"fabric": "updatesWithoutVehicle"
		},
		{
			"forge": "lastPassengers",
			"fabric": "lastPassengers"
		},
		{
			"forge": "wasRiding",
			"fabric": "hadVehicle"
		},
		{
			"forge": "wasOnGround",
			"fabric": "lastOnGround"
		},
		{
			"forge": "trackedDataValues",
			"fabric": "changedEntries"
		},
		{
			"forge": "sendChanges()",
			"fabric": "tick()"
		},
		{
			"forge": "sendChanges()",
			"fabric": "tick()"
		},
		{
			"forge": "removedPassengers(List<Entity> arg0, List<Entity> arg1)",
			"fabric": "streamChangedPassengers(List<Entity> passengers, List<Entity> lastPassengers)"
		},
		{
			"forge": "removePairing(ServerPlayer arg0)",
			"fabric": "stopTracking(ServerPlayerEntity player)"
		},
		{
			"forge": "addPairing(ServerPlayer arg0)",
			"fabric": "startTracking(ServerPlayerEntity player)"
		},
		{
			"forge": "sendPairingData(ServerPlayer arg0, Consumer<Packet<ClientGamePacketListener>> arg1)",
			"fabric": "sendPackets(ServerPlayerEntity player, Consumer<Packet<ClientPlayPacketListener>> sender)"
		},
		{
			"forge": "sendDirtyEntityData()",
			"fabric": "syncEntityData()"
		},
		{
			"forge": "broadcastAndSend(Packet<?> arg0)",
			"fabric": "sendSyncPacket(Packet<?> packet)"
		}
	]
}