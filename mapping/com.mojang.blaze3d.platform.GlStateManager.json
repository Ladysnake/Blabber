{
	"title": "com.mojang.blaze3d.platform.GlStateManager",
	"items": [
		{
			"forge": "com.mojang.blaze3d.platform.GlStateManager",
			"fabric": "com.mojang.blaze3d.platform.GlStateManager"
		},
		{
			"forge": "_disableScissorTest()",
			"fabric": "_scissorBox(int x, int y, int width, int height)"
		},
		{
			"forge": "_scissorBox(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "_scissorBox(int x, int y, int width, int height)"
		},
		{
			"forge": "_depthFunc(int arg0)",
			"fabric": "_depthFunc(int func)"
		},
		{
			"forge": "_depthMask(boolean arg0)",
			"fabric": "_depthMask(boolean mask)"
		},
		{
			"forge": "_blendFunc(int arg0, int arg1)",
			"fabric": "_blendFunc(int srcFactor, int dstFactor)"
		},
		{
			"forge": "_blendFuncSeparate(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "_blendFuncSeparate(int srcFactorRGB, int dstFactorRGB, int srcFactorAlpha, int dstFactorAlpha)"
		},
		{
			"forge": "_blendEquation(int arg0)",
			"fabric": "_blendEquation(int mode)"
		},
		{
			"forge": "glGetProgrami(int arg0, int arg1)",
			"fabric": "glGetProgrami(int program, int pname)"
		},
		{
			"forge": "glAttachShader(int arg0, int arg1)",
			"fabric": "glAttachShader(int program, int shader)"
		},
		{
			"forge": "glDeleteShader(int arg0)",
			"fabric": "glDeleteShader(int shader)"
		},
		{
			"forge": "glCreateShader(int arg0)",
			"fabric": "glCreateShader(int type)"
		},
		{
			"forge": "glShaderSource(int arg0, List<String> arg1)",
			"fabric": "glShaderSource(int shader, List<String> strings)"
		},
		{
			"forge": "glCompileShader(int arg0)",
			"fabric": "glCompileShader(int shader)"
		},
		{
			"forge": "glGetShaderi(int arg0, int arg1)",
			"fabric": "glGetShaderi(int shader, int pname)"
		},
		{
			"forge": "_glUseProgram(int arg0)",
			"fabric": "_glUseProgram(int program)"
		},
		{
			"forge": "glDeleteProgram(int arg0)",
			"fabric": "glDeleteProgram(int program)"
		},
		{
			"forge": "glLinkProgram(int arg0)",
			"fabric": "glLinkProgram(int program)"
		},
		{
			"forge": "_glGetUniformLocation(int arg0, CharSequence arg1)",
			"fabric": "_glGetUniformLocation(int program, CharSequence name)"
		},
		{
			"forge": "_glUniform1(int arg0, IntBuffer arg1)",
			"fabric": "_glUniform1(int location, IntBuffer value)"
		},
		{
			"forge": "_glUniform1i(int arg0, int arg1)",
			"fabric": "_glUniform1i(int location, int value)"
		},
		{
			"forge": "_glUniform1(int arg0, FloatBuffer arg1)",
			"fabric": "_glUniform1(int location, FloatBuffer value)"
		},
		{
			"forge": "_glUniform2(int arg0, IntBuffer arg1)",
			"fabric": "_glUniform2(int location, IntBuffer value)"
		},
		{
			"forge": "_glUniform2(int arg0, FloatBuffer arg1)",
			"fabric": "_glUniform2(int location, FloatBuffer value)"
		},
		{
			"forge": "_glUniform3(int arg0, IntBuffer arg1)",
			"fabric": "_glUniform3(int location, IntBuffer value)"
		},
		{
			"forge": "_glUniform3(int arg0, FloatBuffer arg1)",
			"fabric": "_glUniform3(int location, FloatBuffer value)"
		},
		{
			"forge": "_glUniform4(int arg0, IntBuffer arg1)",
			"fabric": "_glUniform4(int location, IntBuffer value)"
		},
		{
			"forge": "_glUniform4(int arg0, FloatBuffer arg1)",
			"fabric": "_glUniform4(int location, FloatBuffer value)"
		},
		{
			"forge": "_glUniformMatrix2(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "_glUniformMatrix2(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "_glUniformMatrix3(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "_glUniformMatrix3(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "_glUniformMatrix4(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "_glUniformMatrix4(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "_glGetAttribLocation(int arg0, CharSequence arg1)",
			"fabric": "_glGetAttribLocation(int program, CharSequence name)"
		},
		{
			"forge": "_glBindAttribLocation(int arg0, int arg1, CharSequence arg2)",
			"fabric": "_glBindAttribLocation(int program, int index, CharSequence name)"
		},
		{
			"forge": "_glBindBuffer(int arg0, int arg1)",
			"fabric": "_glBindBuffer(int target, int buffer)"
		},
		{
			"forge": "_glBindVertexArray(int arg0)",
			"fabric": "_glBindVertexArray(int array)"
		},
		{
			"forge": "_glBufferData(int arg0, ByteBuffer arg1, int arg2)",
			"fabric": "_glBufferData(int target, ByteBuffer data, int usage)"
		},
		{
			"forge": "_glBufferData(int arg0, long arg1, int arg2)",
			"fabric": "_glBufferData(int target, long size, int usage)"
		},
		{
			"forge": "_glMapBuffer(int arg0, int arg1)",
			"fabric": "mapBuffer(int target, int access)"
		},
		{
			"forge": "_glUnmapBuffer(int arg0)",
			"fabric": "_glUnmapBuffer(int target)"
		},
		{
			"forge": "_glDeleteBuffers(int arg0)",
			"fabric": "_glDeleteBuffers(int buffer)"
		},
		{
			"forge": "_glCopyTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)",
			"fabric": "_glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height)"
		},
		{
			"forge": "_glDeleteVertexArrays(int arg0)",
			"fabric": "_glDeleteVertexArrays(int array)"
		},
		{
			"forge": "_glBindFramebuffer(int arg0, int arg1)",
			"fabric": "_glBindFramebuffer(int target, int framebuffer)"
		},
		{
			"forge": "_glBlitFrameBuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)",
			"fabric": "_glBlitFrameBuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)"
		},
		{
			"forge": "_glBindRenderbuffer(int arg0, int arg1)",
			"fabric": "_glBindRenderbuffer(int target, int renderbuffer)"
		},
		{
			"forge": "_glDeleteRenderbuffers(int arg0)",
			"fabric": "_glDeleteRenderbuffers(int renderbuffer)"
		},
		{
			"forge": "_glDeleteFramebuffers(int arg0)",
			"fabric": "_glDeleteFramebuffers(int framebuffer)"
		},
		{
			"forge": "_glRenderbufferStorage(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "_glRenderbufferStorage(int target, int internalFormat, int width, int height)"
		},
		{
			"forge": "_glFramebufferRenderbuffer(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "_glFramebufferRenderbuffer(int target, int attachment, int renderbufferTarget, int renderbuffer)"
		},
		{
			"forge": "glCheckFramebufferStatus(int arg0)",
			"fabric": "glCheckFramebufferStatus(int target)"
		},
		{
			"forge": "_glFramebufferTexture2D(int arg0, int arg1, int arg2, int arg3, int arg4)",
			"fabric": "_glFramebufferTexture2D(int target, int attachment, int textureTarget, int texture, int level)"
		},
		{
			"forge": "glActiveTexture(int arg0)",
			"fabric": "glActiveTexture(int texture)"
		},
		{
			"forge": "glBlendFuncSeparate(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "glBlendFuncSeparate(int srcFactorRGB, int dstFactorRGB, int srcFactorAlpha, int dstFactorAlpha)"
		},
		{
			"forge": "glGetShaderInfoLog(int arg0, int arg1)",
			"fabric": "glGetShaderInfoLog(int shader, int maxLength)"
		},
		{
			"forge": "glGetProgramInfoLog(int arg0, int arg1)",
			"fabric": "glGetProgramInfoLog(int program, int maxLength)"
		},
		{
			"forge": "_polygonMode(int arg0, int arg1)",
			"fabric": "_polygonMode(int face, int mode)"
		},
		{
			"forge": "_polygonOffset(float arg0, float arg1)",
			"fabric": "_polygonOffset(float factor, float units)"
		},
		{
			"forge": "_logicOp(int arg0)",
			"fabric": "_logicOp(int op)"
		},
		{
			"forge": "_activeTexture(int arg0)",
			"fabric": "_activeTexture(int texture)"
		},
		{
			"forge": "_texParameter(int arg0, int arg1, float arg2)",
			"fabric": "_texParameter(int target, int pname, float param)"
		},
		{
			"forge": "_texParameter(int arg0, int arg1, int arg2)",
			"fabric": "_texParameter(int target, int pname, int param)"
		},
		{
			"forge": "_getTexLevelParameter(int arg0, int arg1, int arg2)",
			"fabric": "_getTexLevelParameter(int target, int level, int pname)"
		},
		{
			"forge": "_genTextures(int[] arg0)",
			"fabric": "_genTextures(int[] textures)"
		},
		{
			"forge": "_deleteTexture(int arg0)",
			"fabric": "_deleteTexture(int texture)"
		},
		{
			"forge": "_deleteTextures(int[] arg0)",
			"fabric": "_deleteTextures(int[] textures)"
		},
		{
			"forge": "_bindTexture(int arg0)",
			"fabric": "_bindTexture(int texture)"
		},
		{
			"forge": "_texImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, IntBuffer arg8)",
			"fabric": "_texImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, IntBuffer pixels)"
		},
		{
			"forge": "_texSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8)",
			"fabric": "_texSubImage2D(int target, int level, int offsetX, int offsetY, int width, int height, int format, int type, long pixels)"
		},
		{
			"forge": "upload(int arg0, int arg1, int arg2, int arg3, int arg4, NativeImage$Format arg5, IntBuffer arg6, Consumer<IntBuffer> arg7)",
			"fabric": "upload(int level, int offsetX, int offsetY, int width, int height, NativeImage$Format format, IntBuffer pixels, Consumer<IntBuffer> closer)"
		},
		{
			"forge": "_upload(int arg0, int arg1, int arg2, int arg3, int arg4, NativeImage$Format arg5, IntBuffer arg6, Consumer<IntBuffer> arg7)",
			"fabric": "_upload(int level, int offsetX, int offsetY, int width, int height, NativeImage$Format format, IntBuffer pixels, Consumer<IntBuffer> closer)"
		},
		{
			"forge": "_getTexImage(int arg0, int arg1, int arg2, int arg3, long arg4)",
			"fabric": "_getTexImage(int target, int level, int format, int type, long pixels)"
		},
		{
			"forge": "_viewport(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "_viewport(int x, int y, int width, int height)"
		},
		{
			"forge": "_colorMask(boolean arg0, boolean arg1, boolean arg2, boolean arg3)",
			"fabric": "_colorMask(boolean red, boolean green, boolean blue, boolean alpha)"
		},
		{
			"forge": "_stencilFunc(int arg0, int arg1, int arg2)",
			"fabric": "_stencilFunc(int func, int ref, int mask)"
		},
		{
			"forge": "_stencilMask(int arg0)",
			"fabric": "_stencilMask(int mask)"
		},
		{
			"forge": "_stencilOp(int arg0, int arg1, int arg2)",
			"fabric": "_stencilOp(int sfail, int dpfail, int dppass)"
		},
		{
			"forge": "_clearDepth(double arg0)",
			"fabric": "_clearDepth(double depth)"
		},
		{
			"forge": "_clearColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "_clearColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "_clearStencil(int arg0)",
			"fabric": "_clearStencil(int stencil)"
		},
		{
			"forge": "_clear(int arg0, boolean arg1)",
			"fabric": "_clear(int mask, boolean getError)"
		},
		{
			"forge": "_glDrawPixels(int arg0, int arg1, int arg2, int arg3, long arg4)",
			"fabric": "_glDrawPixels(int width, int height, int format, int type, long pixels)"
		},
		{
			"forge": "_vertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, long arg5)",
			"fabric": "_vertexAttribPointer(int index, int size, int type, boolean normalized, int stride, long pointer)"
		},
		{
			"forge": "_vertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, long arg4)",
			"fabric": "_vertexAttribIPointer(int index, int size, int type, int stride, long pointer)"
		},
		{
			"forge": "_enableVertexAttribArray(int arg0)",
			"fabric": "_enableVertexAttribArray(int index)"
		},
		{
			"forge": "_disableVertexAttribArray(int arg0)",
			"fabric": "_disableVertexAttribArray(int index)"
		},
		{
			"forge": "_drawElements(int arg0, int arg1, int arg2, long arg3)",
			"fabric": "_drawElements(int mode, int count, int type, long indices)"
		},
		{
			"forge": "_pixelStore(int arg0, int arg1)",
			"fabric": "_pixelStore(int pname, int param)"
		},
		{
			"forge": "_readPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, ByteBuffer arg6)",
			"fabric": "_readPixels(int x, int y, int width, int height, int format, int type, ByteBuffer pixels)"
		},
		{
			"forge": "_readPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6)",
			"fabric": "_readPixels(int x, int y, int width, int height, int format, int type, long pixels)"
		},
		{
			"forge": "_getString(int arg0)",
			"fabric": "_getString(int name)"
		},
		{
			"forge": "_getInteger(int arg0)",
			"fabric": "_getInteger(int pname)"
		}
	]
}