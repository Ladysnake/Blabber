{
	"title": "net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager",
			"fabric": "net.minecraft.structure.StructureTemplateManager"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "STRUCTURE_DIRECTORY_NAME",
			"fabric": "STRUCTURES_DIRECTORY"
		},
		{
			"forge": "TEST_STRUCTURES_DIR",
			"fabric": "GAME_TEST_STRUCTURES_DIRECTORY"
		},
		{
			"forge": "STRUCTURE_FILE_EXTENSION",
			"fabric": "NBT_FILE_EXTENSION"
		},
		{
			"forge": "STRUCTURE_TEXT_FILE_EXTENSION",
			"fabric": "SNBT_FILE_EXTENSION"
		},
		{
			"forge": "structureRepository",
			"fabric": "templates"
		},
		{
			"forge": "fixerUpper",
			"fabric": "dataFixer"
		},
		{
			"forge": "resourceManager",
			"fabric": "resourceManager"
		},
		{
			"forge": "generatedDir",
			"fabric": "generatedPath"
		},
		{
			"forge": "sources",
			"fabric": "providers"
		},
		{
			"forge": "blockLookup",
			"fabric": "blockLookup"
		},
		{
			"forge": "LISTER",
			"fabric": "NBT_FINDER"
		},
		{
			"forge": "getOrCreate(ResourceLocation arg0)",
			"fabric": "getTemplateOrBlank(Identifier id)"
		},
		{
			"forge": "getOrCreate(ResourceLocation arg0)",
			"fabric": "getTemplateOrBlank(Identifier id)"
		},
		{
			"forge": "get(ResourceLocation arg0)",
			"fabric": "getTemplate(Identifier id)"
		},
		{
			"forge": "listTemplates()",
			"fabric": "streamTemplates()"
		},
		{
			"forge": "tryLoad(ResourceLocation arg0)",
			"fabric": "loadTemplate(Identifier id)"
		},
		{
			"forge": "onResourceManagerReload(ResourceManager arg0)",
			"fabric": "setResourceManager(ResourceManager resourceManager)"
		},
		{
			"forge": "loadFromResource(ResourceLocation arg0)",
			"fabric": "loadTemplateFromResource(Identifier id)"
		},
		{
			"forge": "listResources()",
			"fabric": "streamTemplatesFromResource()"
		},
		{
			"forge": "loadFromTestStructures(ResourceLocation arg0)",
			"fabric": "loadTemplateFromGameTestFile(Identifier id)"
		},
		{
			"forge": "listTestStructures()",
			"fabric": "streamTemplatesFromGameTestFile()"
		},
		{
			"forge": "loadFromGenerated(ResourceLocation arg0)",
			"fabric": "loadTemplateFromFile(Identifier id)"
		},
		{
			"forge": "listGenerated()",
			"fabric": "streamTemplatesFromFile()"
		},
		{
			"forge": "listGeneratedInNamespace(Path arg0)",
			"fabric": "streamTemplates(Path namespaceDirectory)"
		},
		{
			"forge": "listFolderContents(Path arg0, String arg1, String arg2)",
			"fabric": "streamTemplates(Path structuresDirectoryPath, String namespace, String extension)"
		},
		{
			"forge": "relativize(Path arg0, Path arg1)",
			"fabric": "toRelativePath(Path root, Path path)"
		},
		{
			"forge": "loadFromSnbt(ResourceLocation arg0, Path arg1)",
			"fabric": "loadTemplateFromSnbt(Identifier id, Path path)"
		},
		{
			"forge": "load(StructureTemplateManager$InputStreamOpener arg0, Consumer<Throwable> arg1)",
			"fabric": "loadTemplate(StructureTemplateManager$TemplateFileOpener opener, Consumer<Throwable> exceptionConsumer)"
		},
		{
			"forge": "readStructure(InputStream arg0)",
			"fabric": "readTemplate(InputStream templateIInputStream)"
		},
		{
			"forge": "readStructure(CompoundTag arg0)",
			"fabric": "createTemplate(NbtCompound nbt)"
		},
		{
			"forge": "save(ResourceLocation arg0)",
			"fabric": "saveTemplate(Identifier id)"
		},
		{
			"forge": "getPathToGeneratedStructure(ResourceLocation arg0, String arg1)",
			"fabric": "getTemplatePath(Identifier id, String extension)"
		},
		{
			"forge": "createPathToStructure(Path arg0, ResourceLocation arg1, String arg2)",
			"fabric": "getTemplatePath(Path path, Identifier id, String extension)"
		},
		{
			"forge": "createAndValidatePathToStructure(Path arg0, ResourceLocation arg1, String arg2)",
			"fabric": "getAndCheckTemplatePath(Path path, Identifier id, String extension)"
		},
		{
			"forge": "remove(ResourceLocation arg0)",
			"fabric": "unloadTemplate(Identifier id)"
		}
	]
}