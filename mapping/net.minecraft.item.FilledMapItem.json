{
	"title": "net.minecraft.world.item.MapItem",
	"items": [
		{
			"forge": "net.minecraft.world.item.MapItem",
			"fabric": "net.minecraft.item.FilledMapItem"
		},
		{
			"forge": "IMAGE_WIDTH",
			"fabric": "field_30907"
		},
		{
			"forge": "IMAGE_WIDTH",
			"fabric": "field_30907"
		},
		{
			"forge": "IMAGE_HEIGHT",
			"fabric": "field_30908"
		},
		{
			"forge": "DEFAULT_MAP_COLOR",
			"fabric": "DEFAULT_MAP_COLOR"
		},
		{
			"forge": "TAG_MAP",
			"fabric": "MAP_KEY"
		},
		{
			"forge": "MAP_SCALE_TAG",
			"fabric": "MAP_SCALE_DIRECTION_KEY"
		},
		{
			"forge": "MAP_LOCK_TAG",
			"fabric": "MAP_TO_LOCK_KEY"
		},
		{
			"forge": "create(Level arg0, int arg1, int arg2, byte arg3, boolean arg4, boolean arg5)",
			"fabric": "createMap(World world, int x, int z, byte scale, boolean showIcons, boolean unlimitedTracking)"
		},
		{
			"forge": "create(Level arg0, int arg1, int arg2, byte arg3, boolean arg4, boolean arg5)",
			"fabric": "createMap(World world, int x, int z, byte scale, boolean showIcons, boolean unlimitedTracking)"
		},
		{
			"forge": "getSavedData(Integer arg0, Level arg1)",
			"fabric": "getMapState(Integer id, World world)"
		},
		{
			"forge": "getSavedData(ItemStack arg0, Level arg1)",
			"fabric": "getMapState(ItemStack map, World world)"
		},
		{
			"forge": "getMapId(ItemStack arg0)",
			"fabric": "getMapId(ItemStack stack)"
		},
		{
			"forge": "createNewSavedData(Level arg0, int arg1, int arg2, int arg3, boolean arg4, boolean arg5, ResourceKey<Level> arg6)",
			"fabric": "allocateMapId(World world, int x, int z, int scale, boolean showIcons, boolean unlimitedTracking, RegistryKey<World> dimension)"
		},
		{
			"forge": "storeMapData(ItemStack arg0, int arg1)",
			"fabric": "setMapId(ItemStack stack, int id)"
		},
		{
			"forge": "createAndStoreSavedData(ItemStack arg0, Level arg1, int arg2, int arg3, int arg4, boolean arg5, boolean arg6, ResourceKey<Level> arg7)",
			"fabric": "createMapState(ItemStack stack, World world, int x, int z, int scale, boolean showIcons, boolean unlimitedTracking, RegistryKey<World> dimension)"
		},
		{
			"forge": "makeKey(int arg0)",
			"fabric": "getMapName(int mapId)"
		},
		{
			"forge": "update(Level arg0, Entity arg1, MapItemSavedData arg2)",
			"fabric": "updateColors(World world, Entity entity, MapState state)"
		},
		{
			"forge": "getCorrectStateForFluidBlock(Level arg0, BlockState arg1, BlockPos arg2)",
			"fabric": "getFluidStateIfVisible(World world, BlockState state, BlockPos pos)"
		},
		{
			"forge": "isBiomeWatery(boolean[] arg0, int arg1, int arg2)",
			"fabric": "isAquaticBiome(boolean[] biomes, int x, int z)"
		},
		{
			"forge": "renderBiomePreviewMap(ServerLevel arg0, ItemStack arg1)",
			"fabric": "fillExplorationMap(ServerWorld world, ItemStack map)"
		},
		{
			"forge": "inventoryTick(ItemStack arg0, Level arg1, Entity arg2, int arg3, boolean arg4)",
			"fabric": "inventoryTick(ItemStack arg0, World arg1, Entity arg2, int arg3, boolean arg4)"
		},
		{
			"forge": "getUpdatePacket(ItemStack arg0, Level arg1, Player arg2)",
			"fabric": "createSyncPacket(ItemStack arg0, World arg1, PlayerEntity arg2)"
		},
		{
			"forge": "onCraftedBy(ItemStack arg0, Level arg1, Player arg2)",
			"fabric": "onCraft(ItemStack arg0, World arg1, PlayerEntity arg2)"
		},
		{
			"forge": "scaleMap(ItemStack arg0, Level arg1, int arg2)",
			"fabric": "scale(ItemStack map, World world, int amount)"
		},
		{
			"forge": "lockMap(Level arg0, ItemStack arg1)",
			"fabric": "copyMap(World world, ItemStack stack)"
		},
		{
			"forge": "appendHoverText(ItemStack arg0, Level arg1, List<Component> arg2, TooltipFlag arg3)",
			"fabric": "appendTooltip(ItemStack arg0, World arg1, List<Text> arg2, TooltipContext arg3)"
		},
		{
			"forge": "getColor(ItemStack arg0)",
			"fabric": "getMapColor(ItemStack stack)"
		},
		{
			"forge": "useOn(UseOnContext arg0)",
			"fabric": "useOnBlock(ItemUsageContext arg0)"
		}
	]
}