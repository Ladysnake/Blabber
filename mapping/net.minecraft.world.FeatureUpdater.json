{
	"title": "net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler",
			"fabric": "net.minecraft.world.FeatureUpdater"
		},
		{
			"forge": "CURRENT_TO_LEGACY_MAP",
			"fabric": "OLD_TO_NEW"
		},
		{
			"forge": "CURRENT_TO_LEGACY_MAP",
			"fabric": "OLD_TO_NEW"
		},
		{
			"forge": "LEGACY_TO_CURRENT_MAP",
			"fabric": "ANCIENT_TO_OLD"
		},
		{
			"forge": "OLD_STRUCTURE_REGISTRY_KEYS",
			"fabric": "NEW_STRUCTURE_NAMES"
		},
		{
			"forge": "hasLegacyData",
			"fabric": "needsUpdate"
		},
		{
			"forge": "dataMap",
			"fabric": "featureIdToChunkNbt"
		},
		{
			"forge": "indexMap",
			"fabric": "updateStates"
		},
		{
			"forge": "legacyKeys",
			"fabric": "oldNames"
		},
		{
			"forge": "currentKeys",
			"fabric": "newNames"
		},
		{
			"forge": "removeIndex(long arg0)",
			"fabric": "markResolved(long chunkPos)"
		},
		{
			"forge": "removeIndex(long arg0)",
			"fabric": "markResolved(long chunkPos)"
		},
		{
			"forge": "updateFromLegacy(CompoundTag arg0)",
			"fabric": "getUpdatedReferences(NbtCompound nbt)"
		},
		{
			"forge": "hasLegacyStart(int arg0, int arg1, String arg2)",
			"fabric": "needsUpdate(int chunkX, int chunkZ, String id)"
		},
		{
			"forge": "isUnhandledStructureStart(int arg0, int arg1)",
			"fabric": "needsUpdate(int chunkX, int chunkZ)"
		},
		{
			"forge": "updateStructureStart(CompoundTag arg0, ChunkPos arg1)",
			"fabric": "getUpdatedStarts(NbtCompound nbt, ChunkPos pos)"
		},
		{
			"forge": "populateCaches(DimensionDataStorage arg0)",
			"fabric": "init(PersistentStateManager persistentStateManager)"
		},
		{
			"forge": "getLegacyStructureHandler(ResourceKey<Level> arg0, DimensionDataStorage arg1)",
			"fabric": "create(RegistryKey<World> world, PersistentStateManager persistentStateManager)"
		}
	]
}