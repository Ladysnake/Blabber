{
	"title": "net.minecraft.world.level.chunk.ImposterProtoChunk",
	"items": [
		{
			"forge": "net.minecraft.world.level.chunk.ImposterProtoChunk",
			"fabric": "net.minecraft.world.chunk.WrapperProtoChunk"
		},
		{
			"forge": "wrapped",
			"fabric": "wrapped"
		},
		{
			"forge": "wrapped",
			"fabric": "wrapped"
		},
		{
			"forge": "allowWrites",
			"fabric": "propagateToWrapped"
		},
		{
			"forge": "getBlockEntity(BlockPos arg0)",
			"fabric": "getBlockEntity(BlockPos arg0)"
		},
		{
			"forge": "getBlockEntity(BlockPos arg0)",
			"fabric": "getBlockEntity(BlockPos arg0)"
		},
		{
			"forge": "getBlockState(BlockPos arg0)",
			"fabric": "getBlockState(BlockPos arg0)"
		},
		{
			"forge": "getFluidState(BlockPos arg0)",
			"fabric": "getFluidState(BlockPos arg0)"
		},
		{
			"forge": "getMaxLightLevel()",
			"fabric": "getMaxLightLevel()"
		},
		{
			"forge": "getSection(int arg0)",
			"fabric": "getSection(int arg0)"
		},
		{
			"forge": "setBlockState(BlockPos arg0, BlockState arg1, boolean arg2)",
			"fabric": "setBlockState(BlockPos arg0, BlockState arg1, boolean arg2)"
		},
		{
			"forge": "setBlockEntity(BlockEntity arg0)",
			"fabric": "setBlockEntity(BlockEntity arg0)"
		},
		{
			"forge": "addEntity(Entity arg0)",
			"fabric": "addEntity(Entity arg0)"
		},
		{
			"forge": "setStatus(ChunkStatus arg0)",
			"fabric": "setStatus(ChunkStatus arg0)"
		},
		{
			"forge": "getSections()",
			"fabric": "getSectionArray()"
		},
		{
			"forge": "setHeightmap(Heightmap$Types arg0, long[] arg1)",
			"fabric": "setHeightmap(Heightmap$Type arg0, long[] arg1)"
		},
		{
			"forge": "fixType(Heightmap$Types arg0)",
			"fabric": "transformHeightmapType(Heightmap$Type type)"
		},
		{
			"forge": "getOrCreateHeightmapUnprimed(Heightmap$Types arg0)",
			"fabric": "getHeightmap(Heightmap$Type arg0)"
		},
		{
			"forge": "getHeight(Heightmap$Types arg0, int arg1, int arg2)",
			"fabric": "sampleHeightmap(Heightmap$Type arg0, int arg1, int arg2)"
		},
		{
			"forge": "getNoiseBiome(int arg0, int arg1, int arg2)",
			"fabric": "getBiomeForNoiseGen(int arg0, int arg1, int arg2)"
		},
		{
			"forge": "getPos()",
			"fabric": "getPos()"
		},
		{
			"forge": "getStartForStructure(Structure arg0)",
			"fabric": "getStructureStart(Structure arg0)"
		},
		{
			"forge": "setStartForStructure(Structure arg0, StructureStart arg1)",
			"fabric": "setStructureStart(Structure arg0, StructureStart arg1)"
		},
		{
			"forge": "getAllStarts()",
			"fabric": "getStructureStarts()"
		},
		{
			"forge": "setAllStarts(Map<Structure, StructureStart> arg0)",
			"fabric": "setStructureStarts(Map<Structure, StructureStart> arg0)"
		},
		{
			"forge": "getReferencesForStructure(Structure arg0)",
			"fabric": "getStructureReferences(Structure arg0)"
		},
		{
			"forge": "addReferenceForStructure(Structure arg0, long arg1)",
			"fabric": "addStructureReference(Structure arg0, long arg1)"
		},
		{
			"forge": "getAllReferences()",
			"fabric": "getStructureReferences()"
		},
		{
			"forge": "setAllReferences(Map<Structure, it.unimi.dsi.fastutil.longs.LongSet> arg0)",
			"fabric": "setStructureReferences(Map<Structure, it.unimi.dsi.fastutil.longs.LongSet> arg0)"
		},
		{
			"forge": "setUnsaved(boolean arg0)",
			"fabric": "setNeedsSaving(boolean arg0)"
		},
		{
			"forge": "isUnsaved()",
			"fabric": "needsSaving()"
		},
		{
			"forge": "getStatus()",
			"fabric": "getStatus()"
		},
		{
			"forge": "removeBlockEntity(BlockPos arg0)",
			"fabric": "removeBlockEntity(BlockPos arg0)"
		},
		{
			"forge": "markPosForPostprocessing(BlockPos arg0)",
			"fabric": "markBlockForPostProcessing(BlockPos arg0)"
		},
		{
			"forge": "setBlockEntityNbt(CompoundTag arg0)",
			"fabric": "addPendingBlockEntityNbt(NbtCompound arg0)"
		},
		{
			"forge": "getBlockEntityNbt(BlockPos arg0)",
			"fabric": "getBlockEntityNbt(BlockPos arg0)"
		},
		{
			"forge": "getBlockEntityNbtForSaving(BlockPos arg0)",
			"fabric": "getPackedBlockEntityNbt(BlockPos arg0)"
		},
		{
			"forge": "findBlocks(Predicate<BlockState> arg0, BiConsumer<BlockPos, BlockState> arg1)",
			"fabric": "forEachBlockMatchingPredicate(Predicate<BlockState> arg0, BiConsumer<BlockPos, BlockState> arg1)"
		},
		{
			"forge": "getBlockTicks()",
			"fabric": "getBlockTickScheduler()"
		},
		{
			"forge": "getFluidTicks()",
			"fabric": "getFluidTickScheduler()"
		},
		{
			"forge": "getTicksForSerialization()",
			"fabric": "getTickSchedulers()"
		},
		{
			"forge": "getBlendingData()",
			"fabric": "getBlendingData()"
		},
		{
			"forge": "setBlendingData(BlendingData arg0)",
			"fabric": "setBlendingData(BlendingData arg0)"
		},
		{
			"forge": "getCarvingMask(GenerationStep$Carving arg0)",
			"fabric": "getCarvingMask(GenerationStep$Carver arg0)"
		},
		{
			"forge": "getOrCreateCarvingMask(GenerationStep$Carving arg0)",
			"fabric": "getOrCreateCarvingMask(GenerationStep$Carver arg0)"
		},
		{
			"forge": "getWrapped()",
			"fabric": "getWrappedChunk()"
		},
		{
			"forge": "isLightCorrect()",
			"fabric": "isLightOn()"
		},
		{
			"forge": "setLightCorrect(boolean arg0)",
			"fabric": "setLightOn(boolean arg0)"
		},
		{
			"forge": "fillBiomesFromNoise(BiomeResolver arg0, Climate$Sampler arg1)",
			"fabric": "populateBiomes(BiomeSupplier arg0, MultiNoiseUtil$MultiNoiseSampler arg1)"
		},
		{
			"forge": "initializeLightSources()",
			"fabric": "refreshSurfaceY()"
		},
		{
			"forge": "getSkyLightSources()",
			"fabric": "getChunkSkyLight()"
		}
	]
}