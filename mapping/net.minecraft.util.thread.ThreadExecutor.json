{
	"title": "net.minecraft.util.thread.BlockableEventLoop",
	"items": [
		{
			"forge": "net.minecraft.util.thread.BlockableEventLoop",
			"fabric": "net.minecraft.util.thread.ThreadExecutor"
		},
		{
			"forge": "name",
			"fabric": "name"
		},
		{
			"forge": "name",
			"fabric": "name"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "pendingRunnables",
			"fabric": "tasks"
		},
		{
			"forge": "blockingCount",
			"fabric": "executionsInProgress"
		},
		{
			"forge": "wrapRunnable(Runnable arg0)",
			"fabric": "createTask(Runnable runnable)"
		},
		{
			"forge": "wrapRunnable(Runnable arg0)",
			"fabric": "createTask(Runnable runnable)"
		},
		{
			"forge": "shouldRun(R arg0)",
			"fabric": "canExecute(R task)"
		},
		{
			"forge": "isSameThread()",
			"fabric": "isOnThread()"
		},
		{
			"forge": "getRunningThread()",
			"fabric": "getThread()"
		},
		{
			"forge": "scheduleExecutables()",
			"fabric": "shouldExecuteAsync()"
		},
		{
			"forge": "getPendingTasksCount()",
			"fabric": "getTaskCount()"
		},
		{
			"forge": "name()",
			"fabric": "getName()"
		},
		{
			"forge": "submit(Supplier<V> arg0)",
			"fabric": "submit(Supplier<V> task)"
		},
		{
			"forge": "submitAsync(Runnable arg0)",
			"fabric": "submitAsync(Runnable runnable)"
		},
		{
			"forge": "submit(Runnable arg0)",
			"fabric": "submit(Runnable task)"
		},
		{
			"forge": "executeBlocking(Runnable arg0)",
			"fabric": "submitAndJoin(Runnable runnable)"
		},
		{
			"forge": "tell(R arg0)",
			"fabric": "send(R arg0)"
		},
		{
			"forge": "execute(Runnable arg0)",
			"fabric": "execute(Runnable runnable)"
		},
		{
			"forge": "executeIfPossible(Runnable arg0)",
			"fabric": "executeSync(Runnable runnable)"
		},
		{
			"forge": "dropAllTasks()",
			"fabric": "cancelTasks()"
		},
		{
			"forge": "runAllTasks()",
			"fabric": "runTasks()"
		},
		{
			"forge": "pollTask()",
			"fabric": "runTask()"
		},
		{
			"forge": "managedBlock(BooleanSupplier arg0)",
			"fabric": "runTasks(BooleanSupplier stopCondition)"
		},
		{
			"forge": "waitForTasks()",
			"fabric": "waitForTasks()"
		},
		{
			"forge": "doRunTask(R arg0)",
			"fabric": "executeTask(R task)"
		},
		{
			"forge": "profiledMetrics()",
			"fabric": "createSamplers()"
		}
	]
}