{
	"title": "net.minecraft.client.renderer.LevelRenderer",
	"items": [
		{
			"forge": "net.minecraft.client.renderer.LevelRenderer",
			"fabric": "net.minecraft.client.render.WorldRenderer"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "CHUNK_SIZE",
			"fabric": "field_32759"
		},
		{
			"forge": "HALF_CHUNK_SIZE",
			"fabric": "field_34812"
		},
		{
			"forge": "SKY_DISC_RADIUS",
			"fabric": "field_32762"
		},
		{
			"forge": "MINIMUM_ADVANCED_CULLING_DISTANCE",
			"fabric": "field_34813"
		},
		{
			"forge": "CEILED_SECTION_DIAGONAL",
			"fabric": "field_34814"
		},
		{
			"forge": "MIN_FOG_DISTANCE",
			"fabric": "field_32763"
		},
		{
			"forge": "RAIN_RADIUS",
			"fabric": "field_32764"
		},
		{
			"forge": "RAIN_DIAMETER",
			"fabric": "field_32765"
		},
		{
			"forge": "TRANSPARENT_SORT_COUNT",
			"fabric": "field_32766"
		},
		{
			"forge": "HALF_A_SECOND_IN_MILLIS",
			"fabric": "field_34815"
		},
		{
			"forge": "MOON_LOCATION",
			"fabric": "MOON_PHASES"
		},
		{
			"forge": "SUN_LOCATION",
			"fabric": "SUN"
		},
		{
			"forge": "CLOUDS_LOCATION",
			"fabric": "CLOUDS"
		},
		{
			"forge": "END_SKY_LOCATION",
			"fabric": "END_SKY"
		},
		{
			"forge": "FORCEFIELD_LOCATION",
			"fabric": "FORCEFIELD"
		},
		{
			"forge": "RAIN_LOCATION",
			"fabric": "RAIN"
		},
		{
			"forge": "SNOW_LOCATION",
			"fabric": "SNOW"
		},
		{
			"forge": "DIRECTIONS",
			"fabric": "DIRECTIONS"
		},
		{
			"forge": "minecraft",
			"fabric": "client"
		},
		{
			"forge": "entityRenderDispatcher",
			"fabric": "entityRenderDispatcher"
		},
		{
			"forge": "blockEntityRenderDispatcher",
			"fabric": "blockEntityRenderDispatcher"
		},
		{
			"forge": "renderBuffers",
			"fabric": "bufferBuilders"
		},
		{
			"forge": "level",
			"fabric": "world"
		},
		{
			"forge": "recentlyCompiledChunks",
			"fabric": "builtChunks"
		},
		{
			"forge": "renderChunkStorage",
			"fabric": "renderableChunks"
		},
		{
			"forge": "renderChunksInFrustum",
			"fabric": "chunkInfos"
		},
		{
			"forge": "globalBlockEntities",
			"fabric": "noCullingBlockEntities"
		},
		{
			"forge": "lastFullRenderChunkUpdate",
			"fabric": "fullUpdateFuture"
		},
		{
			"forge": "viewArea",
			"fabric": "chunks"
		},
		{
			"forge": "starBuffer",
			"fabric": "starsBuffer"
		},
		{
			"forge": "skyBuffer",
			"fabric": "lightSkyBuffer"
		},
		{
			"forge": "darkBuffer",
			"fabric": "darkSkyBuffer"
		},
		{
			"forge": "generateClouds",
			"fabric": "cloudsDirty"
		},
		{
			"forge": "cloudBuffer",
			"fabric": "cloudsBuffer"
		},
		{
			"forge": "frameTimes",
			"fabric": "chunkUpdateSmoother"
		},
		{
			"forge": "ticks",
			"fabric": "ticks"
		},
		{
			"forge": "destroyingBlocks",
			"fabric": "blockBreakingInfos"
		},
		{
			"forge": "destructionProgress",
			"fabric": "blockBreakingProgressions"
		},
		{
			"forge": "playingRecords",
			"fabric": "playingSongs"
		},
		{
			"forge": "entityTarget",
			"fabric": "entityOutlinesFramebuffer"
		},
		{
			"forge": "entityEffect",
			"fabric": "entityOutlinePostProcessor"
		},
		{
			"forge": "translucentTarget",
			"fabric": "translucentFramebuffer"
		},
		{
			"forge": "itemEntityTarget",
			"fabric": "entityFramebuffer"
		},
		{
			"forge": "particlesTarget",
			"fabric": "particlesFramebuffer"
		},
		{
			"forge": "weatherTarget",
			"fabric": "weatherFramebuffer"
		},
		{
			"forge": "cloudsTarget",
			"fabric": "cloudsFramebuffer"
		},
		{
			"forge": "transparencyChain",
			"fabric": "transparencyPostProcessor"
		},
		{
			"forge": "lastCameraX",
			"fabric": "lastCameraChunkUpdateX"
		},
		{
			"forge": "lastCameraY",
			"fabric": "lastCameraChunkUpdateY"
		},
		{
			"forge": "lastCameraZ",
			"fabric": "lastCameraChunkUpdateZ"
		},
		{
			"forge": "lastCameraChunkX",
			"fabric": "cameraChunkX"
		},
		{
			"forge": "lastCameraChunkY",
			"fabric": "cameraChunkY"
		},
		{
			"forge": "lastCameraChunkZ",
			"fabric": "cameraChunkZ"
		},
		{
			"forge": "prevCamX",
			"fabric": "lastCameraX"
		},
		{
			"forge": "prevCamY",
			"fabric": "lastCameraY"
		},
		{
			"forge": "prevCamZ",
			"fabric": "lastCameraZ"
		},
		{
			"forge": "prevCamRotX",
			"fabric": "lastCameraPitch"
		},
		{
			"forge": "prevCamRotY",
			"fabric": "lastCameraYaw"
		},
		{
			"forge": "prevCloudX",
			"fabric": "lastCloudsBlockX"
		},
		{
			"forge": "prevCloudY",
			"fabric": "lastCloudsBlockY"
		},
		{
			"forge": "prevCloudZ",
			"fabric": "lastCloudsBlockZ"
		},
		{
			"forge": "prevCloudColor",
			"fabric": "lastCloudsColor"
		},
		{
			"forge": "prevCloudsType",
			"fabric": "lastCloudRenderMode"
		},
		{
			"forge": "chunkRenderDispatcher",
			"fabric": "chunkBuilder"
		},
		{
			"forge": "lastViewDistance",
			"fabric": "viewDistance"
		},
		{
			"forge": "renderedEntities",
			"fabric": "regularEntityCount"
		},
		{
			"forge": "culledEntities",
			"fabric": "blockEntityCount"
		},
		{
			"forge": "cullingFrustum",
			"fabric": "frustum"
		},
		{
			"forge": "captureFrustum",
			"fabric": "shouldCaptureFrustum"
		},
		{
			"forge": "capturedFrustum",
			"fabric": "capturedFrustum"
		},
		{
			"forge": "frustumPoints",
			"fabric": "capturedFrustumOrientation"
		},
		{
			"forge": "frustumPos",
			"fabric": "capturedFrustumPosition"
		},
		{
			"forge": "xTransparentOld",
			"fabric": "lastTranslucentSortX"
		},
		{
			"forge": "yTransparentOld",
			"fabric": "lastTranslucentSortY"
		},
		{
			"forge": "zTransparentOld",
			"fabric": "lastTranslucentSortZ"
		},
		{
			"forge": "needsFullRenderChunkUpdate",
			"fabric": "shouldUpdate"
		},
		{
			"forge": "nextFullUpdateMillis",
			"fabric": "nextUpdateTime"
		},
		{
			"forge": "needsFrustumUpdate",
			"fabric": "updateFinished"
		},
		{
			"forge": "rainSoundTime",
			"fabric": "rainSoundCounter"
		},
		{
			"forge": "rainSizeX",
			"fabric": "NORMAL_LINE_DX"
		},
		{
			"forge": "rainSizeZ",
			"fabric": "NORMAL_LINE_DZ"
		},
		{
			"forge": "renderSnowAndRain(LightTexture arg0, float arg1, double arg2, double arg3, double arg4)",
			"fabric": "renderWeather(LightmapTextureManager manager, float tickDelta, double cameraX, double cameraY, double cameraZ)"
		},
		{
			"forge": "renderSnowAndRain(LightTexture arg0, float arg1, double arg2, double arg3, double arg4)",
			"fabric": "renderWeather(LightmapTextureManager manager, float tickDelta, double cameraX, double cameraY, double cameraZ)"
		},
		{
			"forge": "tickRain(Camera arg0)",
			"fabric": "tickRainSplashing(Camera camera)"
		},
		{
			"forge": "onResourceManagerReload(ResourceManager arg0)",
			"fabric": "reload(ResourceManager arg0)"
		},
		{
			"forge": "initOutline()",
			"fabric": "loadEntityOutlinePostProcessor()"
		},
		{
			"forge": "initTransparency()",
			"fabric": "loadTransparencyPostProcessor()"
		},
		{
			"forge": "deinitTransparency()",
			"fabric": "resetTransparencyPostProcessor()"
		},
		{
			"forge": "doEntityOutline()",
			"fabric": "drawEntityOutlinesFramebuffer()"
		},
		{
			"forge": "shouldShowEntityOutlines()",
			"fabric": "canDrawEntityOutlines()"
		},
		{
			"forge": "createDarkSky()",
			"fabric": "renderDarkSky()"
		},
		{
			"forge": "createLightSky()",
			"fabric": "renderLightSky()"
		},
		{
			"forge": "buildSkyDisc(BufferBuilder arg0, float arg1)",
			"fabric": "renderSky(BufferBuilder builder, float arg1)"
		},
		{
			"forge": "createStars()",
			"fabric": "renderStars()"
		},
		{
			"forge": "drawStars(BufferBuilder arg0)",
			"fabric": "renderStars(BufferBuilder buffer)"
		},
		{
			"forge": "setLevel(ClientLevel arg0)",
			"fabric": "setWorld(ClientWorld world)"
		},
		{
			"forge": "graphicsChanged()",
			"fabric": "reloadTransparencyPostProcessor()"
		},
		{
			"forge": "allChanged()",
			"fabric": "reload()"
		},
		{
			"forge": "resize(int arg0, int arg1)",
			"fabric": "onResized(int width, int height)"
		},
		{
			"forge": "getChunkStatistics()",
			"fabric": "getChunksDebugString()"
		},
		{
			"forge": "getChunkRenderDispatcher()",
			"fabric": "getChunkBuilder()"
		},
		{
			"forge": "getTotalChunks()",
			"fabric": "getChunkCount()"
		},
		{
			"forge": "getLastViewDistance()",
			"fabric": "getViewDistance()"
		},
		{
			"forge": "countRenderedChunks()",
			"fabric": "getCompletedChunkCount()"
		},
		{
			"forge": "getEntityStatistics()",
			"fabric": "getEntitiesDebugString()"
		},
		{
			"forge": "setupRender(Camera arg0, Frustum arg1, boolean arg2, boolean arg3)",
			"fabric": "setupTerrain(Camera camera, Frustum frustum, boolean hasForcedFrustum, boolean spectator)"
		},
		{
			"forge": "applyFrustum(Frustum arg0)",
			"fabric": "applyFrustum(Frustum frustum)"
		},
		{
			"forge": "initializeQueueForFullUpdate(Camera arg0, Queue<LevelRenderer$RenderChunkInfo> arg1)",
			"fabric": "enqueueChunksInViewDistance(Camera camera, Queue<WorldRenderer$ChunkInfo> queue)"
		},
		{
			"forge": "addRecentlyCompiledChunk(ChunkRenderDispatcher$RenderChunk arg0)",
			"fabric": "addBuiltChunk(ChunkBuilder$BuiltChunk chunk)"
		},
		{
			"forge": "updateRenderChunks(LinkedHashSet<LevelRenderer$RenderChunkInfo> arg0, LevelRenderer$RenderInfoMap arg1, Vec3 arg2, Queue<LevelRenderer$RenderChunkInfo> arg3, boolean arg4)",
			"fabric": "collectRenderableChunks(LinkedHashSet<WorldRenderer$ChunkInfo> chunks, WorldRenderer$ChunkInfoList chunkInfoList, Vec3d cameraPos, Queue<WorldRenderer$ChunkInfo> queue, boolean chunkCullingEnabled)"
		},
		{
			"forge": "getRelativeFrom(BlockPos arg0, ChunkRenderDispatcher$RenderChunk arg1, Direction arg2)",
			"fabric": "getAdjacentChunk(BlockPos pos, ChunkBuilder$BuiltChunk chunk, Direction direction)"
		},
		{
			"forge": "closeToBorder(BlockPos arg0, ChunkRenderDispatcher$RenderChunk arg1)",
			"fabric": "isOutsideViewDistance(BlockPos pos, ChunkBuilder$BuiltChunk chunk)"
		},
		{
			"forge": "captureFrustum(org.joml.Matrix4f arg0, org.joml.Matrix4f arg1, double arg2, double arg3, double arg4, Frustum arg5)",
			"fabric": "captureFrustum(org.joml.Matrix4f positionMatrix, org.joml.Matrix4f projectionMatrix, double x, double y, double z, Frustum frustum)"
		},
		{
			"forge": "prepareCullFrustum(PoseStack arg0, Vec3 arg1, org.joml.Matrix4f arg2)",
			"fabric": "setupFrustum(MatrixStack matrices, Vec3d pos, org.joml.Matrix4f projectionMatrix)"
		},
		{
			"forge": "renderLevel(PoseStack arg0, float arg1, long arg2, boolean arg3, Camera arg4, GameRenderer arg5, LightTexture arg6, org.joml.Matrix4f arg7)",
			"fabric": "render(MatrixStack matrices, float tickDelta, long limitTime, boolean renderBlockOutline, Camera camera, GameRenderer gameRenderer, LightmapTextureManager lightmapTextureManager, org.joml.Matrix4f projectionMatrix)"
		},
		{
			"forge": "checkPoseStack(PoseStack arg0)",
			"fabric": "checkEmpty(MatrixStack matrices)"
		},
		{
			"forge": "renderEntity(Entity arg0, double arg1, double arg2, double arg3, float arg4, PoseStack arg5, MultiBufferSource arg6)",
			"fabric": "renderEntity(Entity entity, double cameraX, double cameraY, double cameraZ, float tickDelta, MatrixStack matrices, VertexConsumerProvider vertexConsumers)"
		},
		{
			"forge": "renderChunkLayer(RenderType arg0, PoseStack arg1, double arg2, double arg3, double arg4, org.joml.Matrix4f arg5)",
			"fabric": "renderLayer(RenderLayer renderLayer, MatrixStack matrices, double cameraX, double cameraY, double cameraZ, org.joml.Matrix4f positionMatrix)"
		},
		{
			"forge": "renderDebug(PoseStack arg0, MultiBufferSource arg1, Camera arg2)",
			"fabric": "renderChunkDebugInfo(MatrixStack matrices, VertexConsumerProvider vertexConsumers, Camera camera)"
		},
		{
			"forge": "addFrustumVertex(VertexConsumer arg0, org.joml.Matrix4f arg1, int arg2)",
			"fabric": "renderCapturedFrustumVertex(VertexConsumer vertexConsumer, org.joml.Matrix4f arg1, int planeNum)"
		},
		{
			"forge": "addFrustumQuad(VertexConsumer arg0, org.joml.Matrix4f arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)",
			"fabric": "renderCapturedFrustumFace(VertexConsumer vertexConsumer, org.joml.Matrix4f arg1, int plane0, int plane1, int plane2, int plane3, int r, int g, int b)"
		},
		{
			"forge": "captureFrustum()",
			"fabric": "captureFrustum()"
		},
		{
			"forge": "killFrustum()",
			"fabric": "killFrustum()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "removeProgress(BlockDestructionProgress arg0)",
			"fabric": "removeBlockBreakingInfo(BlockBreakingInfo info)"
		},
		{
			"forge": "renderEndSky(PoseStack arg0)",
			"fabric": "renderEndSky(MatrixStack matrices)"
		},
		{
			"forge": "renderSky(PoseStack arg0, org.joml.Matrix4f arg1, float arg2, Camera arg3, boolean arg4, Runnable arg5)",
			"fabric": "renderSky(MatrixStack matrices, org.joml.Matrix4f projectionMatrix, float tickDelta, Camera camera, boolean thickFog, Runnable fogCallback)"
		},
		{
			"forge": "doesMobEffectBlockSky(Camera arg0)",
			"fabric": "hasBlindnessOrDarkness(Camera camera)"
		},
		{
			"forge": "renderClouds(PoseStack arg0, org.joml.Matrix4f arg1, float arg2, double arg3, double arg4, double arg5)",
			"fabric": "renderClouds(MatrixStack matrices, org.joml.Matrix4f projectionMatrix, float tickDelta, double cameraX, double cameraY, double cameraZ)"
		},
		{
			"forge": "buildClouds(BufferBuilder arg0, double arg1, double arg2, double arg3, Vec3 arg4)",
			"fabric": "renderClouds(BufferBuilder builder, double x, double y, double z, Vec3d color)"
		},
		{
			"forge": "compileChunks(Camera arg0)",
			"fabric": "updateChunks(Camera camera)"
		},
		{
			"forge": "renderWorldBorder(Camera arg0)",
			"fabric": "renderWorldBorder(Camera camera)"
		},
		{
			"forge": "renderHitOutline(PoseStack arg0, VertexConsumer arg1, Entity arg2, double arg3, double arg4, double arg5, BlockPos arg6, BlockState arg7)",
			"fabric": "drawBlockOutline(MatrixStack matrices, VertexConsumer vertexConsumer, Entity entity, double cameraX, double cameraY, double cameraZ, BlockPos pos, BlockState state)"
		},
		{
			"forge": "mixColor(float arg0)",
			"fabric": "getMaxIntensityColor(float hue)"
		},
		{
			"forge": "shiftHue(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "shiftHue(float red, float green, float blue, float hueOffset)"
		},
		{
			"forge": "renderVoxelShape(PoseStack arg0, VertexConsumer arg1, VoxelShape arg2, double arg3, double arg4, double arg5, float arg6, float arg7, float arg8, float arg9, boolean arg10)",
			"fabric": "drawShapeOutline(MatrixStack matrices, VertexConsumer vertexConsumer, VoxelShape shape, double offsetX, double offsetY, double offsetZ, float red, float green, float blue, float alpha, boolean colorize)"
		},
		{
			"forge": "renderShape(PoseStack arg0, VertexConsumer arg1, VoxelShape arg2, double arg3, double arg4, double arg5, float arg6, float arg7, float arg8, float arg9)",
			"fabric": "drawCuboidShapeOutline(MatrixStack matrices, VertexConsumer vertexConsumer, VoxelShape shape, double offsetX, double offsetY, double offsetZ, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "renderLineBox(VertexConsumer arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, float arg7, float arg8, float arg9, float arg10)",
			"fabric": "drawBox(VertexConsumer vertexConsumer, double x1, double y1, double z1, double x2, double y2, double z2, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "renderLineBox(PoseStack arg0, VertexConsumer arg1, AABB arg2, float arg3, float arg4, float arg5, float arg6)",
			"fabric": "drawBox(MatrixStack matrices, VertexConsumer vertexConsumer, Box box, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "renderLineBox(PoseStack arg0, VertexConsumer arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, float arg8, float arg9, float arg10, float arg11)",
			"fabric": "drawBox(MatrixStack matrices, VertexConsumer vertexConsumer, double x1, double y1, double z1, double x2, double y2, double z2, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "renderLineBox(PoseStack arg0, VertexConsumer arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, float arg8, float arg9, float arg10, float arg11, float arg12, float arg13, float arg14)",
			"fabric": "drawBox(MatrixStack matrices, VertexConsumer vertexConsumer, double x1, double y1, double z1, double x2, double y2, double z2, float red, float green, float blue, float alpha, float xAxisRed, float yAxisGreen, float zAxisBlue)"
		},
		{
			"forge": "addChainedFilledBoxVertices(PoseStack arg0, VertexConsumer arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, float arg8, float arg9, float arg10, float arg11)",
			"fabric": "renderFilledBox(MatrixStack matrices, VertexConsumer vertexConsumer, double minX, double minY, double minZ, double maxX, double maxY, double maxZ, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "addChainedFilledBoxVertices(PoseStack arg0, VertexConsumer arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, float arg10, float arg11)",
			"fabric": "renderFilledBox(MatrixStack matrices, VertexConsumer vertexConsumer, float minX, float minY, float minZ, float maxX, float maxY, float maxZ, float red, float green, float blue, float alpha)"
		},
		{
			"forge": "blockChanged(BlockGetter arg0, BlockPos arg1, BlockState arg2, BlockState arg3, int arg4)",
			"fabric": "updateBlock(BlockView world, BlockPos pos, BlockState oldState, BlockState newState, int flags)"
		},
		{
			"forge": "setBlockDirty(BlockPos arg0, boolean arg1)",
			"fabric": "scheduleSectionRender(BlockPos pos, boolean important)"
		},
		{
			"forge": "setBlocksDirty(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)",
			"fabric": "scheduleBlockRenders(int minX, int minY, int minZ, int maxX, int maxY, int maxZ)"
		},
		{
			"forge": "setBlockDirty(BlockPos arg0, BlockState arg1, BlockState arg2)",
			"fabric": "scheduleBlockRerenderIfNeeded(BlockPos pos, BlockState old, BlockState updated)"
		},
		{
			"forge": "setSectionDirtyWithNeighbors(int arg0, int arg1, int arg2)",
			"fabric": "scheduleBlockRenders(int x, int y, int z)"
		},
		{
			"forge": "setSectionDirty(int arg0, int arg1, int arg2)",
			"fabric": "scheduleBlockRender(int x, int y, int z)"
		},
		{
			"forge": "setSectionDirty(int arg0, int arg1, int arg2, boolean arg3)",
			"fabric": "scheduleChunkRender(int x, int y, int z, boolean important)"
		},
		{
			"forge": "playStreamingMusic(SoundEvent arg0, BlockPos arg1)",
			"fabric": "playSong(SoundEvent song, BlockPos songPosition)"
		},
		{
			"forge": "notifyNearbyEntities(Level arg0, BlockPos arg1, boolean arg2)",
			"fabric": "updateEntitiesForSong(World world, BlockPos pos, boolean playing)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, boolean arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)",
			"fabric": "addParticle(ParticleEffect parameters, boolean shouldAlwaysSpawn, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, boolean arg1, boolean arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)",
			"fabric": "addParticle(ParticleEffect parameters, boolean shouldAlwaysSpawn, boolean important, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addParticle(T arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)",
			"fabric": "addParticle(T parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addParticleInternal(ParticleOptions arg0, boolean arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)",
			"fabric": "spawnParticle(ParticleEffect parameters, boolean alwaysSpawn, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addParticleInternal(ParticleOptions arg0, boolean arg1, boolean arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)",
			"fabric": "spawnParticle(ParticleEffect parameters, boolean alwaysSpawn, boolean canSpawnOnMinimal, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "calculateParticleLevel(boolean arg0)",
			"fabric": "getRandomParticleSpawnChance(boolean canSpawnOnMinimal)"
		},
		{
			"forge": "clear()",
			"fabric": "cleanUp()"
		},
		{
			"forge": "globalLevelEvent(int arg0, BlockPos arg1, int arg2)",
			"fabric": "processGlobalEvent(int eventId, BlockPos pos, int data)"
		},
		{
			"forge": "levelEvent(int arg0, BlockPos arg1, int arg2)",
			"fabric": "processWorldEvent(int eventId, BlockPos pos, int data)"
		},
		{
			"forge": "destroyBlockProgress(int arg0, BlockPos arg1, int arg2)",
			"fabric": "setBlockBreakingInfo(int entityId, BlockPos pos, int stage)"
		},
		{
			"forge": "hasRenderedAllChunks()",
			"fabric": "isTerrainRenderComplete()"
		},
		{
			"forge": "needsUpdate()",
			"fabric": "scheduleTerrainUpdate()"
		},
		{
			"forge": "updateGlobalBlockEntities(Collection<BlockEntity> arg0, Collection<BlockEntity> arg1)",
			"fabric": "updateNoCullingBlockEntities(Collection<BlockEntity> removed, Collection<BlockEntity> added)"
		},
		{
			"forge": "getLightColor(BlockAndTintGetter arg0, BlockPos arg1)",
			"fabric": "getLightmapCoordinates(BlockRenderView world, BlockPos pos)"
		},
		{
			"forge": "getLightColor(BlockAndTintGetter arg0, BlockState arg1, BlockPos arg2)",
			"fabric": "getLightmapCoordinates(BlockRenderView world, BlockState state, BlockPos pos)"
		},
		{
			"forge": "isChunkCompiled(BlockPos arg0)",
			"fabric": "isRenderingReady(BlockPos pos)"
		},
		{
			"forge": "entityTarget()",
			"fabric": "getEntityOutlinesFramebuffer()"
		},
		{
			"forge": "getTranslucentTarget()",
			"fabric": "getTranslucentFramebuffer()"
		},
		{
			"forge": "getItemEntityTarget()",
			"fabric": "getEntityFramebuffer()"
		},
		{
			"forge": "getParticlesTarget()",
			"fabric": "getParticlesFramebuffer()"
		},
		{
			"forge": "getWeatherTarget()",
			"fabric": "getWeatherFramebuffer()"
		},
		{
			"forge": "getCloudsTarget()",
			"fabric": "getCloudsFramebuffer()"
		}
	]
}