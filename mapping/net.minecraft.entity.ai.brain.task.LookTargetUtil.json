{
	"title": "net.minecraft.world.entity.ai.behavior.BehaviorUtils",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.behavior.BehaviorUtils",
			"fabric": "net.minecraft.entity.ai.brain.task.LookTargetUtil"
		},
		{
			"forge": "lockGazeAndWalkToEachOther(LivingEntity arg0, LivingEntity arg1, float arg2)",
			"fabric": "lookAtAndWalkTowardsEachOther(LivingEntity first, LivingEntity second, float speed)"
		},
		{
			"forge": "lockGazeAndWalkToEachOther(LivingEntity arg0, LivingEntity arg1, float arg2)",
			"fabric": "lookAtAndWalkTowardsEachOther(LivingEntity first, LivingEntity second, float speed)"
		},
		{
			"forge": "entityIsVisible(Brain<?> arg0, LivingEntity arg1)",
			"fabric": "canSee(Brain<?> brain, LivingEntity target)"
		},
		{
			"forge": "targetIsValid(Brain<?> arg0, MemoryModuleType<? extends LivingEntity> arg1, EntityType<?> arg2)",
			"fabric": "canSee(Brain<?> brain, MemoryModuleType<? extends LivingEntity> memoryModuleType, EntityType<?> entityType)"
		},
		{
			"forge": "targetIsValid(Brain<?> arg0, MemoryModuleType<? extends LivingEntity> arg1, Predicate<LivingEntity> arg2)",
			"fabric": "canSee(Brain<?> brain, MemoryModuleType<? extends LivingEntity> memoryType, Predicate<LivingEntity> filter)"
		},
		{
			"forge": "lookAtEachOther(LivingEntity arg0, LivingEntity arg1)",
			"fabric": "lookAtEachOther(LivingEntity first, LivingEntity second)"
		},
		{
			"forge": "lookAtEntity(LivingEntity arg0, LivingEntity arg1)",
			"fabric": "lookAt(LivingEntity entity, LivingEntity target)"
		},
		{
			"forge": "setWalkAndLookTargetMemoriesToEachOther(LivingEntity arg0, LivingEntity arg1, float arg2)",
			"fabric": "walkTowardsEachOther(LivingEntity first, LivingEntity second, float speed)"
		},
		{
			"forge": "setWalkAndLookTargetMemories(LivingEntity arg0, Entity arg1, float arg2, int arg3)",
			"fabric": "walkTowards(LivingEntity entity, Entity target, float speed, int completionRange)"
		},
		{
			"forge": "setWalkAndLookTargetMemories(LivingEntity arg0, BlockPos arg1, float arg2, int arg3)",
			"fabric": "walkTowards(LivingEntity entity, BlockPos target, float speed, int completionRange)"
		},
		{
			"forge": "setWalkAndLookTargetMemories(LivingEntity arg0, PositionTracker arg1, float arg2, int arg3)",
			"fabric": "walkTowards(LivingEntity entity, LookTarget target, float speed, int completionRange)"
		},
		{
			"forge": "throwItem(LivingEntity arg0, ItemStack arg1, Vec3 arg2)",
			"fabric": "give(LivingEntity entity, ItemStack stack, Vec3d targetLocation)"
		},
		{
			"forge": "throwItem(LivingEntity arg0, ItemStack arg1, Vec3 arg2, Vec3 arg3, float arg4)",
			"fabric": "give(LivingEntity entity, ItemStack stack, Vec3d targetLocation, Vec3d velocityFactor, float yOffset)"
		},
		{
			"forge": "findSectionClosestToVillage(ServerLevel arg0, SectionPos arg1, int arg2)",
			"fabric": "getPosClosestToOccupiedPointOfInterest(ServerWorld world, ChunkSectionPos center, int radius)"
		},
		{
			"forge": "isWithinAttackRange(Mob arg0, LivingEntity arg1, int arg2)",
			"fabric": "isTargetWithinAttackRange(MobEntity mob, LivingEntity target, int rangedWeaponReachReduction)"
		},
		{
			"forge": "isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(LivingEntity arg0, LivingEntity arg1, double arg2)",
			"fabric": "isNewTargetTooFar(LivingEntity source, LivingEntity target, double extraDistance)"
		},
		{
			"forge": "canSee(LivingEntity arg0, LivingEntity arg1)",
			"fabric": "isVisibleInMemory(LivingEntity source, LivingEntity target)"
		},
		{
			"forge": "getNearestTarget(LivingEntity arg0, Optional<LivingEntity> arg1, LivingEntity arg2)",
			"fabric": "getCloserEntity(LivingEntity source, Optional<LivingEntity> first, LivingEntity second)"
		},
		{
			"forge": "getTargetNearestMe(LivingEntity arg0, LivingEntity arg1, LivingEntity arg2)",
			"fabric": "getCloserEntity(LivingEntity source, LivingEntity first, LivingEntity second)"
		},
		{
			"forge": "getLivingEntityFromUUIDMemory(LivingEntity arg0, MemoryModuleType<UUID> arg1)",
			"fabric": "getEntity(LivingEntity entity, MemoryModuleType<UUID> uuidMemoryModule)"
		},
		{
			"forge": "getRandomSwimmablePos(PathfinderMob arg0, int arg1, int arg2)",
			"fabric": "find(PathAwareEntity entity, int horizontalRange, int verticalRange)"
		},
		{
			"forge": "isBreeding(LivingEntity arg0)",
			"fabric": "hasBreedTarget(LivingEntity entity)"
		}
	]
}