{
	"title": "net.minecraft.world.level.levelgen.SurfaceRules",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.SurfaceRules",
			"fabric": "net.minecraft.world.gen.surfacebuilder.MaterialRules"
		},
		{
			"forge": "ON_FLOOR",
			"fabric": "STONE_DEPTH_FLOOR"
		},
		{
			"forge": "ON_FLOOR",
			"fabric": "STONE_DEPTH_FLOOR"
		},
		{
			"forge": "UNDER_FLOOR",
			"fabric": "STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH"
		},
		{
			"forge": "DEEP_UNDER_FLOOR",
			"fabric": "STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH_RANGE_6"
		},
		{
			"forge": "VERY_DEEP_UNDER_FLOOR",
			"fabric": "STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH_RANGE_30"
		},
		{
			"forge": "ON_CEILING",
			"fabric": "STONE_DEPTH_CEILING"
		},
		{
			"forge": "UNDER_CEILING",
			"fabric": "STONE_DEPTH_CEILING_WITH_SURFACE_DEPTH"
		},
		{
			"forge": "stoneDepthCheck(int arg0, boolean arg1, CaveSurface arg2)",
			"fabric": "stoneDepth(int offset, boolean addSurfaceDepth, VerticalSurfaceType verticalSurfaceType)"
		},
		{
			"forge": "stoneDepthCheck(int arg0, boolean arg1, CaveSurface arg2)",
			"fabric": "stoneDepth(int offset, boolean addSurfaceDepth, VerticalSurfaceType verticalSurfaceType)"
		},
		{
			"forge": "stoneDepthCheck(int arg0, boolean arg1, int arg2, CaveSurface arg3)",
			"fabric": "stoneDepth(int offset, boolean addSurfaceDepth, int secondaryDepthRange, VerticalSurfaceType verticalSurfaceType)"
		},
		{
			"forge": "not(SurfaceRules$ConditionSource arg0)",
			"fabric": "not(MaterialRules$MaterialCondition target)"
		},
		{
			"forge": "yBlockCheck(VerticalAnchor arg0, int arg1)",
			"fabric": "aboveY(YOffset anchor, int runDepthMultiplier)"
		},
		{
			"forge": "yStartCheck(VerticalAnchor arg0, int arg1)",
			"fabric": "aboveYWithStoneDepth(YOffset anchor, int runDepthMultiplier)"
		},
		{
			"forge": "waterBlockCheck(int arg0, int arg1)",
			"fabric": "water(int offset, int runDepthMultiplier)"
		},
		{
			"forge": "waterStartCheck(int arg0, int arg1)",
			"fabric": "waterWithStoneDepth(int offset, int runDepthMultiplier)"
		},
		{
			"forge": "isBiome(ResourceKey<Biome>... arg0)",
			"fabric": "biome(RegistryKey<Biome>... biomes)"
		},
		{
			"forge": "isBiome(List<ResourceKey<Biome>> arg0)",
			"fabric": "biome(List<RegistryKey<Biome>> biomes)"
		},
		{
			"forge": "noiseCondition(ResourceKey<NormalNoise$NoiseParameters> arg0, double arg1)",
			"fabric": "noiseThreshold(RegistryKey<DoublePerlinNoiseSampler$NoiseParameters> noise, double min)"
		},
		{
			"forge": "noiseCondition(ResourceKey<NormalNoise$NoiseParameters> arg0, double arg1, double arg2)",
			"fabric": "noiseThreshold(RegistryKey<DoublePerlinNoiseSampler$NoiseParameters> noise, double min, double max)"
		},
		{
			"forge": "verticalGradient(String arg0, VerticalAnchor arg1, VerticalAnchor arg2)",
			"fabric": "verticalGradient(String id, YOffset trueAtAndBelow, YOffset falseAtAndAbove)"
		},
		{
			"forge": "steep()",
			"fabric": "steepSlope()"
		},
		{
			"forge": "hole()",
			"fabric": "hole()"
		},
		{
			"forge": "abovePreliminarySurface()",
			"fabric": "surface()"
		},
		{
			"forge": "temperature()",
			"fabric": "temperature()"
		},
		{
			"forge": "ifTrue(SurfaceRules$ConditionSource arg0, SurfaceRules$RuleSource arg1)",
			"fabric": "condition(MaterialRules$MaterialCondition condition, MaterialRules$MaterialRule rule)"
		},
		{
			"forge": "sequence(SurfaceRules$RuleSource... arg0)",
			"fabric": "sequence(MaterialRules$MaterialRule... rules)"
		},
		{
			"forge": "state(BlockState arg0)",
			"fabric": "block(BlockState state)"
		},
		{
			"forge": "bandlands()",
			"fabric": "terracottaBands()"
		},
		{
			"forge": "register(Registry<com.mojang.serialization.Codec<? extends A>> arg0, String arg1, KeyDispatchDataCodec<? extends A> arg2)",
			"fabric": "register(Registry<com.mojang.serialization.Codec<? extends A>> registry, String id, CodecHolder<? extends A> codecHolder)"
		}
	]
}