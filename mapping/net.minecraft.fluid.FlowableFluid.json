{
	"title": "net.minecraft.world.level.material.FlowingFluid",
	"items": [
		{
			"forge": "net.minecraft.world.level.material.FlowingFluid",
			"fabric": "net.minecraft.fluid.FlowableFluid"
		},
		{
			"forge": "FALLING",
			"fabric": "FALLING"
		},
		{
			"forge": "FALLING",
			"fabric": "FALLING"
		},
		{
			"forge": "LEVEL",
			"fabric": "LEVEL"
		},
		{
			"forge": "CACHE_SIZE",
			"fabric": "field_31726"
		},
		{
			"forge": "OCCLUSION_CACHE",
			"fabric": "field_15901"
		},
		{
			"forge": "shapes",
			"fabric": "shapeCache"
		},
		{
			"forge": "createFluidStateDefinition(StateDefinition$Builder<Fluid, FluidState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Fluid, FluidState> arg0)"
		},
		{
			"forge": "createFluidStateDefinition(StateDefinition$Builder<Fluid, FluidState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Fluid, FluidState> arg0)"
		},
		{
			"forge": "getFlow(BlockGetter arg0, BlockPos arg1, FluidState arg2)",
			"fabric": "getVelocity(BlockView arg0, BlockPos arg1, FluidState arg2)"
		},
		{
			"forge": "affectsFlow(FluidState arg0)",
			"fabric": "isEmptyOrThis(FluidState state)"
		},
		{
			"forge": "isSolidFace(BlockGetter arg0, BlockPos arg1, Direction arg2)",
			"fabric": "isFlowBlocked(BlockView world, BlockPos pos, Direction direction)"
		},
		{
			"forge": "spread(Level arg0, BlockPos arg1, FluidState arg2)",
			"fabric": "tryFlow(World world, BlockPos fluidPos, FluidState state)"
		},
		{
			"forge": "spreadToSides(Level arg0, BlockPos arg1, FluidState arg2, BlockState arg3)",
			"fabric": "flowToSides(World world, BlockPos pos, FluidState fluidState, BlockState blockState)"
		},
		{
			"forge": "getNewLiquid(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getUpdatedState(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "canPassThroughWall(Direction arg0, BlockGetter arg1, BlockPos arg2, BlockState arg3, BlockPos arg4, BlockState arg5)",
			"fabric": "receivesFlow(Direction face, BlockView world, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState)"
		},
		{
			"forge": "getFlowing()",
			"fabric": "getFlowing()"
		},
		{
			"forge": "getFlowing(int arg0, boolean arg1)",
			"fabric": "getFlowing(int level, boolean falling)"
		},
		{
			"forge": "getSource()",
			"fabric": "getStill()"
		},
		{
			"forge": "getSource(boolean arg0)",
			"fabric": "getStill(boolean falling)"
		},
		{
			"forge": "canConvertToSource(Level arg0)",
			"fabric": "isInfinite(World world)"
		},
		{
			"forge": "spreadTo(LevelAccessor arg0, BlockPos arg1, BlockState arg2, Direction arg3, FluidState arg4)",
			"fabric": "flow(WorldAccess world, BlockPos pos, BlockState state, Direction direction, FluidState fluidState)"
		},
		{
			"forge": "beforeDestroyingBlock(LevelAccessor arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "beforeBreakingBlock(WorldAccess world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getCacheKey(BlockPos arg0, BlockPos arg1)",
			"fabric": "packXZOffset(BlockPos from, BlockPos to)"
		},
		{
			"forge": "getSlopeDistance(LevelReader arg0, BlockPos arg1, int arg2, Direction arg3, BlockState arg4, BlockPos arg5, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<com.mojang.datafixers.util.Pair<BlockState, FluidState>> arg6, it.unimi.dsi.fastutil.shorts.Short2BooleanMap arg7)",
			"fabric": "getFlowSpeedBetween(WorldView world, BlockPos pos, int arg2, Direction direction, BlockState state, BlockPos fromPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<com.mojang.datafixers.util.Pair<BlockState, FluidState>> stateCache, it.unimi.dsi.fastutil.shorts.Short2BooleanMap flowDownCache)"
		},
		{
			"forge": "isWaterHole(BlockGetter arg0, Fluid arg1, BlockPos arg2, BlockState arg3, BlockPos arg4, BlockState arg5)",
			"fabric": "canFlowDownTo(BlockView world, Fluid fluid, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState)"
		},
		{
			"forge": "canPassThrough(BlockGetter arg0, Fluid arg1, BlockPos arg2, BlockState arg3, Direction arg4, BlockPos arg5, BlockState arg6, FluidState arg7)",
			"fabric": "canFlowThrough(BlockView world, Fluid fluid, BlockPos pos, BlockState state, Direction face, BlockPos fromPos, BlockState fromState, FluidState fluidState)"
		},
		{
			"forge": "isSourceBlockOfThisType(FluidState arg0)",
			"fabric": "isMatchingAndStill(FluidState state)"
		},
		{
			"forge": "getSlopeFindDistance(LevelReader arg0)",
			"fabric": "getFlowSpeed(WorldView world)"
		},
		{
			"forge": "sourceNeighborCount(LevelReader arg0, BlockPos arg1)",
			"fabric": "countNeighboringSources(WorldView world, BlockPos pos)"
		},
		{
			"forge": "getSpread(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getSpread(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "canHoldFluid(BlockGetter arg0, BlockPos arg1, BlockState arg2, Fluid arg3)",
			"fabric": "canFill(BlockView world, BlockPos pos, BlockState state, Fluid fluid)"
		},
		{
			"forge": "canSpreadTo(BlockGetter arg0, BlockPos arg1, BlockState arg2, Direction arg3, BlockPos arg4, BlockState arg5, FluidState arg6, Fluid arg7)",
			"fabric": "canFlow(BlockView world, BlockPos fluidPos, BlockState fluidBlockState, Direction flowDirection, BlockPos flowTo, BlockState flowToBlockState, FluidState fluidState, Fluid fluid)"
		},
		{
			"forge": "getDropOff(LevelReader arg0)",
			"fabric": "getLevelDecreasePerBlock(WorldView world)"
		},
		{
			"forge": "getSpreadDelay(Level arg0, BlockPos arg1, FluidState arg2, FluidState arg3)",
			"fabric": "getNextTickDelay(World world, BlockPos pos, FluidState oldState, FluidState newState)"
		},
		{
			"forge": "tick(Level arg0, BlockPos arg1, FluidState arg2)",
			"fabric": "onScheduledTick(World arg0, BlockPos arg1, FluidState arg2)"
		},
		{
			"forge": "getLegacyLevel(FluidState arg0)",
			"fabric": "getBlockStateLevel(FluidState state)"
		},
		{
			"forge": "hasSameAbove(FluidState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "isFluidAboveEqual(FluidState state, BlockView world, BlockPos pos)"
		},
		{
			"forge": "getHeight(FluidState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "getHeight(FluidState arg0, BlockView arg1, BlockPos arg2)"
		},
		{
			"forge": "getOwnHeight(FluidState arg0)",
			"fabric": "getHeight(FluidState arg0)"
		},
		{
			"forge": "getAmount(FluidState arg0)",
			"fabric": "getLevel(FluidState arg0)"
		},
		{
			"forge": "getShape(FluidState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "getShape(FluidState arg0, BlockView arg1, BlockPos arg2)"
		}
	]
}