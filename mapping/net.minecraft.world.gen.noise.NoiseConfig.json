{
	"title": "net.minecraft.world.level.levelgen.RandomState",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.RandomState",
			"fabric": "net.minecraft.world.gen.noise.NoiseConfig"
		},
		{
			"forge": "random",
			"fabric": "randomDeriver"
		},
		{
			"forge": "random",
			"fabric": "randomDeriver"
		},
		{
			"forge": "noises",
			"fabric": "noiseParametersRegistry"
		},
		{
			"forge": "router",
			"fabric": "noiseRouter"
		},
		{
			"forge": "sampler",
			"fabric": "multiNoiseSampler"
		},
		{
			"forge": "surfaceSystem",
			"fabric": "surfaceBuilder"
		},
		{
			"forge": "aquiferRandom",
			"fabric": "aquiferRandomDeriver"
		},
		{
			"forge": "oreRandom",
			"fabric": "oreRandomDeriver"
		},
		{
			"forge": "noiseIntances",
			"fabric": "noises"
		},
		{
			"forge": "positionalRandoms",
			"fabric": "randomDerivers"
		},
		{
			"forge": "create(HolderGetter$Provider arg0, ResourceKey<NoiseGeneratorSettings> arg1, long arg2)",
			"fabric": "create(RegistryEntryLookup$RegistryLookup registryLookup, RegistryKey<ChunkGeneratorSettings> chunkGeneratorSettingsKey, long legacyWorldSeed)"
		},
		{
			"forge": "create(HolderGetter$Provider arg0, ResourceKey<NoiseGeneratorSettings> arg1, long arg2)",
			"fabric": "create(RegistryEntryLookup$RegistryLookup registryLookup, RegistryKey<ChunkGeneratorSettings> chunkGeneratorSettingsKey, long legacyWorldSeed)"
		},
		{
			"forge": "create(NoiseGeneratorSettings arg0, HolderGetter<NormalNoise$NoiseParameters> arg1, long arg2)",
			"fabric": "create(ChunkGeneratorSettings chunkGeneratorSettings, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup, long legacyWorldSeed)"
		},
		{
			"forge": "getOrCreateNoise(ResourceKey<NormalNoise$NoiseParameters> arg0)",
			"fabric": "getOrCreateSampler(RegistryKey<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersKey)"
		},
		{
			"forge": "getOrCreateRandomFactory(ResourceLocation arg0)",
			"fabric": "getOrCreateRandomDeriver(Identifier id)"
		},
		{
			"forge": "router()",
			"fabric": "getNoiseRouter()"
		},
		{
			"forge": "sampler()",
			"fabric": "getMultiNoiseSampler()"
		},
		{
			"forge": "surfaceSystem()",
			"fabric": "getSurfaceBuilder()"
		},
		{
			"forge": "aquiferRandom()",
			"fabric": "getAquiferRandomDeriver()"
		},
		{
			"forge": "oreRandom()",
			"fabric": "getOreRandomDeriver()"
		}
	]
}