{
	"title": "net.minecraft.server.packs.resources.FallbackResourceManager",
	"items": [
		{
			"forge": "net.minecraft.server.packs.resources.FallbackResourceManager",
			"fabric": "net.minecraft.resource.NamespaceResourceManager"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "fallbacks",
			"fabric": "packList"
		},
		{
			"forge": "type",
			"fabric": "type"
		},
		{
			"forge": "namespace",
			"fabric": "namespace"
		},
		{
			"forge": "push(PackResources arg0)",
			"fabric": "addPack(ResourcePack pack)"
		},
		{
			"forge": "push(PackResources arg0)",
			"fabric": "addPack(ResourcePack pack)"
		},
		{
			"forge": "push(PackResources arg0, Predicate<ResourceLocation> arg1)",
			"fabric": "addPack(ResourcePack pack, Predicate<Identifier> filter)"
		},
		{
			"forge": "pushFilterOnly(String arg0, Predicate<ResourceLocation> arg1)",
			"fabric": "addPack(String name, Predicate<Identifier> filter)"
		},
		{
			"forge": "pushInternal(String arg0, PackResources arg1, Predicate<ResourceLocation> arg2)",
			"fabric": "addPack(String name, ResourcePack underlyingPack, Predicate<Identifier> filter)"
		},
		{
			"forge": "getNamespaces()",
			"fabric": "getAllNamespaces()"
		},
		{
			"forge": "getResource(ResourceLocation arg0)",
			"fabric": "getResource(Identifier arg0)"
		},
		{
			"forge": "createResource(PackResources arg0, ResourceLocation arg1, IoSupplier<InputStream> arg2, IoSupplier<ResourceMetadata> arg3)",
			"fabric": "createResource(ResourcePack pack, Identifier id, InputSupplier<InputStream> supplier, InputSupplier<ResourceMetadata> metadataSupplier)"
		},
		{
			"forge": "wrapForDebug(ResourceLocation arg0, PackResources arg1, IoSupplier<InputStream> arg2)",
			"fabric": "wrapForDebug(Identifier id, ResourcePack pack, InputSupplier<InputStream> supplier)"
		},
		{
			"forge": "getResourceStack(ResourceLocation arg0)",
			"fabric": "getAllResources(Identifier arg0)"
		},
		{
			"forge": "isMetadata(ResourceLocation arg0)",
			"fabric": "isMcmeta(Identifier id)"
		},
		{
			"forge": "getResourceLocationFromMetadata(ResourceLocation arg0)",
			"fabric": "getMetadataFileName(Identifier id)"
		},
		{
			"forge": "getMetadataLocation(ResourceLocation arg0)",
			"fabric": "getMetadataPath(Identifier id)"
		},
		{
			"forge": "listResources(String arg0, Predicate<ResourceLocation> arg1)",
			"fabric": "findResources(String arg0, Predicate<Identifier> arg1)"
		},
		{
			"forge": "createStackMetadataFinder(ResourceLocation arg0, int arg1)",
			"fabric": "createMetadataSupplier(Identifier id, int index)"
		},
		{
			"forge": "convertToMetadata(IoSupplier<InputStream> arg0)",
			"fabric": "getMetadataSupplier(InputSupplier<InputStream> supplier)"
		},
		{
			"forge": "parseMetadata(IoSupplier<InputStream> arg0)",
			"fabric": "loadMetadata(InputSupplier<InputStream> supplier)"
		},
		{
			"forge": "applyPackFiltersToExistingResources(FallbackResourceManager$PackEntry arg0, Map<ResourceLocation, FallbackResourceManager$EntryStack> arg1)",
			"fabric": "applyFilter(NamespaceResourceManager$FilterablePack pack, Map<Identifier, NamespaceResourceManager$EntryList> idToEntryList)"
		},
		{
			"forge": "listPackResources(FallbackResourceManager$PackEntry arg0, String arg1, Predicate<ResourceLocation> arg2, Map<ResourceLocation, FallbackResourceManager$EntryStack> arg3)",
			"fabric": "findAndAdd(NamespaceResourceManager$FilterablePack pack, String startingPath, Predicate<Identifier> allowedPathPredicate, Map<Identifier, NamespaceResourceManager$EntryList> idToEntryList)"
		},
		{
			"forge": "listResourceStacks(String arg0, Predicate<ResourceLocation> arg1)",
			"fabric": "findAllResources(String arg0, Predicate<Identifier> arg1)"
		},
		{
			"forge": "listPacks()",
			"fabric": "streamResourcePacks()"
		}
	]
}