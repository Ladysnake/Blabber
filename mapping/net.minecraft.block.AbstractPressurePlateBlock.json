{
	"title": "net.minecraft.world.level.block.BasePressurePlateBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.BasePressurePlateBlock",
			"fabric": "net.minecraft.block.AbstractPressurePlateBlock"
		},
		{
			"forge": "PRESSED_AABB",
			"fabric": "PRESSED_SHAPE"
		},
		{
			"forge": "PRESSED_AABB",
			"fabric": "PRESSED_SHAPE"
		},
		{
			"forge": "AABB",
			"fabric": "DEFAULT_SHAPE"
		},
		{
			"forge": "TOUCH_AABB",
			"fabric": "BOX"
		},
		{
			"forge": "type",
			"fabric": "blockSetType"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getPressedTime()",
			"fabric": "getTickRate()"
		},
		{
			"forge": "isPossibleToRespawnInThis(BlockState arg0)",
			"fabric": "canMobSpawnInside(BlockState arg0)"
		},
		{
			"forge": "updateShape(BlockState arg0, Direction arg1, BlockState arg2, LevelAccessor arg3, BlockPos arg4, BlockPos arg5)",
			"fabric": "getStateForNeighborUpdate(BlockState arg0, Direction arg1, BlockState arg2, WorldAccess arg3, BlockPos arg4, BlockPos arg5)"
		},
		{
			"forge": "canSurvive(BlockState arg0, LevelReader arg1, BlockPos arg2)",
			"fabric": "canPlaceAt(BlockState arg0, WorldView arg1, BlockPos arg2)"
		},
		{
			"forge": "tick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "scheduledTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "entityInside(BlockState arg0, Level arg1, BlockPos arg2, Entity arg3)",
			"fabric": "onEntityCollision(BlockState arg0, World arg1, BlockPos arg2, Entity arg3)"
		},
		{
			"forge": "checkPressed(Entity arg0, Level arg1, BlockPos arg2, BlockState arg3, int arg4)",
			"fabric": "updatePlateState(Entity entity, World world, BlockPos pos, BlockState state, int output)"
		},
		{
			"forge": "onRemove(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onStateReplaced(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "updateNeighbours(Level arg0, BlockPos arg1)",
			"fabric": "updateNeighbors(World world, BlockPos pos)"
		},
		{
			"forge": "getSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getWeakRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "getDirectSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getStrongRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "isSignalSource(BlockState arg0)",
			"fabric": "emitsRedstonePower(BlockState arg0)"
		},
		{
			"forge": "getEntityCount(Level arg0, AABB arg1, Class<? extends Entity> arg2)",
			"fabric": "getEntityCount(World world, Box box, Class<? extends Entity> entityClass)"
		},
		{
			"forge": "getSignalStrength(Level arg0, BlockPos arg1)",
			"fabric": "getRedstoneOutput(World world, BlockPos pos)"
		},
		{
			"forge": "getSignalForState(BlockState arg0)",
			"fabric": "getRedstoneOutput(BlockState state)"
		},
		{
			"forge": "setSignalForState(BlockState arg0, int arg1)",
			"fabric": "setRedstoneOutput(BlockState state, int rsOut)"
		}
	]
}