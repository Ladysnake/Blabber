{
	"title": "net.minecraft.network.chat.Style",
	"items": [
		{
			"forge": "net.minecraft.network.chat.Style",
			"fabric": "net.minecraft.text.Style"
		},
		{
			"forge": "EMPTY",
			"fabric": "EMPTY"
		},
		{
			"forge": "EMPTY",
			"fabric": "EMPTY"
		},
		{
			"forge": "FORMATTING_CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "DEFAULT_FONT",
			"fabric": "DEFAULT_FONT_ID"
		},
		{
			"forge": "color",
			"fabric": "color"
		},
		{
			"forge": "bold",
			"fabric": "bold"
		},
		{
			"forge": "italic",
			"fabric": "italic"
		},
		{
			"forge": "underlined",
			"fabric": "underlined"
		},
		{
			"forge": "strikethrough",
			"fabric": "strikethrough"
		},
		{
			"forge": "obfuscated",
			"fabric": "obfuscated"
		},
		{
			"forge": "clickEvent",
			"fabric": "clickEvent"
		},
		{
			"forge": "hoverEvent",
			"fabric": "hoverEvent"
		},
		{
			"forge": "insertion",
			"fabric": "insertion"
		},
		{
			"forge": "font",
			"fabric": "font"
		},
		{
			"forge": "create(Optional<TextColor> arg0, Optional<Boolean> arg1, Optional<Boolean> arg2, Optional<Boolean> arg3, Optional<Boolean> arg4, Optional<Boolean> arg5, Optional<String> arg6, Optional<ResourceLocation> arg7)",
			"fabric": "of(Optional<TextColor> color, Optional<Boolean> bold, Optional<Boolean> italic, Optional<Boolean> underlined, Optional<Boolean> strikethrough, Optional<Boolean> obfuscated, Optional<String> insertion, Optional<Identifier> font)"
		},
		{
			"forge": "create(Optional<TextColor> arg0, Optional<Boolean> arg1, Optional<Boolean> arg2, Optional<Boolean> arg3, Optional<Boolean> arg4, Optional<Boolean> arg5, Optional<String> arg6, Optional<ResourceLocation> arg7)",
			"fabric": "of(Optional<TextColor> color, Optional<Boolean> bold, Optional<Boolean> italic, Optional<Boolean> underlined, Optional<Boolean> strikethrough, Optional<Boolean> obfuscated, Optional<String> insertion, Optional<Identifier> font)"
		},
		{
			"forge": "getColor()",
			"fabric": "getColor()"
		},
		{
			"forge": "isBold()",
			"fabric": "isBold()"
		},
		{
			"forge": "isItalic()",
			"fabric": "isItalic()"
		},
		{
			"forge": "isStrikethrough()",
			"fabric": "isStrikethrough()"
		},
		{
			"forge": "isUnderlined()",
			"fabric": "isUnderlined()"
		},
		{
			"forge": "isObfuscated()",
			"fabric": "isObfuscated()"
		},
		{
			"forge": "isEmpty()",
			"fabric": "isEmpty()"
		},
		{
			"forge": "getClickEvent()",
			"fabric": "getClickEvent()"
		},
		{
			"forge": "getHoverEvent()",
			"fabric": "getHoverEvent()"
		},
		{
			"forge": "getInsertion()",
			"fabric": "getInsertion()"
		},
		{
			"forge": "getFont()",
			"fabric": "getFont()"
		},
		{
			"forge": "withColor(TextColor arg0)",
			"fabric": "withColor(TextColor color)"
		},
		{
			"forge": "withColor(ChatFormatting arg0)",
			"fabric": "withColor(Formatting color)"
		},
		{
			"forge": "withColor(int arg0)",
			"fabric": "withColor(int rgbColor)"
		},
		{
			"forge": "withBold(Boolean arg0)",
			"fabric": "withBold(Boolean bold)"
		},
		{
			"forge": "withItalic(Boolean arg0)",
			"fabric": "withItalic(Boolean italic)"
		},
		{
			"forge": "withUnderlined(Boolean arg0)",
			"fabric": "withUnderline(Boolean underline)"
		},
		{
			"forge": "withStrikethrough(Boolean arg0)",
			"fabric": "withStrikethrough(Boolean strikethrough)"
		},
		{
			"forge": "withObfuscated(Boolean arg0)",
			"fabric": "withObfuscated(Boolean obfuscated)"
		},
		{
			"forge": "withClickEvent(ClickEvent arg0)",
			"fabric": "withClickEvent(ClickEvent clickEvent)"
		},
		{
			"forge": "withHoverEvent(HoverEvent arg0)",
			"fabric": "withHoverEvent(HoverEvent hoverEvent)"
		},
		{
			"forge": "withInsertion(String arg0)",
			"fabric": "withInsertion(String insertion)"
		},
		{
			"forge": "withFont(ResourceLocation arg0)",
			"fabric": "withFont(Identifier font)"
		},
		{
			"forge": "applyFormat(ChatFormatting arg0)",
			"fabric": "withFormatting(Formatting formatting)"
		},
		{
			"forge": "applyLegacyFormat(ChatFormatting arg0)",
			"fabric": "withExclusiveFormatting(Formatting formatting)"
		},
		{
			"forge": "applyFormats(ChatFormatting... arg0)",
			"fabric": "withFormatting(Formatting... formattings)"
		},
		{
			"forge": "applyTo(Style arg0)",
			"fabric": "withParent(Style parent)"
		}
	]
}