{
	"title": "net.minecraft.server.level.ChunkMap",
	"items": [
		{
			"forge": "net.minecraft.server.level.ChunkMap",
			"fabric": "net.minecraft.server.world.ThreadedAnvilChunkStorage"
		},
		{
			"forge": "CHUNK_TYPE_REPLACEABLE",
			"fabric": "PROTO_CHUNK"
		},
		{
			"forge": "CHUNK_TYPE_REPLACEABLE",
			"fabric": "PROTO_CHUNK"
		},
		{
			"forge": "CHUNK_TYPE_UNKNOWN",
			"fabric": "UNMARKED_CHUNK"
		},
		{
			"forge": "CHUNK_TYPE_FULL",
			"fabric": "LEVEL_CHUNK"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "CHUNK_SAVED_PER_TICK",
			"fabric": "field_29674"
		},
		{
			"forge": "CHUNK_SAVED_EAGERLY_PER_TICK",
			"fabric": "field_36291"
		},
		{
			"forge": "EAGER_CHUNK_SAVE_COOLDOWN_IN_MILLIS",
			"fabric": "field_36384"
		},
		{
			"forge": "MIN_VIEW_DISTANCE",
			"fabric": "field_29675"
		},
		{
			"forge": "MAX_VIEW_DISTANCE",
			"fabric": "field_29669"
		},
		{
			"forge": "FORCED_TICKET_LEVEL",
			"fabric": "field_29670"
		},
		{
			"forge": "updatingChunkMap",
			"fabric": "currentChunkHolders"
		},
		{
			"forge": "visibleChunkMap",
			"fabric": "chunkHolders"
		},
		{
			"forge": "pendingUnloads",
			"fabric": "chunksToUnload"
		},
		{
			"forge": "entitiesInLevel",
			"fabric": "loadedChunks"
		},
		{
			"forge": "level",
			"fabric": "world"
		},
		{
			"forge": "lightEngine",
			"fabric": "lightingProvider"
		},
		{
			"forge": "mainThreadExecutor",
			"fabric": "mainThreadExecutor"
		},
		{
			"forge": "generator",
			"fabric": "chunkGenerator"
		},
		{
			"forge": "randomState",
			"fabric": "noiseConfig"
		},
		{
			"forge": "chunkGeneratorState",
			"fabric": "structurePlacementCalculator"
		},
		{
			"forge": "overworldDataStorage",
			"fabric": "persistentStateManagerFactory"
		},
		{
			"forge": "poiManager",
			"fabric": "pointOfInterestStorage"
		},
		{
			"forge": "toDrop",
			"fabric": "unloadedChunks"
		},
		{
			"forge": "modified",
			"fabric": "chunkHolderListDirty"
		},
		{
			"forge": "queueSorter",
			"fabric": "chunkTaskPrioritySystem"
		},
		{
			"forge": "worldgenMailbox",
			"fabric": "worldGenExecutor"
		},
		{
			"forge": "mainThreadMailbox",
			"fabric": "mainExecutor"
		},
		{
			"forge": "progressListener",
			"fabric": "worldGenerationProgressListener"
		},
		{
			"forge": "chunkStatusListener",
			"fabric": "chunkStatusChangeListener"
		},
		{
			"forge": "distanceManager",
			"fabric": "ticketManager"
		},
		{
			"forge": "tickingGenerated",
			"fabric": "totalChunksLoadedCount"
		},
		{
			"forge": "structureTemplateManager",
			"fabric": "structureTemplateManager"
		},
		{
			"forge": "storageName",
			"fabric": "saveDir"
		},
		{
			"forge": "playerMap",
			"fabric": "playerChunkWatchingManager"
		},
		{
			"forge": "entityMap",
			"fabric": "entityTrackers"
		},
		{
			"forge": "chunkTypeCache",
			"fabric": "chunkToType"
		},
		{
			"forge": "chunkSaveCooldowns",
			"fabric": "chunkToNextSaveTimeMs"
		},
		{
			"forge": "unloadQueue",
			"fabric": "unloadTaskQueue"
		},
		{
			"forge": "viewDistance",
			"fabric": "watchDistance"
		},
		{
			"forge": "generator()",
			"fabric": "getChunkGenerator()"
		},
		{
			"forge": "generator()",
			"fabric": "getChunkGenerator()"
		},
		{
			"forge": "generatorState()",
			"fabric": "getStructurePlacementCalculator()"
		},
		{
			"forge": "randomState()",
			"fabric": "getNoiseConfig()"
		},
		{
			"forge": "debugReloadGenerator()",
			"fabric": "verifyChunkGenerator()"
		},
		{
			"forge": "euclideanDistanceSquared(ChunkPos arg0, Entity arg1)",
			"fabric": "getSquaredDistance(ChunkPos pos, Entity entity)"
		},
		{
			"forge": "isChunkInRange(int arg0, int arg1, int arg2, int arg3, int arg4)",
			"fabric": "isWithinDistance(int x1, int z1, int x2, int z2, int distance)"
		},
		{
			"forge": "isChunkOnRangeBorder(int arg0, int arg1, int arg2, int arg3, int arg4)",
			"fabric": "isOnDistanceEdge(int x1, int z1, int x2, int z2, int distance)"
		},
		{
			"forge": "getLightEngine()",
			"fabric": "getLightingProvider()"
		},
		{
			"forge": "getUpdatingChunkIfPresent(long arg0)",
			"fabric": "getCurrentChunkHolder(long pos)"
		},
		{
			"forge": "getVisibleChunkIfPresent(long arg0)",
			"fabric": "getChunkHolder(long pos)"
		},
		{
			"forge": "getChunkQueueLevel(long arg0)",
			"fabric": "getCompletedLevelSupplier(long pos)"
		},
		{
			"forge": "getChunkDebugData(ChunkPos arg0)",
			"fabric": "getChunkLoadingDebugInfo(ChunkPos chunkPos)"
		},
		{
			"forge": "getChunkRangeFuture(ChunkHolder arg0, int arg1, IntFunction<ChunkStatus> arg2)",
			"fabric": "getRegion(ChunkHolder centerChunk, int margin, IntFunction<ChunkStatus> distanceToStatus)"
		},
		{
			"forge": "debugFuturesAndCreateReportedException(IllegalStateException arg0, String arg1)",
			"fabric": "crash(IllegalStateException exception, String details)"
		},
		{
			"forge": "prepareEntityTickingChunk(ChunkHolder arg0)",
			"fabric": "makeChunkEntitiesTickable(ChunkHolder chunk)"
		},
		{
			"forge": "updateChunkScheduling(long arg0, int arg1, ChunkHolder arg2, int arg3)",
			"fabric": "setLevel(long pos, int level, ChunkHolder holder, int arg3)"
		},
		{
			"forge": "saveAllChunks(boolean arg0)",
			"fabric": "save(boolean flush)"
		},
		{
			"forge": "tick(BooleanSupplier arg0)",
			"fabric": "tick(BooleanSupplier shouldKeepTicking)"
		},
		{
			"forge": "hasWork()",
			"fabric": "shouldDelayShutdown()"
		},
		{
			"forge": "processUnloads(BooleanSupplier arg0)",
			"fabric": "unloadChunks(BooleanSupplier shouldKeepTicking)"
		},
		{
			"forge": "scheduleUnload(long arg0, ChunkHolder arg1)",
			"fabric": "tryUnloadChunk(long pos, ChunkHolder holder)"
		},
		{
			"forge": "promoteChunkMap()",
			"fabric": "updateHolderMap()"
		},
		{
			"forge": "schedule(ChunkHolder arg0, ChunkStatus arg1)",
			"fabric": "getChunk(ChunkHolder holder, ChunkStatus requiredStatus)"
		},
		{
			"forge": "scheduleChunkLoad(ChunkPos arg0)",
			"fabric": "loadChunk(ChunkPos pos)"
		},
		{
			"forge": "isChunkDataValid(CompoundTag arg0)",
			"fabric": "containsStatus(NbtCompound nbt)"
		},
		{
			"forge": "handleChunkLoadFailure(Throwable arg0, ChunkPos arg1)",
			"fabric": "recoverFromException(Throwable throwable, ChunkPos chunkPos)"
		},
		{
			"forge": "createEmptyChunk(ChunkPos arg0)",
			"fabric": "getProtoChunk(ChunkPos chunkPos)"
		},
		{
			"forge": "markPositionReplaceable(ChunkPos arg0)",
			"fabric": "markAsProtoChunk(ChunkPos pos)"
		},
		{
			"forge": "markPosition(ChunkPos arg0, ChunkStatus$ChunkType arg1)",
			"fabric": "mark(ChunkPos pos, ChunkStatus$ChunkType type)"
		},
		{
			"forge": "scheduleChunkGeneration(ChunkHolder arg0, ChunkStatus arg1)",
			"fabric": "upgradeChunk(ChunkHolder holder, ChunkStatus requiredStatus)"
		},
		{
			"forge": "releaseLightTicket(ChunkPos arg0)",
			"fabric": "releaseLightTicket(ChunkPos pos)"
		},
		{
			"forge": "getDependencyStatus(ChunkStatus arg0, int arg1)",
			"fabric": "getRequiredStatusForGeneration(ChunkStatus centerChunkTargetStatus, int distance)"
		},
		{
			"forge": "postLoadProtoChunk(ServerLevel arg0, List<CompoundTag> arg1)",
			"fabric": "addEntitiesFromNbt(ServerWorld world, List<NbtCompound> nbt)"
		},
		{
			"forge": "protoChunkToFullChunk(ChunkHolder arg0)",
			"fabric": "convertToFullChunk(ChunkHolder chunkHolder)"
		},
		{
			"forge": "prepareTickingChunk(ChunkHolder arg0)",
			"fabric": "makeChunkTickable(ChunkHolder holder)"
		},
		{
			"forge": "prepareAccessibleChunk(ChunkHolder arg0)",
			"fabric": "makeChunkAccessible(ChunkHolder holder)"
		},
		{
			"forge": "getTickingGenerated()",
			"fabric": "getTotalChunksLoadedCount()"
		},
		{
			"forge": "saveChunkIfNeeded(ChunkHolder arg0)",
			"fabric": "save(ChunkHolder chunkHolder)"
		},
		{
			"forge": "save(ChunkAccess arg0)",
			"fabric": "save(Chunk chunk)"
		},
		{
			"forge": "isExistingChunkFull(ChunkPos arg0)",
			"fabric": "isLevelChunk(ChunkPos pos)"
		},
		{
			"forge": "setViewDistance(int arg0)",
			"fabric": "setViewDistance(int watchDistance)"
		},
		{
			"forge": "updateChunkTracking(ServerPlayer arg0, ChunkPos arg1, org.apache.commons.lang3.mutable.MutableObject<ClientboundLevelChunkWithLightPacket> arg2, boolean arg3, boolean arg4)",
			"fabric": "sendWatchPackets(ServerPlayerEntity player, ChunkPos pos, org.apache.commons.lang3.mutable.MutableObject<ChunkDataS2CPacket> packet, boolean oldWithinViewDistance, boolean newWithinViewDistance)"
		},
		{
			"forge": "size()",
			"fabric": "getLoadedChunkCount()"
		},
		{
			"forge": "getDistanceManager()",
			"fabric": "getTicketManager()"
		},
		{
			"forge": "getChunks()",
			"fabric": "entryIterator()"
		},
		{
			"forge": "dumpChunks(Writer arg0)",
			"fabric": "dump(Writer writer)"
		},
		{
			"forge": "printFuture(CompletableFuture<com.mojang.datafixers.util.Either<LevelChunk, ChunkHolder$ChunkLoadingFailure>> arg0)",
			"fabric": "getFutureStatus(CompletableFuture<com.mojang.datafixers.util.Either<WorldChunk, ChunkHolder$Unloaded>> future)"
		},
		{
			"forge": "readChunk(ChunkPos arg0)",
			"fabric": "getUpdatedChunkNbt(ChunkPos chunkPos)"
		},
		{
			"forge": "upgradeChunkTag(CompoundTag arg0)",
			"fabric": "updateChunkNbt(NbtCompound nbt)"
		},
		{
			"forge": "anyPlayerCloseEnoughForSpawning(ChunkPos arg0)",
			"fabric": "shouldTick(ChunkPos pos)"
		},
		{
			"forge": "getPlayersCloseForSpawning(ChunkPos arg0)",
			"fabric": "getPlayersWatchingChunk(ChunkPos pos)"
		},
		{
			"forge": "playerIsCloseEnoughForSpawning(ServerPlayer arg0, ChunkPos arg1)",
			"fabric": "canTickChunk(ServerPlayerEntity player, ChunkPos pos)"
		},
		{
			"forge": "skipPlayer(ServerPlayer arg0)",
			"fabric": "doesNotGenerateChunks(ServerPlayerEntity player)"
		},
		{
			"forge": "updatePlayerStatus(ServerPlayer arg0, boolean arg1)",
			"fabric": "handlePlayerAddedOrRemoved(ServerPlayerEntity player, boolean added)"
		},
		{
			"forge": "updatePlayerPos(ServerPlayer arg0)",
			"fabric": "updateWatchedSection(ServerPlayerEntity player)"
		},
		{
			"forge": "move(ServerPlayer arg0)",
			"fabric": "updatePosition(ServerPlayerEntity player)"
		},
		{
			"forge": "getPlayers(ChunkPos arg0, boolean arg1)",
			"fabric": "getPlayersWatchingChunk(ChunkPos arg0, boolean arg1)"
		},
		{
			"forge": "addEntity(Entity arg0)",
			"fabric": "loadEntity(Entity entity)"
		},
		{
			"forge": "removeEntity(Entity arg0)",
			"fabric": "unloadEntity(Entity entity)"
		},
		{
			"forge": "tick()",
			"fabric": "tickEntityMovement()"
		},
		{
			"forge": "broadcast(Entity arg0, Packet<?> arg1)",
			"fabric": "sendToOtherNearbyPlayers(Entity entity, Packet<?> packet)"
		},
		{
			"forge": "broadcastAndSend(Entity arg0, Packet<?> arg1)",
			"fabric": "sendToNearbyPlayers(Entity entity, Packet<?> packet)"
		},
		{
			"forge": "resendBiomesForChunks(List<ChunkAccess> arg0)",
			"fabric": "sendChunkBiomePackets(List<Chunk> chunks)"
		},
		{
			"forge": "playerLoadedChunk(ServerPlayer arg0, org.apache.commons.lang3.mutable.MutableObject<ClientboundLevelChunkWithLightPacket> arg1, LevelChunk arg2)",
			"fabric": "sendChunkDataPackets(ServerPlayerEntity player, org.apache.commons.lang3.mutable.MutableObject<ChunkDataS2CPacket> cachedDataPacket, WorldChunk chunk)"
		},
		{
			"forge": "getPoiManager()",
			"fabric": "getPointOfInterestStorage()"
		},
		{
			"forge": "getStorageName()",
			"fabric": "getSaveDir()"
		},
		{
			"forge": "onFullChunkStatusChange(ChunkPos arg0, FullChunkStatus arg1)",
			"fabric": "onChunkStatusChange(ChunkPos chunkPos, ChunkLevelType levelType)"
		}
	]
}