{
	"title": "net.minecraft.world.entity.monster.Zombie",
	"items": [
		{
			"forge": "net.minecraft.world.entity.monster.Zombie",
			"fabric": "net.minecraft.entity.mob.ZombieEntity"
		},
		{
			"forge": "SPEED_MODIFIER_BABY_UUID",
			"fabric": "BABY_SPEED_ID"
		},
		{
			"forge": "SPEED_MODIFIER_BABY_UUID",
			"fabric": "BABY_SPEED_ID"
		},
		{
			"forge": "SPEED_MODIFIER_BABY",
			"fabric": "BABY_SPEED_BONUS"
		},
		{
			"forge": "DATA_BABY_ID",
			"fabric": "BABY"
		},
		{
			"forge": "DATA_SPECIAL_TYPE_ID",
			"fabric": "ZOMBIE_TYPE"
		},
		{
			"forge": "DATA_DROWNED_CONVERSION_ID",
			"fabric": "CONVERTING_IN_WATER"
		},
		{
			"forge": "ZOMBIE_LEADER_CHANCE",
			"fabric": "field_30519"
		},
		{
			"forge": "REINFORCEMENT_ATTEMPTS",
			"fabric": "field_30515"
		},
		{
			"forge": "REINFORCEMENT_RANGE_MAX",
			"fabric": "field_30516"
		},
		{
			"forge": "REINFORCEMENT_RANGE_MIN",
			"fabric": "field_30517"
		},
		{
			"forge": "BABY_EYE_HEIGHT_ADJUSTMENT",
			"fabric": "field_41028"
		},
		{
			"forge": "BREAK_DOOR_CHANCE",
			"fabric": "field_30518"
		},
		{
			"forge": "DOOR_BREAKING_PREDICATE",
			"fabric": "DOOR_BREAK_DIFFICULTY_CHECKER"
		},
		{
			"forge": "breakDoorGoal",
			"fabric": "breakDoorsGoal"
		},
		{
			"forge": "canBreakDoors",
			"fabric": "canBreakDoors"
		},
		{
			"forge": "inWaterTime",
			"fabric": "inWaterTime"
		},
		{
			"forge": "conversionTime",
			"fabric": "ticksUntilWaterConversion"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "registerGoals()",
			"fabric": "initGoals()"
		},
		{
			"forge": "addBehaviourGoals()",
			"fabric": "initCustomGoals()"
		},
		{
			"forge": "createAttributes()",
			"fabric": "createZombieAttributes()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "isUnderWaterConverting()",
			"fabric": "isConvertingInWater()"
		},
		{
			"forge": "canBreakDoors()",
			"fabric": "canBreakDoors()"
		},
		{
			"forge": "setCanBreakDoors(boolean arg0)",
			"fabric": "setCanBreakDoors(boolean canBreakDoors)"
		},
		{
			"forge": "supportsBreakDoorGoal()",
			"fabric": "shouldBreakDoors()"
		},
		{
			"forge": "isBaby()",
			"fabric": "isBaby()"
		},
		{
			"forge": "getExperienceReward()",
			"fabric": "getXpToDrop()"
		},
		{
			"forge": "setBaby(boolean arg0)",
			"fabric": "setBaby(boolean arg0)"
		},
		{
			"forge": "onSyncedDataUpdated(EntityDataAccessor<?> arg0)",
			"fabric": "onTrackedDataSet(TrackedData<?> arg0)"
		},
		{
			"forge": "convertsInWater()",
			"fabric": "canConvertInWater()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "aiStep()",
			"fabric": "tickMovement()"
		},
		{
			"forge": "startUnderWaterConversion(int arg0)",
			"fabric": "setTicksUntilWaterConversion(int ticksUntilWaterConversion)"
		},
		{
			"forge": "doUnderWaterConversion()",
			"fabric": "convertInWater()"
		},
		{
			"forge": "convertToZombieType(EntityType<? extends Zombie> arg0)",
			"fabric": "convertTo(EntityType<? extends ZombieEntity> entityType)"
		},
		{
			"forge": "isSunSensitive()",
			"fabric": "burnsInDaylight()"
		},
		{
			"forge": "hurt(DamageSource arg0, float arg1)",
			"fabric": "damage(DamageSource arg0, float arg1)"
		},
		{
			"forge": "doHurtTarget(Entity arg0)",
			"fabric": "tryAttack(Entity arg0)"
		},
		{
			"forge": "getAmbientSound()",
			"fabric": "getAmbientSound()"
		},
		{
			"forge": "getHurtSound(DamageSource arg0)",
			"fabric": "getHurtSound(DamageSource arg0)"
		},
		{
			"forge": "getDeathSound()",
			"fabric": "getDeathSound()"
		},
		{
			"forge": "getStepSound()",
			"fabric": "getStepSound()"
		},
		{
			"forge": "playStepSound(BlockPos arg0, BlockState arg1)",
			"fabric": "playStepSound(BlockPos arg0, BlockState arg1)"
		},
		{
			"forge": "getMobType()",
			"fabric": "getGroup()"
		},
		{
			"forge": "populateDefaultEquipmentSlots(RandomSource arg0, DifficultyInstance arg1)",
			"fabric": "initEquipment(Random arg0, LocalDifficulty arg1)"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "killedEntity(ServerLevel arg0, LivingEntity arg1)",
			"fabric": "onKilledOther(ServerWorld arg0, LivingEntity arg1)"
		},
		{
			"forge": "getStandingEyeHeight(Pose arg0, EntityDimensions arg1)",
			"fabric": "getActiveEyeHeight(EntityPose arg0, EntityDimensions arg1)"
		},
		{
			"forge": "canHoldItem(ItemStack arg0)",
			"fabric": "canPickupItem(ItemStack arg0)"
		},
		{
			"forge": "wantsToPickUp(ItemStack arg0)",
			"fabric": "canGather(ItemStack arg0)"
		},
		{
			"forge": "finalizeSpawn(ServerLevelAccessor arg0, DifficultyInstance arg1, MobSpawnType arg2, SpawnGroupData arg3, CompoundTag arg4)",
			"fabric": "initialize(ServerWorldAccess arg0, LocalDifficulty arg1, SpawnReason arg2, EntityData arg3, NbtCompound arg4)"
		},
		{
			"forge": "getSpawnAsBabyOdds(RandomSource arg0)",
			"fabric": "shouldBeBaby(Random random)"
		},
		{
			"forge": "handleAttributes(float arg0)",
			"fabric": "applyAttributeModifiers(float chanceMultiplier)"
		},
		{
			"forge": "randomizeReinforcementsChance()",
			"fabric": "initAttributes()"
		},
		{
			"forge": "getMyRidingOffset()",
			"fabric": "getHeightOffset()"
		},
		{
			"forge": "dropCustomDeathLoot(DamageSource arg0, int arg1, boolean arg2)",
			"fabric": "dropEquipment(DamageSource arg0, int arg1, boolean arg2)"
		},
		{
			"forge": "getSkull()",
			"fabric": "getSkull()"
		}
	]
}