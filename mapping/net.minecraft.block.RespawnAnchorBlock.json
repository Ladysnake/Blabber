{
	"title": "net.minecraft.world.level.block.RespawnAnchorBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.RespawnAnchorBlock",
			"fabric": "net.minecraft.block.RespawnAnchorBlock"
		},
		{
			"forge": "MIN_CHARGES",
			"fabric": "NO_CHARGES"
		},
		{
			"forge": "MIN_CHARGES",
			"fabric": "NO_CHARGES"
		},
		{
			"forge": "MAX_CHARGES",
			"fabric": "MAX_CHARGES"
		},
		{
			"forge": "CHARGE",
			"fabric": "CHARGES"
		},
		{
			"forge": "RESPAWN_HORIZONTAL_OFFSETS",
			"fabric": "VALID_HORIZONTAL_SPAWN_OFFSETS"
		},
		{
			"forge": "RESPAWN_OFFSETS",
			"fabric": "VALID_SPAWN_OFFSETS"
		},
		{
			"forge": "use(BlockState arg0, Level arg1, BlockPos arg2, Player arg3, InteractionHand arg4, BlockHitResult arg5)",
			"fabric": "onUse(BlockState arg0, World arg1, BlockPos arg2, PlayerEntity arg3, Hand arg4, BlockHitResult arg5)"
		},
		{
			"forge": "use(BlockState arg0, Level arg1, BlockPos arg2, Player arg3, InteractionHand arg4, BlockHitResult arg5)",
			"fabric": "onUse(BlockState arg0, World arg1, BlockPos arg2, PlayerEntity arg3, Hand arg4, BlockHitResult arg5)"
		},
		{
			"forge": "isRespawnFuel(ItemStack arg0)",
			"fabric": "isChargeItem(ItemStack stack)"
		},
		{
			"forge": "canBeCharged(BlockState arg0)",
			"fabric": "canCharge(BlockState state)"
		},
		{
			"forge": "isWaterThatWouldFlow(BlockPos arg0, Level arg1)",
			"fabric": "hasStillWater(BlockPos pos, World world)"
		},
		{
			"forge": "explode(BlockState arg0, Level arg1, BlockPos arg2)",
			"fabric": "explode(BlockState state, World world, BlockPos explodedPos)"
		},
		{
			"forge": "canSetSpawn(Level arg0)",
			"fabric": "isNether(World world)"
		},
		{
			"forge": "charge(Entity arg0, Level arg1, BlockPos arg2, BlockState arg3)",
			"fabric": "charge(Entity charger, World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "animateTick(BlockState arg0, Level arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "randomDisplayTick(BlockState arg0, World arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> arg0)"
		},
		{
			"forge": "hasAnalogOutputSignal(BlockState arg0)",
			"fabric": "hasComparatorOutput(BlockState arg0)"
		},
		{
			"forge": "getScaledChargeLevel(BlockState arg0, int arg1)",
			"fabric": "getLightLevel(BlockState state, int maxLevel)"
		},
		{
			"forge": "getAnalogOutputSignal(BlockState arg0, Level arg1, BlockPos arg2)",
			"fabric": "getComparatorOutput(BlockState arg0, World arg1, BlockPos arg2)"
		},
		{
			"forge": "findStandUpPosition(EntityType<?> arg0, CollisionGetter arg1, BlockPos arg2)",
			"fabric": "findRespawnPosition(EntityType<?> entity, CollisionView world, BlockPos pos)"
		},
		{
			"forge": "findStandUpPosition(EntityType<?> arg0, CollisionGetter arg1, BlockPos arg2, boolean arg3)",
			"fabric": "findRespawnPosition(EntityType<?> entity, CollisionView world, BlockPos pos, boolean ignoreInvalidPos)"
		},
		{
			"forge": "isPathfindable(BlockState arg0, BlockGetter arg1, BlockPos arg2, PathComputationType arg3)",
			"fabric": "canPathfindThrough(BlockState arg0, BlockView arg1, BlockPos arg2, NavigationType arg3)"
		}
	]
}