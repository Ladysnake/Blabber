{
	"title": "net.minecraft.world.level.levelgen.DensityFunctions",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.DensityFunctions",
			"fabric": "net.minecraft.world.gen.densityfunction.DensityFunctionTypes"
		},
		{
			"forge": "CODEC",
			"fabric": "DYNAMIC_RANGE"
		},
		{
			"forge": "CODEC",
			"fabric": "DYNAMIC_RANGE"
		},
		{
			"forge": "MAX_REASONABLE_NOISE_VALUE",
			"fabric": "MAX_CONSTANT_VALUE"
		},
		{
			"forge": "NOISE_VALUE_CODEC",
			"fabric": "CONSTANT_RANGE"
		},
		{
			"forge": "DIRECT_CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "bootstrap(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> arg0)",
			"fabric": "registerAndGetDefault(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> registry)"
		},
		{
			"forge": "bootstrap(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> arg0)",
			"fabric": "registerAndGetDefault(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> registry)"
		},
		{
			"forge": "register(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> arg0, String arg1, KeyDispatchDataCodec<? extends DensityFunction> arg2)",
			"fabric": "register(Registry<com.mojang.serialization.Codec<? extends DensityFunction>> registry, String id, CodecHolder<? extends DensityFunction> codecHolder)"
		},
		{
			"forge": "singleArgumentCodec(com.mojang.serialization.Codec<A> arg0, Function<A, O> arg1, Function<O, A> arg2)",
			"fabric": "holderOf(com.mojang.serialization.Codec<A> codec, Function<A, O> creator, Function<O, A> argumentGetter)"
		},
		{
			"forge": "singleFunctionArgumentCodec(Function<DensityFunction, O> arg0, Function<O, DensityFunction> arg1)",
			"fabric": "holderOf(Function<DensityFunction, O> creator, Function<O, DensityFunction> argumentGetter)"
		},
		{
			"forge": "doubleFunctionArgumentCodec(BiFunction<DensityFunction, DensityFunction, O> arg0, Function<O, DensityFunction> arg1, Function<O, DensityFunction> arg2)",
			"fabric": "holderOf(BiFunction<DensityFunction, DensityFunction, O> creator, Function<O, DensityFunction> argument1Getter, Function<O, DensityFunction> argument2Getter)"
		},
		{
			"forge": "makeCodec(com.mojang.serialization.MapCodec<O> arg0)",
			"fabric": "holderOf(com.mojang.serialization.MapCodec<O> mapCodec)"
		},
		{
			"forge": "interpolated(DensityFunction arg0)",
			"fabric": "interpolated(DensityFunction inputFunction)"
		},
		{
			"forge": "flatCache(DensityFunction arg0)",
			"fabric": "flatCache(DensityFunction inputFunction)"
		},
		{
			"forge": "cache2d(DensityFunction arg0)",
			"fabric": "cache2d(DensityFunction inputFunction)"
		},
		{
			"forge": "cacheOnce(DensityFunction arg0)",
			"fabric": "cacheOnce(DensityFunction inputFunction)"
		},
		{
			"forge": "cacheAllInCell(DensityFunction arg0)",
			"fabric": "cacheAllInCell(DensityFunction inputFunction)"
		},
		{
			"forge": "mappedNoise(Holder<NormalNoise$NoiseParameters> arg0, double arg1, double arg2, double arg3, double arg4)",
			"fabric": "noiseInRange(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters, double scaleXz, double scaleY, double min, double max)"
		},
		{
			"forge": "mappedNoise(Holder<NormalNoise$NoiseParameters> arg0, double arg1, double arg2, double arg3)",
			"fabric": "noiseInRange(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters, double scaleY, double min, double max)"
		},
		{
			"forge": "mappedNoise(Holder<NormalNoise$NoiseParameters> arg0, double arg1, double arg2)",
			"fabric": "noiseInRange(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters, double min, double max)"
		},
		{
			"forge": "shiftedNoise2d(DensityFunction arg0, DensityFunction arg1, double arg2, Holder<NormalNoise$NoiseParameters> arg3)",
			"fabric": "shiftedNoise(DensityFunction shiftX, DensityFunction shiftZ, double xzScale, RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters)"
		},
		{
			"forge": "noise(Holder<NormalNoise$NoiseParameters> arg0)",
			"fabric": "noise(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters)"
		},
		{
			"forge": "noise(Holder<NormalNoise$NoiseParameters> arg0, double arg1, double arg2)",
			"fabric": "noise(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters, double scaleXz, double scaleY)"
		},
		{
			"forge": "noise(Holder<NormalNoise$NoiseParameters> arg0, double arg1)",
			"fabric": "noise(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters, double scaleY)"
		},
		{
			"forge": "rangeChoice(DensityFunction arg0, double arg1, double arg2, DensityFunction arg3, DensityFunction arg4)",
			"fabric": "rangeChoice(DensityFunction input, double minInclusive, double maxExclusive, DensityFunction whenInRange, DensityFunction whenOutOfRange)"
		},
		{
			"forge": "shiftA(Holder<NormalNoise$NoiseParameters> arg0)",
			"fabric": "shiftA(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters)"
		},
		{
			"forge": "shiftB(Holder<NormalNoise$NoiseParameters> arg0)",
			"fabric": "shiftB(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters)"
		},
		{
			"forge": "shift(Holder<NormalNoise$NoiseParameters> arg0)",
			"fabric": "shift(RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> noiseParameters)"
		},
		{
			"forge": "blendDensity(DensityFunction arg0)",
			"fabric": "blendDensity(DensityFunction input)"
		},
		{
			"forge": "endIslands(long arg0)",
			"fabric": "endIslands(long seed)"
		},
		{
			"forge": "weirdScaledSampler(DensityFunction arg0, Holder<NormalNoise$NoiseParameters> arg1, DensityFunctions$WeirdScaledSampler$RarityValueMapper arg2)",
			"fabric": "weirdScaledSampler(DensityFunction input, RegistryEntry<DoublePerlinNoiseSampler$NoiseParameters> parameters, DensityFunctionTypes$WeirdScaledSampler$RarityValueMapper mapper)"
		},
		{
			"forge": "add(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "add(DensityFunction a, DensityFunction b)"
		},
		{
			"forge": "mul(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "mul(DensityFunction a, DensityFunction b)"
		},
		{
			"forge": "min(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "min(DensityFunction a, DensityFunction b)"
		},
		{
			"forge": "max(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "max(DensityFunction a, DensityFunction b)"
		},
		{
			"forge": "spline(CubicSpline<DensityFunctions$Spline$Point, DensityFunctions$Spline$Coordinate> arg0)",
			"fabric": "spline(Spline<DensityFunctionTypes$Spline$SplinePos, DensityFunctionTypes$Spline$DensityFunctionWrapper> spline)"
		},
		{
			"forge": "zero()",
			"fabric": "zero()"
		},
		{
			"forge": "constant(double arg0)",
			"fabric": "constant(double density)"
		},
		{
			"forge": "yClampedGradient(int arg0, int arg1, double arg2, double arg3)",
			"fabric": "yClampedGradient(int fromY, int toY, double fromValue, double toValue)"
		},
		{
			"forge": "map(DensityFunction arg0, DensityFunctions$Mapped$Type arg1)",
			"fabric": "unary(DensityFunction input, DensityFunctionTypes$UnaryOperation$Type type)"
		},
		{
			"forge": "mapFromUnitTo(DensityFunction arg0, double arg1, double arg2)",
			"fabric": "mapRange(DensityFunction function, double min, double max)"
		},
		{
			"forge": "blendAlpha()",
			"fabric": "blendAlpha()"
		},
		{
			"forge": "blendOffset()",
			"fabric": "blendOffset()"
		},
		{
			"forge": "lerp(DensityFunction arg0, DensityFunction arg1, DensityFunction arg2)",
			"fabric": "lerp(DensityFunction delta, DensityFunction start, DensityFunction end)"
		},
		{
			"forge": "lerp(DensityFunction arg0, double arg1, DensityFunction arg2)",
			"fabric": "lerp(DensityFunction delta, double start, DensityFunction end)"
		}
	]
}