{
	"title": "net.minecraft.world.level.levelgen.NoiseRouterData",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.NoiseRouterData",
			"fabric": "net.minecraft.world.gen.densityfunction.DensityFunctions"
		},
		{
			"forge": "GLOBAL_OFFSET",
			"fabric": "field_37690"
		},
		{
			"forge": "GLOBAL_OFFSET",
			"fabric": "field_37690"
		},
		{
			"forge": "ORE_THICKNESS",
			"fabric": "field_36614"
		},
		{
			"forge": "VEININESS_FREQUENCY",
			"fabric": "field_36615"
		},
		{
			"forge": "NOODLE_SPACING_AND_STRAIGHTNESS",
			"fabric": "field_36616"
		},
		{
			"forge": "SURFACE_DENSITY_THRESHOLD",
			"fabric": "field_36617"
		},
		{
			"forge": "CHEESE_NOISE_TARGET",
			"fabric": "field_38250"
		},
		{
			"forge": "ISLAND_CHUNK_DISTANCE",
			"fabric": "field_37691"
		},
		{
			"forge": "ISLAND_CHUNK_DISTANCE_SQR",
			"fabric": "field_37692"
		},
		{
			"forge": "BLENDING_FACTOR",
			"fabric": "TEN_FUNCTION"
		},
		{
			"forge": "BLENDING_JAGGEDNESS",
			"fabric": "ZERO_FUNCTION"
		},
		{
			"forge": "ZERO",
			"fabric": "ZERO"
		},
		{
			"forge": "Y",
			"fabric": "Y"
		},
		{
			"forge": "SHIFT_X",
			"fabric": "SHIFT_X"
		},
		{
			"forge": "SHIFT_Z",
			"fabric": "SHIFT_Z"
		},
		{
			"forge": "BASE_3D_NOISE_OVERWORLD",
			"fabric": "BASE_3D_NOISE_OVERWORLD"
		},
		{
			"forge": "BASE_3D_NOISE_NETHER",
			"fabric": "BASE_3D_NOISE_NETHER"
		},
		{
			"forge": "BASE_3D_NOISE_END",
			"fabric": "BASE_3D_NOISE_END"
		},
		{
			"forge": "CONTINENTS",
			"fabric": "CONTINENTS_OVERWORLD"
		},
		{
			"forge": "EROSION",
			"fabric": "EROSION_OVERWORLD"
		},
		{
			"forge": "RIDGES",
			"fabric": "RIDGES_OVERWORLD"
		},
		{
			"forge": "RIDGES_FOLDED",
			"fabric": "RIDGES_FOLDED_OVERWORLD"
		},
		{
			"forge": "OFFSET",
			"fabric": "OFFSET_OVERWORLD"
		},
		{
			"forge": "FACTOR",
			"fabric": "FACTOR_OVERWORLD"
		},
		{
			"forge": "JAGGEDNESS",
			"fabric": "JAGGEDNESS_OVERWORLD"
		},
		{
			"forge": "DEPTH",
			"fabric": "DEPTH_OVERWORLD"
		},
		{
			"forge": "SLOPED_CHEESE",
			"fabric": "SLOPED_CHEESE_OVERWORLD"
		},
		{
			"forge": "CONTINENTS_LARGE",
			"fabric": "CONTINENTS_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "EROSION_LARGE",
			"fabric": "EROSION_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "OFFSET_LARGE",
			"fabric": "OFFSET_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "FACTOR_LARGE",
			"fabric": "FACTOR_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "JAGGEDNESS_LARGE",
			"fabric": "JAGGEDNESS_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "DEPTH_LARGE",
			"fabric": "DEPTH_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "SLOPED_CHEESE_LARGE",
			"fabric": "SLOPED_CHEESE_OVERWORLD_LARGE_BIOME"
		},
		{
			"forge": "OFFSET_AMPLIFIED",
			"fabric": "OFFSET_OVERWORLD_AMPLIFIED"
		},
		{
			"forge": "FACTOR_AMPLIFIED",
			"fabric": "FACTOR_OVERWORLD_AMPLIFIED"
		},
		{
			"forge": "JAGGEDNESS_AMPLIFIED",
			"fabric": "JAGGEDNESS_OVERWORLD_AMPLIFIED"
		},
		{
			"forge": "DEPTH_AMPLIFIED",
			"fabric": "DEPTH_OVERWORLD_AMPLIFIED"
		},
		{
			"forge": "SLOPED_CHEESE_AMPLIFIED",
			"fabric": "SLOPED_CHEESE_OVERWORLD_AMPLIFIED"
		},
		{
			"forge": "SLOPED_CHEESE_END",
			"fabric": "SLOPED_CHEESE_END"
		},
		{
			"forge": "SPAGHETTI_ROUGHNESS_FUNCTION",
			"fabric": "CAVES_SPAGHETTI_ROUGHNESS_FUNCTION_OVERWORLD"
		},
		{
			"forge": "ENTRANCES",
			"fabric": "CAVES_ENTRANCES_OVERWORLD"
		},
		{
			"forge": "NOODLE",
			"fabric": "CAVES_NOODLE_OVERWORLD"
		},
		{
			"forge": "PILLARS",
			"fabric": "CAVES_PILLARS_OVERWORLD"
		},
		{
			"forge": "SPAGHETTI_2D_THICKNESS_MODULATOR",
			"fabric": "CAVES_SPAGHETTI_2D_THICKNESS_MODULATOR_OVERWORLD"
		},
		{
			"forge": "SPAGHETTI_2D",
			"fabric": "CAVES_SPAGHETTI_2D_OVERWORLD"
		},
		{
			"forge": "createKey(String arg0)",
			"fabric": "of(String id)"
		},
		{
			"forge": "createKey(String arg0)",
			"fabric": "of(String id)"
		},
		{
			"forge": "bootstrap(BootstapContext<DensityFunction> arg0)",
			"fabric": "bootstrap(Registerable<DensityFunction> densityFunctionRegisterable)"
		},
		{
			"forge": "registerTerrainNoises(BootstapContext<DensityFunction> arg0, HolderGetter<DensityFunction> arg1, DensityFunction arg2, Holder<DensityFunction> arg3, Holder<DensityFunction> arg4, ResourceKey<DensityFunction> arg5, ResourceKey<DensityFunction> arg6, ResourceKey<DensityFunction> arg7, ResourceKey<DensityFunction> arg8, ResourceKey<DensityFunction> arg9, boolean arg10)",
			"fabric": "registerSlopedCheeseFunction(Registerable<DensityFunction> densityFunctionRegisterable, RegistryEntryLookup<DensityFunction> densityFunctionLookup, DensityFunction jaggedNoise, RegistryEntry<DensityFunction> continents, RegistryEntry<DensityFunction> erosion, RegistryKey<DensityFunction> offsetKey, RegistryKey<DensityFunction> factorKey, RegistryKey<DensityFunction> jaggednessKey, RegistryKey<DensityFunction> depthKey, RegistryKey<DensityFunction> slopedCheeseKey, boolean amplified)"
		},
		{
			"forge": "registerAndWrap(BootstapContext<DensityFunction> arg0, ResourceKey<DensityFunction> arg1, DensityFunction arg2)",
			"fabric": "registerAndGetHolder(Registerable<DensityFunction> densityFunctionRegisterable, RegistryKey<DensityFunction> key, DensityFunction densityFunction)"
		},
		{
			"forge": "getFunction(HolderGetter<DensityFunction> arg0, ResourceKey<DensityFunction> arg1)",
			"fabric": "entryHolder(RegistryEntryLookup<DensityFunction> densityFunctionRegisterable, RegistryKey<DensityFunction> key)"
		},
		{
			"forge": "peaksAndValleys(DensityFunction arg0)",
			"fabric": "createRidgesFoldedOverworldFunction(DensityFunction input)"
		},
		{
			"forge": "peaksAndValleys(float arg0)",
			"fabric": "getPeaksValleysNoise(float weirdness)"
		},
		{
			"forge": "spaghettiRoughnessFunction(HolderGetter<NormalNoise$NoiseParameters> arg0)",
			"fabric": "createCavesSpaghettiRoughnessOverworldFunction(RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "entrances(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createCavesEntrancesOverworldFunction(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "noodle(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createCavesNoodleOverworldFunction(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "pillars(HolderGetter<NormalNoise$NoiseParameters> arg0)",
			"fabric": "createCavePillarsOverworldFunction(RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "spaghetti2D(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createCavesSpaghetti2dOverworldFunction(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "underground(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1, DensityFunction arg2)",
			"fabric": "createCavesFunction(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup, DensityFunction slopedCheese)"
		},
		{
			"forge": "postProcess(DensityFunction arg0)",
			"fabric": "applyBlendDensity(DensityFunction density)"
		},
		{
			"forge": "overworld(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1, boolean arg2, boolean arg3)",
			"fabric": "createSurfaceNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup, boolean largeBiomes, boolean amplified)"
		},
		{
			"forge": "noNewCaves(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1, DensityFunction arg2)",
			"fabric": "createMultiNoiseDependentNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup, DensityFunction density)"
		},
		{
			"forge": "slideOverworld(boolean arg0, DensityFunction arg1)",
			"fabric": "applySurfaceSlides(boolean amplified, DensityFunction density)"
		},
		{
			"forge": "slideNetherLike(HolderGetter<DensityFunction> arg0, int arg1, int arg2)",
			"fabric": "applyCavesSlides(RegistryEntryLookup<DensityFunction> densityFunctionLookup, int minY, int maxY)"
		},
		{
			"forge": "slideEndLike(DensityFunction arg0, int arg1, int arg2)",
			"fabric": "applyFloatingIslandsSlides(DensityFunction function, int minY, int maxY)"
		},
		{
			"forge": "nether(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createNetherNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "caves(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createCavesNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "floatingIslands(HolderGetter<DensityFunction> arg0, HolderGetter<NormalNoise$NoiseParameters> arg1)",
			"fabric": "createFloatingIslandsNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup, RegistryEntryLookup<DoublePerlinNoiseSampler$NoiseParameters> noiseParametersLookup)"
		},
		{
			"forge": "slideEnd(DensityFunction arg0)",
			"fabric": "applyEndSlides(DensityFunction slopedCheese)"
		},
		{
			"forge": "end(HolderGetter<DensityFunction> arg0)",
			"fabric": "createEndNoiseRouter(RegistryEntryLookup<DensityFunction> densityFunctionLookup)"
		},
		{
			"forge": "none()",
			"fabric": "createMissingNoiseRouter()"
		},
		{
			"forge": "splineWithBlending(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "applyBlending(DensityFunction function, DensityFunction blendOffset)"
		},
		{
			"forge": "noiseGradientDensity(DensityFunction arg0, DensityFunction arg1)",
			"fabric": "createInitialDensityFunction(DensityFunction factor, DensityFunction depth)"
		},
		{
			"forge": "yLimitedInterpolatable(DensityFunction arg0, DensityFunction arg1, int arg2, int arg3, int arg4)",
			"fabric": "verticalRangeChoice(DensityFunction y, DensityFunction whenInRange, int minInclusive, int maxInclusive, int whenOutOfRange)"
		},
		{
			"forge": "slide(DensityFunction arg0, int arg1, int arg2, int arg3, int arg4, double arg5, int arg6, int arg7, double arg8)",
			"fabric": "applySlides(DensityFunction density, int minY, int maxY, int topRelativeMinY, int topRelativeMaxY, double topDensity, int bottomRelativeMinY, int bottomRelativeMaxY, double bottomDensity)"
		}
	]
}