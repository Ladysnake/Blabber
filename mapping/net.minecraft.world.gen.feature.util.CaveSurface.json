{
	"title": "net.minecraft.world.level.levelgen.Column",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.Column",
			"fabric": "net.minecraft.world.gen.feature.util.CaveSurface"
		},
		{
			"forge": "around(int arg0, int arg1)",
			"fabric": "method_35326(int arg0, int arg1)"
		},
		{
			"forge": "around(int arg0, int arg1)",
			"fabric": "method_35326(int arg0, int arg1)"
		},
		{
			"forge": "inside(int arg0, int arg1)",
			"fabric": "createBounded(int floor, int ceiling)"
		},
		{
			"forge": "below(int arg0)",
			"fabric": "createHalfWithCeiling(int ceiling)"
		},
		{
			"forge": "fromHighest(int arg0)",
			"fabric": "method_35327(int arg0)"
		},
		{
			"forge": "above(int arg0)",
			"fabric": "createHalfWithFloor(int floor)"
		},
		{
			"forge": "fromLowest(int arg0)",
			"fabric": "method_35329(int arg0)"
		},
		{
			"forge": "line()",
			"fabric": "createEmpty()"
		},
		{
			"forge": "create(OptionalInt arg0, OptionalInt arg1)",
			"fabric": "create(OptionalInt ceilingHeight, OptionalInt floorHeight)"
		},
		{
			"forge": "getCeiling()",
			"fabric": "getCeilingHeight()"
		},
		{
			"forge": "getFloor()",
			"fabric": "getFloorHeight()"
		},
		{
			"forge": "getHeight()",
			"fabric": "getOptionalHeight()"
		},
		{
			"forge": "withFloor(OptionalInt arg0)",
			"fabric": "withFloor(OptionalInt floor)"
		},
		{
			"forge": "withCeiling(OptionalInt arg0)",
			"fabric": "withCeiling(OptionalInt ceiling)"
		},
		{
			"forge": "scan(LevelSimulatedReader arg0, BlockPos arg1, int arg2, Predicate<BlockState> arg3, Predicate<BlockState> arg4)",
			"fabric": "create(TestableWorld world, BlockPos pos, int height, Predicate<BlockState> canGenerate, Predicate<BlockState> canReplace)"
		},
		{
			"forge": "scanDirection(LevelSimulatedReader arg0, int arg1, Predicate<BlockState> arg2, Predicate<BlockState> arg3, BlockPos$MutableBlockPos arg4, int arg5, Direction arg6)",
			"fabric": "getCaveSurface(TestableWorld world, int height, Predicate<BlockState> canGenerate, Predicate<BlockState> canReplace, BlockPos$Mutable mutablePos, int y, Direction direction)"
		}
	]
}