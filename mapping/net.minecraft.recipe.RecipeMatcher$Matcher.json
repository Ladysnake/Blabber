{
	"title": "net.minecraft.world.entity.player.StackedContents$RecipePicker",
	"items": [
		{
			"forge": "net.minecraft.world.entity.player.StackedContents$RecipePicker",
			"fabric": "net.minecraft.recipe.RecipeMatcher$Matcher"
		},
		{
			"forge": "recipe",
			"fabric": "recipe"
		},
		{
			"forge": "recipe",
			"fabric": "recipe"
		},
		{
			"forge": "ingredients",
			"fabric": "ingredients"
		},
		{
			"forge": "ingredientCount",
			"fabric": "totalIngredients"
		},
		{
			"forge": "items",
			"fabric": "requiredItems"
		},
		{
			"forge": "itemCount",
			"fabric": "totalRequiredItems"
		},
		{
			"forge": "data",
			"fabric": "requirementsMatrix"
		},
		{
			"forge": "path",
			"fabric": "ingredientItemLookup"
		},
		{
			"forge": "tryPick(int arg0, it.unimi.dsi.fastutil.ints.IntList arg1)",
			"fabric": "match(int multiplier, it.unimi.dsi.fastutil.ints.IntList output)"
		},
		{
			"forge": "tryPick(int arg0, it.unimi.dsi.fastutil.ints.IntList arg1)",
			"fabric": "match(int multiplier, it.unimi.dsi.fastutil.ints.IntList output)"
		},
		{
			"forge": "getUniqueAvailableIngredientItems()",
			"fabric": "createItemRequirementList()"
		},
		{
			"forge": "dfs(int arg0)",
			"fabric": "checkRequirements(int multiplier)"
		},
		{
			"forge": "isSatisfied(int arg0)",
			"fabric": "getRequirement(int itemId)"
		},
		{
			"forge": "setSatisfied(int arg0)",
			"fabric": "unfulfillRequirement(int itemId)"
		},
		{
			"forge": "getSatisfiedIndex(int arg0)",
			"fabric": "getRequirementIndex(int itemId)"
		},
		{
			"forge": "hasConnection(boolean arg0, int arg1, int arg2)",
			"fabric": "needsRequirement(boolean reversed, int itemIndex, int ingredientIndex)"
		},
		{
			"forge": "hasResidual(boolean arg0, int arg1, int arg2)",
			"fabric": "checkRequirement(boolean reversed, int itemIndex, int ingredientIndex)"
		},
		{
			"forge": "toggleResidual(boolean arg0, int arg1, int arg2)",
			"fabric": "flipRequirement(boolean reversed, int itemIndex, int ingredientIndex)"
		},
		{
			"forge": "getIndex(boolean arg0, int arg1, int arg2)",
			"fabric": "getRequirementIndex(boolean reversed, int itemIndex, int ingredientIndex)"
		},
		{
			"forge": "visit(boolean arg0, int arg1)",
			"fabric": "addRequirement(boolean reversed, int itemId)"
		},
		{
			"forge": "hasVisited(boolean arg0, int arg1)",
			"fabric": "isRequirementUnfulfilled(boolean reversed, int itemId)"
		},
		{
			"forge": "getVisitedIndex(boolean arg0, int arg1)",
			"fabric": "getRequirementIndex(boolean reversed, int itemId)"
		},
		{
			"forge": "tryPickAll(int arg0, it.unimi.dsi.fastutil.ints.IntList arg1)",
			"fabric": "countCrafts(int minimum, it.unimi.dsi.fastutil.ints.IntList output)"
		},
		{
			"forge": "getMinIngredientCount()",
			"fabric": "getMaximumCrafts()"
		}
	]
}