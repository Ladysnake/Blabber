{
	"title": "com.mojang.blaze3d.platform.NativeImage",
	"items": [
		{
			"forge": "com.mojang.blaze3d.platform.NativeImage",
			"fabric": "net.minecraft.client.texture.NativeImage"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "OPEN_OPTIONS",
			"fabric": "WRITE_TO_FILE_OPEN_OPTIONS"
		},
		{
			"forge": "format",
			"fabric": "format"
		},
		{
			"forge": "width",
			"fabric": "width"
		},
		{
			"forge": "height",
			"fabric": "height"
		},
		{
			"forge": "useStbFree",
			"fabric": "isStbImage"
		},
		{
			"forge": "pixels",
			"fabric": "pointer"
		},
		{
			"forge": "size",
			"fabric": "sizeBytes"
		},
		{
			"forge": "isOutsideBounds(int arg0, int arg1)",
			"fabric": "isOutOfBounds(int x, int y)"
		},
		{
			"forge": "isOutsideBounds(int arg0, int arg1)",
			"fabric": "isOutOfBounds(int x, int y)"
		},
		{
			"forge": "read(InputStream arg0)",
			"fabric": "read(InputStream stream)"
		},
		{
			"forge": "read(NativeImage$Format arg0, InputStream arg1)",
			"fabric": "read(NativeImage$Format format, InputStream stream)"
		},
		{
			"forge": "read(ByteBuffer arg0)",
			"fabric": "read(ByteBuffer buffer)"
		},
		{
			"forge": "read(byte[] arg0)",
			"fabric": "read(byte[] bytes)"
		},
		{
			"forge": "read(NativeImage$Format arg0, ByteBuffer arg1)",
			"fabric": "read(NativeImage$Format format, ByteBuffer buffer)"
		},
		{
			"forge": "setFilter(boolean arg0, boolean arg1)",
			"fabric": "setTextureFilter(boolean blur, boolean mipmap)"
		},
		{
			"forge": "checkAllocated()",
			"fabric": "checkAllocated()"
		},
		{
			"forge": "getWidth()",
			"fabric": "getWidth()"
		},
		{
			"forge": "getHeight()",
			"fabric": "getHeight()"
		},
		{
			"forge": "format()",
			"fabric": "getFormat()"
		},
		{
			"forge": "getPixelRGBA(int arg0, int arg1)",
			"fabric": "getColor(int x, int y)"
		},
		{
			"forge": "setPixelRGBA(int arg0, int arg1, int arg2)",
			"fabric": "setColor(int x, int y, int color)"
		},
		{
			"forge": "mappedCopy(IntUnaryOperator arg0)",
			"fabric": "applyToCopy(IntUnaryOperator operator)"
		},
		{
			"forge": "applyToAllPixels(IntUnaryOperator arg0)",
			"fabric": "apply(IntUnaryOperator operator)"
		},
		{
			"forge": "getPixelsRGBA()",
			"fabric": "copyPixelsRgba()"
		},
		{
			"forge": "setPixelLuminance(int arg0, int arg1, byte arg2)",
			"fabric": "setLuminance(int x, int y, byte luminance)"
		},
		{
			"forge": "getRedOrLuminance(int arg0, int arg1)",
			"fabric": "getRed(int x, int y)"
		},
		{
			"forge": "getGreenOrLuminance(int arg0, int arg1)",
			"fabric": "getGreen(int x, int y)"
		},
		{
			"forge": "getBlueOrLuminance(int arg0, int arg1)",
			"fabric": "getBlue(int x, int y)"
		},
		{
			"forge": "getLuminanceOrAlpha(int arg0, int arg1)",
			"fabric": "getOpacity(int x, int y)"
		},
		{
			"forge": "blendPixel(int arg0, int arg1, int arg2)",
			"fabric": "blend(int x, int y, int color)"
		},
		{
			"forge": "makePixelArray()",
			"fabric": "makePixelArray()"
		},
		{
			"forge": "upload(int arg0, int arg1, int arg2, boolean arg3)",
			"fabric": "upload(int level, int offsetX, int offsetY, boolean close)"
		},
		{
			"forge": "upload(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8)",
			"fabric": "upload(int level, int offsetX, int offsetY, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean mipmap, boolean close)"
		},
		{
			"forge": "upload(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8, boolean arg9, boolean arg10)",
			"fabric": "upload(int level, int offsetX, int offsetY, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean blur, boolean clamp, boolean mipmap, boolean close)"
		},
		{
			"forge": "_upload(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8, boolean arg9, boolean arg10)",
			"fabric": "uploadInternal(int level, int offsetX, int offsetY, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean blur, boolean clamp, boolean mipmap, boolean close)"
		},
		{
			"forge": "downloadTexture(int arg0, boolean arg1)",
			"fabric": "loadFromTextureImage(int level, boolean removeAlpha)"
		},
		{
			"forge": "downloadDepthBuffer(float arg0)",
			"fabric": "readDepthComponent(float unused)"
		},
		{
			"forge": "drawPixels()",
			"fabric": "drawPixels()"
		},
		{
			"forge": "writeToFile(File arg0)",
			"fabric": "writeTo(File path)"
		},
		{
			"forge": "copyFromFont(org.lwjgl.stb.STBTTFontinfo arg0, int arg1, int arg2, int arg3, float arg4, float arg5, float arg6, float arg7, int arg8, int arg9)",
			"fabric": "makeGlyphBitmapSubpixel(org.lwjgl.stb.STBTTFontinfo fontInfo, int glyphIndex, int width, int height, float scaleX, float scaleY, float shiftX, float shiftY, int startX, int startY)"
		},
		{
			"forge": "writeToFile(Path arg0)",
			"fabric": "writeTo(Path path)"
		},
		{
			"forge": "asByteArray()",
			"fabric": "getBytes()"
		},
		{
			"forge": "writeToChannel(WritableByteChannel arg0)",
			"fabric": "write(WritableByteChannel channel)"
		},
		{
			"forge": "copyFrom(NativeImage arg0)",
			"fabric": "copyFrom(NativeImage image)"
		},
		{
			"forge": "fillRect(int arg0, int arg1, int arg2, int arg3, int arg4)",
			"fabric": "fillRect(int x, int y, int width, int height, int color)"
		},
		{
			"forge": "copyRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, boolean arg6, boolean arg7)",
			"fabric": "copyRect(int x, int y, int translateX, int translateY, int width, int height, boolean flipX, boolean flipY)"
		},
		{
			"forge": "copyRect(NativeImage arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8)",
			"fabric": "copyRect(NativeImage image, int x, int y, int destX, int destY, int width, int height, boolean flipX, boolean flipY)"
		},
		{
			"forge": "flipY()",
			"fabric": "mirrorVertically()"
		},
		{
			"forge": "resizeSubRectTo(int arg0, int arg1, int arg2, int arg3, NativeImage arg4)",
			"fabric": "resizeSubRectTo(int x, int y, int width, int height, NativeImage targetImage)"
		},
		{
			"forge": "untrack()",
			"fabric": "untrack()"
		}
	]
}