{
	"title": "net.minecraft.world.level.block.entity.SkullBlockEntity",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.entity.SkullBlockEntity",
			"fabric": "net.minecraft.block.entity.SkullBlockEntity"
		},
		{
			"forge": "TAG_SKULL_OWNER",
			"fabric": "SKULL_OWNER_KEY"
		},
		{
			"forge": "TAG_SKULL_OWNER",
			"fabric": "SKULL_OWNER_KEY"
		},
		{
			"forge": "TAG_NOTE_BLOCK_SOUND",
			"fabric": "NOTE_BLOCK_SOUND_KEY"
		},
		{
			"forge": "profileCache",
			"fabric": "userCache"
		},
		{
			"forge": "sessionService",
			"fabric": "sessionService"
		},
		{
			"forge": "mainThreadExecutor",
			"fabric": "executor"
		},
		{
			"forge": "owner",
			"fabric": "owner"
		},
		{
			"forge": "noteBlockSound",
			"fabric": "noteBlockSound"
		},
		{
			"forge": "animationTickCount",
			"fabric": "poweredTicks"
		},
		{
			"forge": "isAnimating",
			"fabric": "powered"
		},
		{
			"forge": "setup(Services arg0, Executor arg1)",
			"fabric": "setServices(ApiServices apiServices, Executor executor)"
		},
		{
			"forge": "setup(Services arg0, Executor arg1)",
			"fabric": "setServices(ApiServices apiServices, Executor executor)"
		},
		{
			"forge": "clear()",
			"fabric": "clearServices()"
		},
		{
			"forge": "saveAdditional(CompoundTag arg0)",
			"fabric": "writeNbt(NbtCompound arg0)"
		},
		{
			"forge": "load(CompoundTag arg0)",
			"fabric": "readNbt(NbtCompound arg0)"
		},
		{
			"forge": "animation(Level arg0, BlockPos arg1, BlockState arg2, SkullBlockEntity arg3)",
			"fabric": "tick(World world, BlockPos pos, BlockState state, SkullBlockEntity blockEntity)"
		},
		{
			"forge": "getAnimation(float arg0)",
			"fabric": "getPoweredTicks(float tickDelta)"
		},
		{
			"forge": "getOwnerProfile()",
			"fabric": "getOwner()"
		},
		{
			"forge": "getNoteBlockSound()",
			"fabric": "getNoteBlockSound()"
		},
		{
			"forge": "getUpdatePacket()",
			"fabric": "toUpdatePacket()"
		},
		{
			"forge": "getUpdateTag()",
			"fabric": "toInitialChunkDataNbt()"
		},
		{
			"forge": "setOwner(com.mojang.authlib.GameProfile arg0)",
			"fabric": "setOwner(com.mojang.authlib.GameProfile owner)"
		},
		{
			"forge": "updateOwnerProfile()",
			"fabric": "loadOwnerProperties()"
		},
		{
			"forge": "updateGameprofile(com.mojang.authlib.GameProfile arg0, Consumer<com.mojang.authlib.GameProfile> arg1)",
			"fabric": "loadProperties(com.mojang.authlib.GameProfile owner, Consumer<com.mojang.authlib.GameProfile> callback)"
		}
	]
}