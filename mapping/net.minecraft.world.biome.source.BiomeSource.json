{
	"title": "net.minecraft.world.level.biome.BiomeSource",
	"items": [
		{
			"forge": "net.minecraft.world.level.biome.BiomeSource",
			"fabric": "net.minecraft.world.biome.source.BiomeSource"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "possibleBiomes",
			"fabric": "biomes"
		},
		{
			"forge": "codec()",
			"fabric": "getCodec()"
		},
		{
			"forge": "codec()",
			"fabric": "getCodec()"
		},
		{
			"forge": "collectPossibleBiomes()",
			"fabric": "biomeStream()"
		},
		{
			"forge": "possibleBiomes()",
			"fabric": "getBiomes()"
		},
		{
			"forge": "getBiomesWithin(int arg0, int arg1, int arg2, int arg3, Climate$Sampler arg4)",
			"fabric": "getBiomesInArea(int x, int y, int z, int radius, MultiNoiseUtil$MultiNoiseSampler sampler)"
		},
		{
			"forge": "findBiomeHorizontal(int arg0, int arg1, int arg2, int arg3, Predicate<Holder<Biome>> arg4, RandomSource arg5, Climate$Sampler arg6)",
			"fabric": "locateBiome(int x, int y, int z, int radius, Predicate<RegistryEntry<Biome>> predicate, Random random, MultiNoiseUtil$MultiNoiseSampler noiseSampler)"
		},
		{
			"forge": "findClosestBiome3d(BlockPos arg0, int arg1, int arg2, int arg3, Predicate<Holder<Biome>> arg4, Climate$Sampler arg5, LevelReader arg6)",
			"fabric": "locateBiome(BlockPos origin, int radius, int horizontalBlockCheckInterval, int verticalBlockCheckInterval, Predicate<RegistryEntry<Biome>> predicate, MultiNoiseUtil$MultiNoiseSampler noiseSampler, WorldView world)"
		},
		{
			"forge": "findBiomeHorizontal(int arg0, int arg1, int arg2, int arg3, int arg4, Predicate<Holder<Biome>> arg5, RandomSource arg6, boolean arg7, Climate$Sampler arg8)",
			"fabric": "locateBiome(int x, int y, int z, int radius, int blockCheckInterval, Predicate<RegistryEntry<Biome>> predicate, Random random, boolean arg7, MultiNoiseUtil$MultiNoiseSampler noiseSampler)"
		},
		{
			"forge": "getNoiseBiome(int arg0, int arg1, int arg2, Climate$Sampler arg3)",
			"fabric": "getBiome(int arg0, int arg1, int arg2, MultiNoiseUtil$MultiNoiseSampler arg3)"
		},
		{
			"forge": "addDebugInfo(List<String> arg0, BlockPos arg1, Climate$Sampler arg2)",
			"fabric": "addDebugInfo(List<String> info, BlockPos pos, MultiNoiseUtil$MultiNoiseSampler noiseSampler)"
		}
	]
}