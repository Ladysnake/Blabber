{
	"title": "net.minecraft.world.level.block.SculkSensorBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.SculkSensorBlock",
			"fabric": "net.minecraft.block.SculkSensorBlock"
		},
		{
			"forge": "ACTIVE_TICKS",
			"fabric": "field_31239"
		},
		{
			"forge": "ACTIVE_TICKS",
			"fabric": "field_31239"
		},
		{
			"forge": "COOLDOWN_TICKS",
			"fabric": "field_44607"
		},
		{
			"forge": "PHASE",
			"fabric": "SCULK_SENSOR_PHASE"
		},
		{
			"forge": "POWER",
			"fabric": "POWER"
		},
		{
			"forge": "WATERLOGGED",
			"fabric": "WATERLOGGED"
		},
		{
			"forge": "SHAPE",
			"fabric": "OUTLINE_SHAPE"
		},
		{
			"forge": "RESONANCE_PITCH_BEND",
			"fabric": "RESONATION_NOTE_PITCHES"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext arg0)"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext arg0)"
		},
		{
			"forge": "getFluidState(BlockState arg0)",
			"fabric": "getFluidState(BlockState arg0)"
		},
		{
			"forge": "tick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "scheduledTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "stepOn(Level arg0, BlockPos arg1, BlockState arg2, Entity arg3)",
			"fabric": "onSteppedOn(World arg0, BlockPos arg1, BlockState arg2, Entity arg3)"
		},
		{
			"forge": "onPlace(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onBlockAdded(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "onRemove(BlockState arg0, Level arg1, BlockPos arg2, BlockState arg3, boolean arg4)",
			"fabric": "onStateReplaced(BlockState arg0, World arg1, BlockPos arg2, BlockState arg3, boolean arg4)"
		},
		{
			"forge": "updateShape(BlockState arg0, Direction arg1, BlockState arg2, LevelAccessor arg3, BlockPos arg4, BlockPos arg5)",
			"fabric": "getStateForNeighborUpdate(BlockState arg0, Direction arg1, BlockState arg2, WorldAccess arg3, BlockPos arg4, BlockPos arg5)"
		},
		{
			"forge": "updateNeighbours(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "updateNeighbors(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "newBlockEntity(BlockPos arg0, BlockState arg1)",
			"fabric": "createBlockEntity(BlockPos arg0, BlockState arg1)"
		},
		{
			"forge": "getTicker(Level arg0, BlockState arg1, BlockEntityType<T> arg2)",
			"fabric": "getTicker(World arg0, BlockState arg1, BlockEntityType<T> arg2)"
		},
		{
			"forge": "getRenderShape(BlockState arg0)",
			"fabric": "getRenderType(BlockState arg0)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "isSignalSource(BlockState arg0)",
			"fabric": "emitsRedstonePower(BlockState arg0)"
		},
		{
			"forge": "getSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getWeakRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "getDirectSignal(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3)",
			"fabric": "getStrongRedstonePower(BlockState arg0, BlockView arg1, BlockPos arg2, Direction arg3)"
		},
		{
			"forge": "getPhase(BlockState arg0)",
			"fabric": "getPhase(BlockState state)"
		},
		{
			"forge": "canActivate(BlockState arg0)",
			"fabric": "isInactive(BlockState state)"
		},
		{
			"forge": "deactivate(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "setCooldown(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getActiveTicks()",
			"fabric": "getCooldownTime()"
		},
		{
			"forge": "activate(Entity arg0, Level arg1, BlockPos arg2, BlockState arg3, int arg4, int arg5)",
			"fabric": "setActive(Entity sourceEntity, World world, BlockPos pos, BlockState state, int power, int frequency)"
		},
		{
			"forge": "tryResonateVibration(Entity arg0, Level arg1, BlockPos arg2, int arg3)",
			"fabric": "tryResonate(Entity sourceEntity, World world, BlockPos pos, int frequency)"
		},
		{
			"forge": "animateTick(BlockState arg0, Level arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "randomDisplayTick(BlockState arg0, World arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> arg0)"
		},
		{
			"forge": "hasAnalogOutputSignal(BlockState arg0)",
			"fabric": "hasComparatorOutput(BlockState arg0)"
		},
		{
			"forge": "getAnalogOutputSignal(BlockState arg0, Level arg1, BlockPos arg2)",
			"fabric": "getComparatorOutput(BlockState arg0, World arg1, BlockPos arg2)"
		},
		{
			"forge": "isPathfindable(BlockState arg0, BlockGetter arg1, BlockPos arg2, PathComputationType arg3)",
			"fabric": "canPathfindThrough(BlockState arg0, BlockView arg1, BlockPos arg2, NavigationType arg3)"
		},
		{
			"forge": "useShapeForLightOcclusion(BlockState arg0)",
			"fabric": "hasSidedTransparency(BlockState arg0)"
		},
		{
			"forge": "spawnAfterBreak(BlockState arg0, ServerLevel arg1, BlockPos arg2, ItemStack arg3, boolean arg4)",
			"fabric": "onStacksDropped(BlockState arg0, ServerWorld arg1, BlockPos arg2, ItemStack arg3, boolean arg4)"
		}
	]
}