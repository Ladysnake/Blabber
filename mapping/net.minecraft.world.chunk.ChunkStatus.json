{
	"title": "net.minecraft.world.level.chunk.ChunkStatus",
	"items": [
		{
			"forge": "net.minecraft.world.level.chunk.ChunkStatus",
			"fabric": "net.minecraft.world.chunk.ChunkStatus"
		},
		{
			"forge": "MAX_STRUCTURE_DISTANCE",
			"fabric": "field_35470"
		},
		{
			"forge": "MAX_STRUCTURE_DISTANCE",
			"fabric": "field_35470"
		},
		{
			"forge": "PRE_FEATURES",
			"fabric": "PRE_CARVER_HEIGHTMAPS"
		},
		{
			"forge": "POST_FEATURES",
			"fabric": "POST_CARVER_HEIGHTMAPS"
		},
		{
			"forge": "PASSTHROUGH_LOAD_TASK",
			"fabric": "STATUS_BUMP_LOAD_TASK"
		},
		{
			"forge": "EMPTY",
			"fabric": "EMPTY"
		},
		{
			"forge": "STRUCTURE_STARTS",
			"fabric": "STRUCTURE_STARTS"
		},
		{
			"forge": "STRUCTURE_REFERENCES",
			"fabric": "STRUCTURE_REFERENCES"
		},
		{
			"forge": "BIOMES",
			"fabric": "BIOMES"
		},
		{
			"forge": "NOISE",
			"fabric": "NOISE"
		},
		{
			"forge": "SURFACE",
			"fabric": "SURFACE"
		},
		{
			"forge": "CARVERS",
			"fabric": "CARVERS"
		},
		{
			"forge": "FEATURES",
			"fabric": "FEATURES"
		},
		{
			"forge": "INITIALIZE_LIGHT",
			"fabric": "INITIALIZE_LIGHT"
		},
		{
			"forge": "LIGHT",
			"fabric": "LIGHT"
		},
		{
			"forge": "SPAWN",
			"fabric": "SPAWN"
		},
		{
			"forge": "FULL",
			"fabric": "FULL"
		},
		{
			"forge": "STATUS_BY_RANGE",
			"fabric": "DISTANCE_TO_STATUS"
		},
		{
			"forge": "RANGE_BY_STATUS",
			"fabric": "STATUS_TO_DISTANCE"
		},
		{
			"forge": "index",
			"fabric": "index"
		},
		{
			"forge": "parent",
			"fabric": "previous"
		},
		{
			"forge": "generationTask",
			"fabric": "generationTask"
		},
		{
			"forge": "loadingTask",
			"fabric": "loadTask"
		},
		{
			"forge": "range",
			"fabric": "taskMargin"
		},
		{
			"forge": "hasLoadDependencies",
			"fabric": "shouldAlwaysUpgrade"
		},
		{
			"forge": "chunkType",
			"fabric": "chunkType"
		},
		{
			"forge": "heightmapsAfter",
			"fabric": "heightMapTypes"
		},
		{
			"forge": "initializeLight(ThreadedLevelLightEngine arg0, ChunkAccess arg1)",
			"fabric": "getInitializeLightingFuture(ServerLightingProvider lightingProvider, Chunk chunk)"
		},
		{
			"forge": "initializeLight(ThreadedLevelLightEngine arg0, ChunkAccess arg1)",
			"fabric": "getInitializeLightingFuture(ServerLightingProvider lightingProvider, Chunk chunk)"
		},
		{
			"forge": "lightChunk(ThreadedLevelLightEngine arg0, ChunkAccess arg1)",
			"fabric": "getLightingFuture(ServerLightingProvider lightingProvider, Chunk chunk)"
		},
		{
			"forge": "registerSimple(String arg0, ChunkStatus arg1, int arg2, EnumSet<Heightmap$Types> arg3, ChunkStatus$ChunkType arg4, ChunkStatus$SimpleGenerationTask arg5)",
			"fabric": "register(String id, ChunkStatus previous, int taskMargin, EnumSet<Heightmap$Type> heightMapTypes, ChunkStatus$ChunkType chunkType, ChunkStatus$SimpleGenerationTask task)"
		},
		{
			"forge": "register(String arg0, ChunkStatus arg1, int arg2, EnumSet<Heightmap$Types> arg3, ChunkStatus$ChunkType arg4, ChunkStatus$GenerationTask arg5)",
			"fabric": "register(String id, ChunkStatus previous, int taskMargin, EnumSet<Heightmap$Type> heightMapTypes, ChunkStatus$ChunkType chunkType, ChunkStatus$GenerationTask task)"
		},
		{
			"forge": "register(String arg0, ChunkStatus arg1, int arg2, boolean arg3, EnumSet<Heightmap$Types> arg4, ChunkStatus$ChunkType arg5, ChunkStatus$GenerationTask arg6, ChunkStatus$LoadingTask arg7)",
			"fabric": "register(String id, ChunkStatus previous, int taskMargin, boolean shouldAlwaysUpgrade, EnumSet<Heightmap$Type> heightMapTypes, ChunkStatus$ChunkType chunkType, ChunkStatus$GenerationTask generationTask, ChunkStatus$LoadTask loadTask)"
		},
		{
			"forge": "getStatusList()",
			"fabric": "createOrderedList()"
		},
		{
			"forge": "isLighted(ChunkAccess arg0)",
			"fabric": "shouldExcludeBlockLight(Chunk chunk)"
		},
		{
			"forge": "getStatusAroundFullChunk(int arg0)",
			"fabric": "byDistanceFromFull(int level)"
		},
		{
			"forge": "maxDistance()",
			"fabric": "getMaxDistanceFromFull()"
		},
		{
			"forge": "getDistance(ChunkStatus arg0)",
			"fabric": "getDistanceFromFull(ChunkStatus status)"
		},
		{
			"forge": "getIndex()",
			"fabric": "getIndex()"
		},
		{
			"forge": "getParent()",
			"fabric": "getPrevious()"
		},
		{
			"forge": "generate(Executor arg0, ServerLevel arg1, ChunkGenerator arg2, StructureTemplateManager arg3, ThreadedLevelLightEngine arg4, Function<ChunkAccess, CompletableFuture<com.mojang.datafixers.util.Either<ChunkAccess, ChunkHolder$ChunkLoadingFailure>>> arg5, List<ChunkAccess> arg6)",
			"fabric": "runGenerationTask(Executor executor, ServerWorld world, ChunkGenerator generator, StructureTemplateManager structureTemplateManager, ServerLightingProvider lightingProvider, Function<Chunk, CompletableFuture<com.mojang.datafixers.util.Either<Chunk, ChunkHolder$Unloaded>>> fullChunkConverter, List<Chunk> chunks)"
		},
		{
			"forge": "load(ServerLevel arg0, StructureTemplateManager arg1, ThreadedLevelLightEngine arg2, Function<ChunkAccess, CompletableFuture<com.mojang.datafixers.util.Either<ChunkAccess, ChunkHolder$ChunkLoadingFailure>>> arg3, ChunkAccess arg4)",
			"fabric": "runLoadTask(ServerWorld world, StructureTemplateManager structureTemplateManager, ServerLightingProvider lightingProvider, Function<Chunk, CompletableFuture<com.mojang.datafixers.util.Either<Chunk, ChunkHolder$Unloaded>>> fullChunkConverter, Chunk chunk)"
		},
		{
			"forge": "getRange()",
			"fabric": "getTaskMargin()"
		},
		{
			"forge": "hasLoadDependencies()",
			"fabric": "shouldAlwaysUpgrade()"
		},
		{
			"forge": "getChunkType()",
			"fabric": "getChunkType()"
		},
		{
			"forge": "byName(String arg0)",
			"fabric": "byId(String id)"
		},
		{
			"forge": "heightmapsAfter()",
			"fabric": "getHeightmapTypes()"
		},
		{
			"forge": "isOrAfter(ChunkStatus arg0)",
			"fabric": "isAtLeast(ChunkStatus chunkStatus)"
		}
	]
}