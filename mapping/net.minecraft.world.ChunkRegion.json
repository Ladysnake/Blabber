{
	"title": "net.minecraft.server.level.WorldGenRegion",
	"items": [
		{
			"forge": "net.minecraft.server.level.WorldGenRegion",
			"fabric": "net.minecraft.world.ChunkRegion"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "cache",
			"fabric": "chunks"
		},
		{
			"forge": "center",
			"fabric": "centerPos"
		},
		{
			"forge": "size",
			"fabric": "width"
		},
		{
			"forge": "level",
			"fabric": "world"
		},
		{
			"forge": "seed",
			"fabric": "seed"
		},
		{
			"forge": "levelData",
			"fabric": "levelProperties"
		},
		{
			"forge": "random",
			"fabric": "random"
		},
		{
			"forge": "dimensionType",
			"fabric": "dimension"
		},
		{
			"forge": "blockTicks",
			"fabric": "blockTickScheduler"
		},
		{
			"forge": "fluidTicks",
			"fabric": "fluidTickScheduler"
		},
		{
			"forge": "biomeManager",
			"fabric": "biomeAccess"
		},
		{
			"forge": "firstPos",
			"fabric": "lowerCorner"
		},
		{
			"forge": "lastPos",
			"fabric": "upperCorner"
		},
		{
			"forge": "structureManager",
			"fabric": "structureAccessor"
		},
		{
			"forge": "generatingStatus",
			"fabric": "status"
		},
		{
			"forge": "writeRadiusCutoff",
			"fabric": "placementRadius"
		},
		{
			"forge": "currentlyGenerating",
			"fabric": "currentlyGeneratingStructureName"
		},
		{
			"forge": "subTickCount",
			"fabric": "tickOrder"
		},
		{
			"forge": "WORLDGEN_REGION_RANDOM",
			"fabric": "WORLDGEN_REGION_RANDOM_ID"
		},
		{
			"forge": "isOldChunkAround(ChunkPos arg0, int arg1)",
			"fabric": "needsBlending(ChunkPos chunkPos, int checkRadius)"
		},
		{
			"forge": "isOldChunkAround(ChunkPos arg0, int arg1)",
			"fabric": "needsBlending(ChunkPos chunkPos, int checkRadius)"
		},
		{
			"forge": "getCenter()",
			"fabric": "getCenterPos()"
		},
		{
			"forge": "setCurrentlyGenerating(Supplier<String> arg0)",
			"fabric": "setCurrentlyGeneratingStructureName(Supplier<String> arg0)"
		},
		{
			"forge": "getChunk(int arg0, int arg1)",
			"fabric": "getChunk(int arg0, int arg1)"
		},
		{
			"forge": "getChunk(int arg0, int arg1, ChunkStatus arg2, boolean arg3)",
			"fabric": "getChunk(int arg0, int arg1, ChunkStatus arg2, boolean arg3)"
		},
		{
			"forge": "hasChunk(int arg0, int arg1)",
			"fabric": "isChunkLoaded(int arg0, int arg1)"
		},
		{
			"forge": "getBlockState(BlockPos arg0)",
			"fabric": "getBlockState(BlockPos arg0)"
		},
		{
			"forge": "getFluidState(BlockPos arg0)",
			"fabric": "getFluidState(BlockPos arg0)"
		},
		{
			"forge": "getNearestPlayer(double arg0, double arg1, double arg2, double arg3, Predicate<Entity> arg4)",
			"fabric": "getClosestPlayer(double arg0, double arg1, double arg2, double arg3, Predicate<Entity> arg4)"
		},
		{
			"forge": "getSkyDarken()",
			"fabric": "getAmbientDarkness()"
		},
		{
			"forge": "getBiomeManager()",
			"fabric": "getBiomeAccess()"
		},
		{
			"forge": "getUncachedNoiseBiome(int arg0, int arg1, int arg2)",
			"fabric": "getGeneratorStoredBiome(int arg0, int arg1, int arg2)"
		},
		{
			"forge": "getShade(Direction arg0, boolean arg1)",
			"fabric": "getBrightness(Direction arg0, boolean arg1)"
		},
		{
			"forge": "getLightEngine()",
			"fabric": "getLightingProvider()"
		},
		{
			"forge": "destroyBlock(BlockPos arg0, boolean arg1, Entity arg2, int arg3)",
			"fabric": "breakBlock(BlockPos arg0, boolean arg1, Entity arg2, int arg3)"
		},
		{
			"forge": "getBlockEntity(BlockPos arg0)",
			"fabric": "getBlockEntity(BlockPos arg0)"
		},
		{
			"forge": "ensureCanWrite(BlockPos arg0)",
			"fabric": "isValidForSetBlock(BlockPos arg0)"
		},
		{
			"forge": "setBlock(BlockPos arg0, BlockState arg1, int arg2, int arg3)",
			"fabric": "setBlockState(BlockPos arg0, BlockState arg1, int arg2, int arg3)"
		},
		{
			"forge": "markPosForPostprocessing(BlockPos arg0)",
			"fabric": "markBlockForPostProcessing(BlockPos pos)"
		},
		{
			"forge": "addFreshEntity(Entity arg0)",
			"fabric": "spawnEntity(Entity arg0)"
		},
		{
			"forge": "removeBlock(BlockPos arg0, boolean arg1)",
			"fabric": "removeBlock(BlockPos arg0, boolean arg1)"
		},
		{
			"forge": "getWorldBorder()",
			"fabric": "getWorldBorder()"
		},
		{
			"forge": "isClientSide()",
			"fabric": "isClient()"
		},
		{
			"forge": "getLevel()",
			"fabric": "toServerWorld()"
		},
		{
			"forge": "registryAccess()",
			"fabric": "getRegistryManager()"
		},
		{
			"forge": "enabledFeatures()",
			"fabric": "getEnabledFeatures()"
		},
		{
			"forge": "getLevelData()",
			"fabric": "getLevelProperties()"
		},
		{
			"forge": "getCurrentDifficultyAt(BlockPos arg0)",
			"fabric": "getLocalDifficulty(BlockPos arg0)"
		},
		{
			"forge": "getServer()",
			"fabric": "getServer()"
		},
		{
			"forge": "getChunkSource()",
			"fabric": "getChunkManager()"
		},
		{
			"forge": "getSeed()",
			"fabric": "getSeed()"
		},
		{
			"forge": "getBlockTicks()",
			"fabric": "getBlockTickScheduler()"
		},
		{
			"forge": "getFluidTicks()",
			"fabric": "getFluidTickScheduler()"
		},
		{
			"forge": "getSeaLevel()",
			"fabric": "getSeaLevel()"
		},
		{
			"forge": "getRandom()",
			"fabric": "getRandom()"
		},
		{
			"forge": "getHeight(Heightmap$Types arg0, int arg1, int arg2)",
			"fabric": "getTopY(Heightmap$Type arg0, int arg1, int arg2)"
		},
		{
			"forge": "playSound(Player arg0, BlockPos arg1, SoundEvent arg2, SoundSource arg3, float arg4, float arg5)",
			"fabric": "playSound(PlayerEntity arg0, BlockPos arg1, SoundEvent arg2, SoundCategory arg3, float arg4, float arg5)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)",
			"fabric": "addParticle(ParticleEffect arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)"
		},
		{
			"forge": "levelEvent(Player arg0, int arg1, BlockPos arg2, int arg3)",
			"fabric": "syncWorldEvent(PlayerEntity arg0, int arg1, BlockPos arg2, int arg3)"
		},
		{
			"forge": "gameEvent(GameEvent arg0, Vec3 arg1, GameEvent$Context arg2)",
			"fabric": "emitGameEvent(GameEvent arg0, Vec3d arg1, GameEvent$Emitter arg2)"
		},
		{
			"forge": "dimensionType()",
			"fabric": "getDimension()"
		},
		{
			"forge": "isStateAtPosition(BlockPos arg0, Predicate<BlockState> arg1)",
			"fabric": "testBlockState(BlockPos arg0, Predicate<BlockState> arg1)"
		},
		{
			"forge": "isFluidAtPosition(BlockPos arg0, Predicate<FluidState> arg1)",
			"fabric": "testFluidState(BlockPos arg0, Predicate<FluidState> arg1)"
		},
		{
			"forge": "getEntities(EntityTypeTest<Entity, T> arg0, AABB arg1, Predicate<? super T> arg2)",
			"fabric": "getEntitiesByType(TypeFilter<Entity, T> arg0, Box arg1, Predicate<? super T> arg2)"
		},
		{
			"forge": "getEntities(Entity arg0, AABB arg1, Predicate<? super Entity> arg2)",
			"fabric": "getOtherEntities(Entity arg0, Box arg1, Predicate<? super Entity> arg2)"
		},
		{
			"forge": "players()",
			"fabric": "getPlayers()"
		},
		{
			"forge": "getMinBuildHeight()",
			"fabric": "getBottomY()"
		},
		{
			"forge": "getHeight()",
			"fabric": "getHeight()"
		},
		{
			"forge": "nextSubTickCount()",
			"fabric": "getTickOrder()"
		}
	]
}