{
	"title": "net.minecraft.world.entity.ai.village.poi.PoiManager",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.village.poi.PoiManager",
			"fabric": "net.minecraft.world.poi.PointOfInterestStorage"
		},
		{
			"forge": "MAX_VILLAGE_DISTANCE",
			"fabric": "field_30265"
		},
		{
			"forge": "MAX_VILLAGE_DISTANCE",
			"fabric": "field_30265"
		},
		{
			"forge": "VILLAGE_SECTION_SIZE",
			"fabric": "field_30266"
		},
		{
			"forge": "distanceTracker",
			"fabric": "pointOfInterestDistanceTracker"
		},
		{
			"forge": "loadedChunks",
			"fabric": "preloadedChunks"
		},
		{
			"forge": "add(BlockPos arg0, Holder<PoiType> arg1)",
			"fabric": "add(BlockPos pos, RegistryEntry<PointOfInterestType> type)"
		},
		{
			"forge": "add(BlockPos arg0, Holder<PoiType> arg1)",
			"fabric": "add(BlockPos pos, RegistryEntry<PointOfInterestType> type)"
		},
		{
			"forge": "remove(BlockPos arg0)",
			"fabric": "remove(BlockPos pos)"
		},
		{
			"forge": "getCountInRange(Predicate<Holder<PoiType>> arg0, BlockPos arg1, int arg2, PoiManager$Occupancy arg3)",
			"fabric": "count(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "existsAtPosition(ResourceKey<PoiType> arg0, BlockPos arg1)",
			"fabric": "hasTypeAt(RegistryKey<PointOfInterestType> type, BlockPos pos)"
		},
		{
			"forge": "getInSquare(Predicate<Holder<PoiType>> arg0, BlockPos arg1, int arg2, PoiManager$Occupancy arg3)",
			"fabric": "getInSquare(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "getInRange(Predicate<Holder<PoiType>> arg0, BlockPos arg1, int arg2, PoiManager$Occupancy arg3)",
			"fabric": "getInCircle(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "getInChunk(Predicate<Holder<PoiType>> arg0, ChunkPos arg1, PoiManager$Occupancy arg2)",
			"fabric": "getInChunk(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, ChunkPos chunkPos, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findAll(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, BlockPos arg2, int arg3, PoiManager$Occupancy arg4)",
			"fabric": "getPositions(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> posPredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findAllWithType(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, BlockPos arg2, int arg3, PoiManager$Occupancy arg4)",
			"fabric": "getTypesAndPositions(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> posPredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findAllClosestFirstWithType(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, BlockPos arg2, int arg3, PoiManager$Occupancy arg4)",
			"fabric": "getSortedTypesAndPositions(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> posPredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "find(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, BlockPos arg2, int arg3, PoiManager$Occupancy arg4)",
			"fabric": "getPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> posPredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findClosest(Predicate<Holder<PoiType>> arg0, BlockPos arg1, int arg2, PoiManager$Occupancy arg3)",
			"fabric": "getNearestPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findClosestWithType(Predicate<Holder<PoiType>> arg0, BlockPos arg1, int arg2, PoiManager$Occupancy arg3)",
			"fabric": "getNearestTypeAndPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "findClosest(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, BlockPos arg2, int arg3, PoiManager$Occupancy arg4)",
			"fabric": "getNearestPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> posPredicate, BlockPos pos, int radius, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "take(Predicate<Holder<PoiType>> arg0, BiPredicate<Holder<PoiType>, BlockPos> arg1, BlockPos arg2, int arg3)",
			"fabric": "getPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, BiPredicate<RegistryEntry<PointOfInterestType>, BlockPos> arg1, BlockPos pos, int radius)"
		},
		{
			"forge": "getRandom(Predicate<Holder<PoiType>> arg0, Predicate<BlockPos> arg1, PoiManager$Occupancy arg2, BlockPos arg3, int arg4, RandomSource arg5)",
			"fabric": "getPosition(Predicate<RegistryEntry<PointOfInterestType>> typePredicate, Predicate<BlockPos> positionPredicate, PointOfInterestStorage$OccupationStatus occupationStatus, BlockPos pos, int radius, Random random)"
		},
		{
			"forge": "release(BlockPos arg0)",
			"fabric": "releaseTicket(BlockPos pos)"
		},
		{
			"forge": "exists(BlockPos arg0, Predicate<Holder<PoiType>> arg1)",
			"fabric": "test(BlockPos pos, Predicate<RegistryEntry<PointOfInterestType>> predicate)"
		},
		{
			"forge": "getType(BlockPos arg0)",
			"fabric": "getType(BlockPos pos)"
		},
		{
			"forge": "getFreeTickets(BlockPos arg0)",
			"fabric": "getFreeTickets(BlockPos pos)"
		},
		{
			"forge": "sectionsToVillage(SectionPos arg0)",
			"fabric": "getDistanceFromNearestOccupied(ChunkSectionPos pos)"
		},
		{
			"forge": "isVillageCenter(long arg0)",
			"fabric": "isOccupied(long pos)"
		},
		{
			"forge": "tick(BooleanSupplier arg0)",
			"fabric": "tick(BooleanSupplier arg0)"
		},
		{
			"forge": "setDirty(long arg0)",
			"fabric": "onUpdate(long arg0)"
		},
		{
			"forge": "onSectionLoad(long arg0)",
			"fabric": "onLoad(long arg0)"
		},
		{
			"forge": "checkConsistencyWithBlocks(SectionPos arg0, LevelChunkSection arg1)",
			"fabric": "initForPalette(ChunkSectionPos sectionPos, ChunkSection chunkSection)"
		},
		{
			"forge": "mayHavePoi(LevelChunkSection arg0)",
			"fabric": "shouldScan(ChunkSection chunkSection)"
		},
		{
			"forge": "updateFromSection(LevelChunkSection arg0, SectionPos arg1, BiConsumer<BlockPos, Holder<PoiType>> arg2)",
			"fabric": "scanAndPopulate(ChunkSection chunkSection, ChunkSectionPos sectionPos, BiConsumer<BlockPos, RegistryEntry<PointOfInterestType>> populator)"
		},
		{
			"forge": "ensureLoadedAndValid(LevelReader arg0, BlockPos arg1, int arg2)",
			"fabric": "preloadChunks(WorldView world, BlockPos pos, int radius)"
		}
	]
}