{
	"title": "net.minecraft.world.entity.monster.Monster",
	"items": [
		{
			"forge": "net.minecraft.world.entity.monster.Monster",
			"fabric": "net.minecraft.entity.mob.HostileEntity"
		},
		{
			"forge": "getSoundSource()",
			"fabric": "getSoundCategory()"
		},
		{
			"forge": "getSoundSource()",
			"fabric": "getSoundCategory()"
		},
		{
			"forge": "aiStep()",
			"fabric": "tickMovement()"
		},
		{
			"forge": "updateNoActionTime()",
			"fabric": "updateDespawnCounter()"
		},
		{
			"forge": "shouldDespawnInPeaceful()",
			"fabric": "isDisallowedInPeaceful()"
		},
		{
			"forge": "getSwimSound()",
			"fabric": "getSwimSound()"
		},
		{
			"forge": "getSwimSplashSound()",
			"fabric": "getSplashSound()"
		},
		{
			"forge": "getHurtSound(DamageSource arg0)",
			"fabric": "getHurtSound(DamageSource arg0)"
		},
		{
			"forge": "getDeathSound()",
			"fabric": "getDeathSound()"
		},
		{
			"forge": "getFallSounds()",
			"fabric": "getFallSounds()"
		},
		{
			"forge": "getWalkTargetValue(BlockPos arg0, LevelReader arg1)",
			"fabric": "getPathfindingFavor(BlockPos arg0, WorldView arg1)"
		},
		{
			"forge": "isDarkEnoughToSpawn(ServerLevelAccessor arg0, BlockPos arg1, RandomSource arg2)",
			"fabric": "isSpawnDark(ServerWorldAccess world, BlockPos pos, Random random)"
		},
		{
			"forge": "checkMonsterSpawnRules(EntityType<? extends Monster> arg0, ServerLevelAccessor arg1, MobSpawnType arg2, BlockPos arg3, RandomSource arg4)",
			"fabric": "canSpawnInDark(EntityType<? extends HostileEntity> type, ServerWorldAccess world, SpawnReason spawnReason, BlockPos pos, Random random)"
		},
		{
			"forge": "checkAnyLightMonsterSpawnRules(EntityType<? extends Monster> arg0, LevelAccessor arg1, MobSpawnType arg2, BlockPos arg3, RandomSource arg4)",
			"fabric": "canSpawnIgnoreLightLevel(EntityType<? extends HostileEntity> type, WorldAccess world, SpawnReason spawnReason, BlockPos pos, Random random)"
		},
		{
			"forge": "createMonsterAttributes()",
			"fabric": "createHostileAttributes()"
		},
		{
			"forge": "shouldDropExperience()",
			"fabric": "shouldDropXp()"
		},
		{
			"forge": "shouldDropLoot()",
			"fabric": "shouldDropLoot()"
		},
		{
			"forge": "isPreventingPlayerRest(Player arg0)",
			"fabric": "isAngryAt(PlayerEntity player)"
		},
		{
			"forge": "getProjectile(ItemStack arg0)",
			"fabric": "getProjectileType(ItemStack arg0)"
		}
	]
}