{
	"title": "net.minecraft.world.level.levelgen.synth.PerlinNoise",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.synth.PerlinNoise",
			"fabric": "net.minecraft.util.math.noise.OctavePerlinNoiseSampler"
		},
		{
			"forge": "ROUND_OFF",
			"fabric": "field_31704"
		},
		{
			"forge": "ROUND_OFF",
			"fabric": "field_31704"
		},
		{
			"forge": "noiseLevels",
			"fabric": "octaveSamplers"
		},
		{
			"forge": "firstOctave",
			"fabric": "firstOctave"
		},
		{
			"forge": "amplitudes",
			"fabric": "amplitudes"
		},
		{
			"forge": "lowestFreqValueFactor",
			"fabric": "persistence"
		},
		{
			"forge": "lowestFreqInputFactor",
			"fabric": "lacunarity"
		},
		{
			"forge": "maxValue",
			"fabric": "maxValue"
		},
		{
			"forge": "createLegacyForBlendedNoise(RandomSource arg0, IntStream arg1)",
			"fabric": "createLegacy(Random random, IntStream octaves)"
		},
		{
			"forge": "createLegacyForBlendedNoise(RandomSource arg0, IntStream arg1)",
			"fabric": "createLegacy(Random random, IntStream octaves)"
		},
		{
			"forge": "createLegacyForLegacyNetherBiome(RandomSource arg0, int arg1, it.unimi.dsi.fastutil.doubles.DoubleList arg2)",
			"fabric": "createLegacy(Random random, int offset, it.unimi.dsi.fastutil.doubles.DoubleList amplitudes)"
		},
		{
			"forge": "create(RandomSource arg0, IntStream arg1)",
			"fabric": "create(Random random, IntStream octaves)"
		},
		{
			"forge": "create(RandomSource arg0, List<Integer> arg1)",
			"fabric": "create(Random random, List<Integer> octaves)"
		},
		{
			"forge": "create(RandomSource arg0, int arg1, double arg2, double... arg3)",
			"fabric": "create(Random random, int offset, double firstAmplitude, double... amplitudes)"
		},
		{
			"forge": "create(RandomSource arg0, int arg1, it.unimi.dsi.fastutil.doubles.DoubleList arg2)",
			"fabric": "create(Random random, int offset, it.unimi.dsi.fastutil.doubles.DoubleList amplitudes)"
		},
		{
			"forge": "makeAmplitudes(it.unimi.dsi.fastutil.ints.IntSortedSet arg0)",
			"fabric": "calculateAmplitudes(it.unimi.dsi.fastutil.ints.IntSortedSet octaves)"
		},
		{
			"forge": "maxValue()",
			"fabric": "getMaxValue()"
		},
		{
			"forge": "skipOctave(RandomSource arg0)",
			"fabric": "skipCalls(Random random)"
		},
		{
			"forge": "getValue(double arg0, double arg1, double arg2)",
			"fabric": "sample(double x, double y, double z)"
		},
		{
			"forge": "getValue(double arg0, double arg1, double arg2, double arg3, double arg4, boolean arg5)",
			"fabric": "sample(double x, double y, double z, double yScale, double yMax, boolean useOrigin)"
		},
		{
			"forge": "maxBrokenValue(double arg0)",
			"fabric": "method_40556(double arg0)"
		},
		{
			"forge": "edgeValue(double arg0)",
			"fabric": "getTotalAmplitude(double scale)"
		},
		{
			"forge": "getOctaveNoise(int arg0)",
			"fabric": "getOctave(int octave)"
		},
		{
			"forge": "wrap(double arg0)",
			"fabric": "maintainPrecision(double value)"
		},
		{
			"forge": "firstOctave()",
			"fabric": "getFirstOctave()"
		},
		{
			"forge": "amplitudes()",
			"fabric": "getAmplitudes()"
		},
		{
			"forge": "parityConfigString(StringBuilder arg0)",
			"fabric": "addDebugInfo(StringBuilder info)"
		}
	]
}