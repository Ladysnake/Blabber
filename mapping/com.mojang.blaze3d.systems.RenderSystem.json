{
	"title": "com.mojang.blaze3d.systems.RenderSystem",
	"items": [
		{
			"forge": "com.mojang.blaze3d.systems.RenderSystem",
			"fabric": "com.mojang.blaze3d.systems.RenderSystem"
		},
		{
			"forge": "initRenderThread()",
			"fabric": "initGameThread(boolean assertNotRenderThread)"
		},
		{
			"forge": "initGameThread(boolean arg0)",
			"fabric": "initGameThread(boolean assertNotRenderThread)"
		},
		{
			"forge": "recordRenderCall(RenderCall arg0)",
			"fabric": "recordRenderCall(RenderCall renderCall)"
		},
		{
			"forge": "flipFrame(long arg0)",
			"fabric": "flipFrame(long window)"
		},
		{
			"forge": "limitDisplayFPS(int arg0)",
			"fabric": "limitDisplayFPS(int fps)"
		},
		{
			"forge": "enableScissor(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "enableScissor(int x, int y, int width, int height)"
		},
		{
			"forge": "depthFunc(int arg0)",
			"fabric": "depthFunc(int func)"
		},
		{
			"forge": "depthMask(boolean arg0)",
			"fabric": "depthMask(boolean mask)"
		},
		{
			"forge": "blendFunc(GlStateManager$SourceFactor arg0, GlStateManager$DestFactor arg1)",
			"fabric": "blendFunc(GlStateManager$SrcFactor srcFactor, GlStateManager$DstFactor dstFactor)"
		},
		{
			"forge": "blendFunc(int arg0, int arg1)",
			"fabric": "blendFunc(int srcFactor, int dstFactor)"
		},
		{
			"forge": "blendFuncSeparate(GlStateManager$SourceFactor arg0, GlStateManager$DestFactor arg1, GlStateManager$SourceFactor arg2, GlStateManager$DestFactor arg3)",
			"fabric": "blendFuncSeparate(GlStateManager$SrcFactor srcFactor, GlStateManager$DstFactor dstFactor, GlStateManager$SrcFactor srcAlpha, GlStateManager$DstFactor dstAlpha)"
		},
		{
			"forge": "blendFuncSeparate(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "blendFuncSeparate(int srcFactorRGB, int dstFactorRGB, int srcFactorAlpha, int dstFactorAlpha)"
		},
		{
			"forge": "blendEquation(int arg0)",
			"fabric": "blendEquation(int mode)"
		},
		{
			"forge": "polygonMode(int arg0, int arg1)",
			"fabric": "polygonMode(int face, int mode)"
		},
		{
			"forge": "polygonOffset(float arg0, float arg1)",
			"fabric": "polygonOffset(float factor, float units)"
		},
		{
			"forge": "logicOp(GlStateManager$LogicOp arg0)",
			"fabric": "logicOp(GlStateManager$LogicOp op)"
		},
		{
			"forge": "activeTexture(int arg0)",
			"fabric": "activeTexture(int texture)"
		},
		{
			"forge": "texParameter(int arg0, int arg1, int arg2)",
			"fabric": "texParameter(int target, int pname, int param)"
		},
		{
			"forge": "deleteTexture(int arg0)",
			"fabric": "deleteTexture(int texture)"
		},
		{
			"forge": "bindTextureForSetup(int arg0)",
			"fabric": "bindTextureForSetup(int id)"
		},
		{
			"forge": "bindTexture(int arg0)",
			"fabric": "bindTexture(int texture)"
		},
		{
			"forge": "viewport(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "viewport(int x, int y, int width, int height)"
		},
		{
			"forge": "colorMask(boolean arg0, boolean arg1, boolean arg2, boolean arg3)",
			"fabric": "colorMask(boolean red, boolean green, boolean blue, boolean alpha)"
		},
		{
			"forge": "stencilFunc(int arg0, int arg1, int arg2)",
			"fabric": "stencilFunc(int func, int ref, int mask)"
		},
		{
			"forge": "stencilMask(int arg0)",
			"fabric": "stencilMask(int mask)"
		},
		{
			"forge": "stencilOp(int arg0, int arg1, int arg2)",
			"fabric": "stencilOp(int sfail, int dpfail, int dppass)"
		},
		{
			"forge": "clearDepth(double arg0)",
			"fabric": "clearDepth(double depth)"
		},
		{
			"forge": "clearColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "clearColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "clearStencil(int arg0)",
			"fabric": "clearStencil(int stencil)"
		},
		{
			"forge": "clear(int arg0, boolean arg1)",
			"fabric": "clear(int mask, boolean getError)"
		},
		{
			"forge": "setShaderFogStart(float arg0)",
			"fabric": "setShaderFogStart(float shaderFogStart)"
		},
		{
			"forge": "_setShaderFogStart(float arg0)",
			"fabric": "_setShaderFogStart(float shaderFogStart)"
		},
		{
			"forge": "setShaderFogEnd(float arg0)",
			"fabric": "setShaderFogEnd(float shaderFogEnd)"
		},
		{
			"forge": "_setShaderFogEnd(float arg0)",
			"fabric": "_setShaderFogEnd(float shaderFogEnd)"
		},
		{
			"forge": "setShaderFogColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "setShaderFogColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "setShaderFogColor(float arg0, float arg1, float arg2)",
			"fabric": "setShaderFogColor(float red, float green, float blue)"
		},
		{
			"forge": "_setShaderFogColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "_setShaderFogColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "setShaderFogShape(FogShape arg0)",
			"fabric": "setShaderFogShape(FogShape shaderFogShape)"
		},
		{
			"forge": "_setShaderFogShape(FogShape arg0)",
			"fabric": "_setShaderFogShape(FogShape shaderFogShape)"
		},
		{
			"forge": "setupShaderLights(ShaderInstance arg0)",
			"fabric": "setupShaderLights(ShaderProgram shader)"
		},
		{
			"forge": "setShaderColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "setShaderColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "_setShaderColor(float arg0, float arg1, float arg2, float arg3)",
			"fabric": "_setShaderColor(float red, float green, float blue, float alpha)"
		},
		{
			"forge": "drawElements(int arg0, int arg1, int arg2)",
			"fabric": "drawElements(int mode, int count, int type)"
		},
		{
			"forge": "lineWidth(float arg0)",
			"fabric": "lineWidth(float width)"
		},
		{
			"forge": "pixelStore(int arg0, int arg1)",
			"fabric": "pixelStore(int pname, int param)"
		},
		{
			"forge": "readPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, ByteBuffer arg6)",
			"fabric": "readPixels(int x, int y, int width, int height, int format, int type, ByteBuffer pixels)"
		},
		{
			"forge": "getString(int arg0, Consumer<String> arg1)",
			"fabric": "getString(int name, Consumer<String> consumer)"
		},
		{
			"forge": "initRenderer(int arg0, boolean arg1)",
			"fabric": "initRenderer(int debugVerbosity, boolean debugSync)"
		},
		{
			"forge": "setErrorCallback(org.lwjgl.glfw.GLFWErrorCallbackI arg0)",
			"fabric": "setErrorCallback(org.lwjgl.glfw.GLFWErrorCallbackI callback)"
		},
		{
			"forge": "renderCrosshair(int arg0)",
			"fabric": "renderCrosshair(int size)"
		},
		{
			"forge": "setupDefaultState(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "setupDefaultState(int x, int y, int width, int height)"
		},
		{
			"forge": "glBindBuffer(int arg0, IntSupplier arg1)",
			"fabric": "glBindBuffer(int target, IntSupplier bufferSupplier)"
		},
		{
			"forge": "glBindVertexArray(Supplier<Integer> arg0)",
			"fabric": "glBindVertexArray(Supplier<Integer> arraySupplier)"
		},
		{
			"forge": "glBufferData(int arg0, ByteBuffer arg1, int arg2)",
			"fabric": "glBufferData(int target, ByteBuffer data, int usage)"
		},
		{
			"forge": "glDeleteBuffers(int arg0)",
			"fabric": "glDeleteBuffers(int buffer)"
		},
		{
			"forge": "glDeleteVertexArrays(int arg0)",
			"fabric": "glDeleteVertexArrays(int array)"
		},
		{
			"forge": "glUniform1i(int arg0, int arg1)",
			"fabric": "glUniform1i(int location, int value)"
		},
		{
			"forge": "glUniform1(int arg0, IntBuffer arg1)",
			"fabric": "glUniform1(int location, IntBuffer value)"
		},
		{
			"forge": "glUniform2(int arg0, IntBuffer arg1)",
			"fabric": "glUniform2(int location, IntBuffer value)"
		},
		{
			"forge": "glUniform3(int arg0, IntBuffer arg1)",
			"fabric": "glUniform3(int location, IntBuffer value)"
		},
		{
			"forge": "glUniform4(int arg0, IntBuffer arg1)",
			"fabric": "glUniform4(int location, IntBuffer value)"
		},
		{
			"forge": "glUniform1(int arg0, FloatBuffer arg1)",
			"fabric": "glUniform1(int location, FloatBuffer value)"
		},
		{
			"forge": "glUniform2(int arg0, FloatBuffer arg1)",
			"fabric": "glUniform2(int location, FloatBuffer value)"
		},
		{
			"forge": "glUniform3(int arg0, FloatBuffer arg1)",
			"fabric": "glUniform3(int location, FloatBuffer value)"
		},
		{
			"forge": "glUniform4(int arg0, FloatBuffer arg1)",
			"fabric": "glUniform4(int location, FloatBuffer value)"
		},
		{
			"forge": "glUniformMatrix2(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "glUniformMatrix2(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "glUniformMatrix3(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "glUniformMatrix3(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "glUniformMatrix4(int arg0, boolean arg1, FloatBuffer arg2)",
			"fabric": "glUniformMatrix4(int location, boolean transpose, FloatBuffer value)"
		},
		{
			"forge": "setupOverlayColor(IntSupplier arg0, int arg1)",
			"fabric": "setupOverlayColor(IntSupplier texture, int size)"
		},
		{
			"forge": "glGenBuffers(Consumer<Integer> arg0)",
			"fabric": "glGenBuffers(Consumer<Integer> consumer)"
		},
		{
			"forge": "glGenVertexArrays(Consumer<Integer> arg0)",
			"fabric": "glGenVertexArrays(Consumer<Integer> consumer)"
		},
		{
			"forge": "runAsFancy(Runnable arg0)",
			"fabric": "runAsFancy(Runnable runnable)"
		},
		{
			"forge": "setShader(Supplier<ShaderInstance> arg0)",
			"fabric": "setShader(Supplier<ShaderProgram> program)"
		},
		{
			"forge": "setShaderTexture(int arg0, ResourceLocation arg1)",
			"fabric": "setShaderTexture(int texture, Identifier id)"
		},
		{
			"forge": "_setShaderTexture(int arg0, ResourceLocation arg1)",
			"fabric": "_setShaderTexture(int texture, Identifier id)"
		},
		{
			"forge": "setShaderTexture(int arg0, int arg1)",
			"fabric": "setShaderTexture(int texture, int glId)"
		},
		{
			"forge": "_setShaderTexture(int arg0, int arg1)",
			"fabric": "_setShaderTexture(int texture, int glId)"
		},
		{
			"forge": "getShaderTexture(int arg0)",
			"fabric": "getShaderTexture(int texture)"
		},
		{
			"forge": "setProjectionMatrix(org.joml.Matrix4f arg0, VertexSorting arg1)",
			"fabric": "setProjectionMatrix(org.joml.Matrix4f projectionMatrix, VertexSorter vertexSorting)"
		},
		{
			"forge": "setInverseViewRotationMatrix(org.joml.Matrix3f arg0)",
			"fabric": "setInverseViewRotationMatrix(org.joml.Matrix3f inverseViewRotationMatrix)"
		},
		{
			"forge": "setTextureMatrix(org.joml.Matrix4f arg0)",
			"fabric": "setTextureMatrix(org.joml.Matrix4f textureMatrix)"
		},
		{
			"forge": "getSequentialBuffer(VertexFormat$Mode arg0)",
			"fabric": "getSequentialBuffer(VertexFormat$DrawMode drawMode)"
		},
		{
			"forge": "setShaderGameTime(long arg0, float arg1)",
			"fabric": "setShaderGameTime(long time, float tickDelta)"
		}
	]
}