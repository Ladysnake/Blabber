{
	"title": "net.minecraft.core.MappedRegistry",
	"items": [
		{
			"forge": "net.minecraft.core.MappedRegistry",
			"fabric": "net.minecraft.registry.SimpleRegistry"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "key",
			"fabric": "key"
		},
		{
			"forge": "byId",
			"fabric": "rawIdToEntry"
		},
		{
			"forge": "toId",
			"fabric": "entryToRawId"
		},
		{
			"forge": "byLocation",
			"fabric": "idToEntry"
		},
		{
			"forge": "byKey",
			"fabric": "keyToEntry"
		},
		{
			"forge": "byValue",
			"fabric": "valueToEntry"
		},
		{
			"forge": "lifecycles",
			"fabric": "entryToLifecycle"
		},
		{
			"forge": "registryLifecycle",
			"fabric": "lifecycle"
		},
		{
			"forge": "tags",
			"fabric": "tagToEntryList"
		},
		{
			"forge": "frozen",
			"fabric": "frozen"
		},
		{
			"forge": "unregisteredIntrusiveHolders",
			"fabric": "intrusiveValueToEntry"
		},
		{
			"forge": "holdersInOrder",
			"fabric": "cachedEntries"
		},
		{
			"forge": "nextId",
			"fabric": "nextId"
		},
		{
			"forge": "lookup",
			"fabric": "wrapper"
		},
		{
			"forge": "key()",
			"fabric": "getKey()"
		},
		{
			"forge": "key()",
			"fabric": "getKey()"
		},
		{
			"forge": "holdersInOrder()",
			"fabric": "getEntries()"
		},
		{
			"forge": "validateWrite()",
			"fabric": "assertNotFrozen()"
		},
		{
			"forge": "validateWrite(ResourceKey<T> arg0)",
			"fabric": "assertNotFrozen(RegistryKey<T> key)"
		},
		{
			"forge": "registerMapping(int arg0, ResourceKey<T> arg1, T arg2, com.mojang.serialization.Lifecycle arg3)",
			"fabric": "set(int arg0, RegistryKey<T> arg1, T arg2, com.mojang.serialization.Lifecycle arg3)"
		},
		{
			"forge": "register(ResourceKey<T> arg0, T arg1, com.mojang.serialization.Lifecycle arg2)",
			"fabric": "add(RegistryKey<T> arg0, T arg1, com.mojang.serialization.Lifecycle arg2)"
		},
		{
			"forge": "getKey(T arg0)",
			"fabric": "getId(T arg0)"
		},
		{
			"forge": "getResourceKey(T arg0)",
			"fabric": "getKey(T arg0)"
		},
		{
			"forge": "getId(T arg0)",
			"fabric": "getRawId(T arg0)"
		},
		{
			"forge": "get(ResourceKey<T> arg0)",
			"fabric": "get(RegistryKey<T> arg0)"
		},
		{
			"forge": "byId(int arg0)",
			"fabric": "get(int arg0)"
		},
		{
			"forge": "getHolder(int arg0)",
			"fabric": "getEntry(int arg0)"
		},
		{
			"forge": "getHolder(ResourceKey<T> arg0)",
			"fabric": "getEntry(RegistryKey<T> arg0)"
		},
		{
			"forge": "wrapAsHolder(T arg0)",
			"fabric": "getEntry(T arg0)"
		},
		{
			"forge": "getOrCreateHolderOrThrow(ResourceKey<T> arg0)",
			"fabric": "getOrCreateEntry(RegistryKey<T> key)"
		},
		{
			"forge": "size()",
			"fabric": "size()"
		},
		{
			"forge": "lifecycle(T arg0)",
			"fabric": "getEntryLifecycle(T arg0)"
		},
		{
			"forge": "registryLifecycle()",
			"fabric": "getLifecycle()"
		},
		{
			"forge": "get(ResourceLocation arg0)",
			"fabric": "get(Identifier arg0)"
		},
		{
			"forge": "getValueFromNullable(Holder$Reference<T> arg0)",
			"fabric": "getValue(RegistryEntry$Reference<T> entry)"
		},
		{
			"forge": "keySet()",
			"fabric": "getIds()"
		},
		{
			"forge": "registryKeySet()",
			"fabric": "getKeys()"
		},
		{
			"forge": "entrySet()",
			"fabric": "getEntrySet()"
		},
		{
			"forge": "holders()",
			"fabric": "streamEntries()"
		},
		{
			"forge": "getTags()",
			"fabric": "streamTagsAndEntries()"
		},
		{
			"forge": "getOrCreateTag(TagKey<T> arg0)",
			"fabric": "getOrCreateEntryList(TagKey<T> arg0)"
		},
		{
			"forge": "createTag(TagKey<T> arg0)",
			"fabric": "createNamedEntryList(TagKey<T> tag)"
		},
		{
			"forge": "getTagNames()",
			"fabric": "streamTags()"
		},
		{
			"forge": "isEmpty()",
			"fabric": "isEmpty()"
		},
		{
			"forge": "getRandom(RandomSource arg0)",
			"fabric": "getRandom(Random arg0)"
		},
		{
			"forge": "containsKey(ResourceLocation arg0)",
			"fabric": "containsId(Identifier arg0)"
		},
		{
			"forge": "containsKey(ResourceKey<T> arg0)",
			"fabric": "contains(RegistryKey<T> arg0)"
		},
		{
			"forge": "freeze()",
			"fabric": "freeze()"
		},
		{
			"forge": "createIntrusiveHolder(T arg0)",
			"fabric": "createEntry(T arg0)"
		},
		{
			"forge": "getTag(TagKey<T> arg0)",
			"fabric": "getEntryList(TagKey<T> arg0)"
		},
		{
			"forge": "bindTags(Map<TagKey<T>, List<Holder<T>>> arg0)",
			"fabric": "populateTags(Map<TagKey<T>, List<RegistryEntry<T>>> arg0)"
		},
		{
			"forge": "resetTags()",
			"fabric": "clearTags()"
		},
		{
			"forge": "createRegistrationLookup()",
			"fabric": "createMutableEntryLookup()"
		},
		{
			"forge": "holderOwner()",
			"fabric": "getEntryOwner()"
		},
		{
			"forge": "asLookup()",
			"fabric": "getReadOnlyWrapper()"
		}
	]
}