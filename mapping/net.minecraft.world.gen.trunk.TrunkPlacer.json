{
	"title": "net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer",
			"fabric": "net.minecraft.world.gen.trunk.TrunkPlacer"
		},
		{
			"forge": "CODEC",
			"fabric": "TYPE_CODEC"
		},
		{
			"forge": "CODEC",
			"fabric": "TYPE_CODEC"
		},
		{
			"forge": "MAX_BASE_HEIGHT",
			"fabric": "MAX_BASE_HEIGHT"
		},
		{
			"forge": "MAX_RAND",
			"fabric": "MAX_RANDOM_HEIGHT"
		},
		{
			"forge": "MAX_HEIGHT",
			"fabric": "field_31530"
		},
		{
			"forge": "baseHeight",
			"fabric": "baseHeight"
		},
		{
			"forge": "heightRandA",
			"fabric": "firstRandomHeight"
		},
		{
			"forge": "heightRandB",
			"fabric": "secondRandomHeight"
		},
		{
			"forge": "trunkPlacerParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance<P> arg0)",
			"fabric": "fillTrunkPlacerFields(com.mojang.serialization.codecs.RecordCodecBuilder$Instance<P> instance)"
		},
		{
			"forge": "trunkPlacerParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance<P> arg0)",
			"fabric": "fillTrunkPlacerFields(com.mojang.serialization.codecs.RecordCodecBuilder$Instance<P> instance)"
		},
		{
			"forge": "type()",
			"fabric": "getType()"
		},
		{
			"forge": "placeTrunk(LevelSimulatedReader arg0, BiConsumer<BlockPos, BlockState> arg1, RandomSource arg2, int arg3, BlockPos arg4, TreeConfiguration arg5)",
			"fabric": "generate(TestableWorld world, BiConsumer<BlockPos, BlockState> replacer, Random random, int height, BlockPos startPos, TreeFeatureConfig config)"
		},
		{
			"forge": "getTreeHeight(RandomSource arg0)",
			"fabric": "getHeight(Random random)"
		},
		{
			"forge": "isDirt(LevelSimulatedReader arg0, BlockPos arg1)",
			"fabric": "canGenerate(TestableWorld world, BlockPos pos)"
		},
		{
			"forge": "setDirtAt(LevelSimulatedReader arg0, BiConsumer<BlockPos, BlockState> arg1, RandomSource arg2, BlockPos arg3, TreeConfiguration arg4)",
			"fabric": "setToDirt(TestableWorld world, BiConsumer<BlockPos, BlockState> replacer, Random random, BlockPos pos, TreeFeatureConfig config)"
		},
		{
			"forge": "placeLog(LevelSimulatedReader arg0, BiConsumer<BlockPos, BlockState> arg1, RandomSource arg2, BlockPos arg3, TreeConfiguration arg4)",
			"fabric": "getAndSetState(TestableWorld world, BiConsumer<BlockPos, BlockState> replacer, Random random, BlockPos pos, TreeFeatureConfig config)"
		},
		{
			"forge": "placeLog(LevelSimulatedReader arg0, BiConsumer<BlockPos, BlockState> arg1, RandomSource arg2, BlockPos arg3, TreeConfiguration arg4, Function<BlockState, BlockState> arg5)",
			"fabric": "getAndSetState(TestableWorld world, BiConsumer<BlockPos, BlockState> replacer, Random random, BlockPos pos, TreeFeatureConfig config, Function<BlockState, BlockState> arg5)"
		},
		{
			"forge": "placeLogIfFree(LevelSimulatedReader arg0, BiConsumer<BlockPos, BlockState> arg1, RandomSource arg2, BlockPos$MutableBlockPos arg3, TreeConfiguration arg4)",
			"fabric": "trySetState(TestableWorld world, BiConsumer<BlockPos, BlockState> replacer, Random random, BlockPos$Mutable pos, TreeFeatureConfig config)"
		},
		{
			"forge": "validTreePos(LevelSimulatedReader arg0, BlockPos arg1)",
			"fabric": "canReplace(TestableWorld world, BlockPos pos)"
		},
		{
			"forge": "isFree(LevelSimulatedReader arg0, BlockPos arg1)",
			"fabric": "canReplaceOrIsLog(TestableWorld world, BlockPos pos)"
		}
	]
}