{
	"title": "net.minecraft.world.entity.ai.village.poi.PoiSection",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.village.poi.PoiSection",
			"fabric": "net.minecraft.world.poi.PointOfInterestSet"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "records",
			"fabric": "pointsOfInterestByPos"
		},
		{
			"forge": "byType",
			"fabric": "pointsOfInterestByType"
		},
		{
			"forge": "setDirty",
			"fabric": "updateListener"
		},
		{
			"forge": "isValid",
			"fabric": "valid"
		},
		{
			"forge": "codec(Runnable arg0)",
			"fabric": "createCodec(Runnable updateListener)"
		},
		{
			"forge": "codec(Runnable arg0)",
			"fabric": "createCodec(Runnable updateListener)"
		},
		{
			"forge": "getRecords(Predicate<Holder<PoiType>> arg0, PoiManager$Occupancy arg1)",
			"fabric": "get(Predicate<RegistryEntry<PointOfInterestType>> predicate, PointOfInterestStorage$OccupationStatus occupationStatus)"
		},
		{
			"forge": "add(BlockPos arg0, Holder<PoiType> arg1)",
			"fabric": "add(BlockPos pos, RegistryEntry<PointOfInterestType> type)"
		},
		{
			"forge": "add(PoiRecord arg0)",
			"fabric": "add(PointOfInterest poi)"
		},
		{
			"forge": "remove(BlockPos arg0)",
			"fabric": "remove(BlockPos pos)"
		},
		{
			"forge": "getFreeTickets(BlockPos arg0)",
			"fabric": "getFreeTickets(BlockPos pos)"
		},
		{
			"forge": "release(BlockPos arg0)",
			"fabric": "releaseTicket(BlockPos pos)"
		},
		{
			"forge": "exists(BlockPos arg0, Predicate<Holder<PoiType>> arg1)",
			"fabric": "test(BlockPos pos, Predicate<RegistryEntry<PointOfInterestType>> predicate)"
		},
		{
			"forge": "getType(BlockPos arg0)",
			"fabric": "getType(BlockPos pos)"
		},
		{
			"forge": "getPoiRecord(BlockPos arg0)",
			"fabric": "get(BlockPos pos)"
		},
		{
			"forge": "refresh(Consumer<BiConsumer<BlockPos, Holder<PoiType>>> arg0)",
			"fabric": "updatePointsOfInterest(Consumer<BiConsumer<BlockPos, RegistryEntry<PointOfInterestType>>> updater)"
		},
		{
			"forge": "clear()",
			"fabric": "clear()"
		},
		{
			"forge": "isValid()",
			"fabric": "isValid()"
		}
	]
}