{
	"title": "net.minecraft.world.entity.ai.Brain",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.Brain",
			"fabric": "net.minecraft.entity.ai.brain.Brain"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "codec",
			"fabric": "codecSupplier"
		},
		{
			"forge": "SCHEDULE_UPDATE_DELAY",
			"fabric": "ACTIVITY_REFRESH_COOLDOWN"
		},
		{
			"forge": "memories",
			"fabric": "memories"
		},
		{
			"forge": "sensors",
			"fabric": "sensors"
		},
		{
			"forge": "availableBehaviorsByPriority",
			"fabric": "tasks"
		},
		{
			"forge": "schedule",
			"fabric": "schedule"
		},
		{
			"forge": "activityRequirements",
			"fabric": "requiredActivityMemories"
		},
		{
			"forge": "activityMemoriesToEraseWhenStopped",
			"fabric": "forgettingActivityMemories"
		},
		{
			"forge": "coreActivities",
			"fabric": "coreActivities"
		},
		{
			"forge": "activeActivities",
			"fabric": "possibleActivities"
		},
		{
			"forge": "defaultActivity",
			"fabric": "defaultActivity"
		},
		{
			"forge": "lastScheduleUpdate",
			"fabric": "activityStartTime"
		},
		{
			"forge": "provider(Collection<? extends MemoryModuleType<?>> arg0, Collection<? extends SensorType<? extends Sensor<? super E>>> arg1)",
			"fabric": "createProfile(Collection<? extends MemoryModuleType<?>> memoryModules, Collection<? extends SensorType<? extends Sensor<? super E>>> sensors)"
		},
		{
			"forge": "provider(Collection<? extends MemoryModuleType<?>> arg0, Collection<? extends SensorType<? extends Sensor<? super E>>> arg1)",
			"fabric": "createProfile(Collection<? extends MemoryModuleType<?>> memoryModules, Collection<? extends SensorType<? extends Sensor<? super E>>> sensors)"
		},
		{
			"forge": "codec(Collection<? extends MemoryModuleType<?>> arg0, Collection<? extends SensorType<? extends Sensor<? super E>>> arg1)",
			"fabric": "createBrainCodec(Collection<? extends MemoryModuleType<?>> memoryModules, Collection<? extends SensorType<? extends Sensor<? super E>>> sensors)"
		},
		{
			"forge": "serializeStart(com.mojang.serialization.DynamicOps<T> arg0)",
			"fabric": "encode(com.mojang.serialization.DynamicOps<T> ops)"
		},
		{
			"forge": "memories()",
			"fabric": "streamMemories()"
		},
		{
			"forge": "hasMemoryValue(MemoryModuleType<?> arg0)",
			"fabric": "hasMemoryModule(MemoryModuleType<?> type)"
		},
		{
			"forge": "clearMemories()",
			"fabric": "forgetAll()"
		},
		{
			"forge": "eraseMemory(MemoryModuleType<U> arg0)",
			"fabric": "forget(MemoryModuleType<U> type)"
		},
		{
			"forge": "setMemory(MemoryModuleType<U> arg0, U arg1)",
			"fabric": "remember(MemoryModuleType<U> type, U value)"
		},
		{
			"forge": "setMemoryWithExpiry(MemoryModuleType<U> arg0, U arg1, long arg2)",
			"fabric": "remember(MemoryModuleType<U> type, U value, long expiry)"
		},
		{
			"forge": "setMemory(MemoryModuleType<U> arg0, Optional<? extends U> arg1)",
			"fabric": "remember(MemoryModuleType<U> type, Optional<? extends U> value)"
		},
		{
			"forge": "setMemoryInternal(MemoryModuleType<U> arg0, Optional<? extends ExpirableValue<?>> arg1)",
			"fabric": "setMemory(MemoryModuleType<U> type, Optional<? extends Memory<?>> memory)"
		},
		{
			"forge": "getMemory(MemoryModuleType<U> arg0)",
			"fabric": "getOptionalRegisteredMemory(MemoryModuleType<U> type)"
		},
		{
			"forge": "getMemoryInternal(MemoryModuleType<U> arg0)",
			"fabric": "getOptionalMemory(MemoryModuleType<U> type)"
		},
		{
			"forge": "getTimeUntilExpiry(MemoryModuleType<U> arg0)",
			"fabric": "getMemoryExpiry(MemoryModuleType<U> type)"
		},
		{
			"forge": "getMemories()",
			"fabric": "getMemories()"
		},
		{
			"forge": "isMemoryValue(MemoryModuleType<U> arg0, U arg1)",
			"fabric": "hasMemoryModuleWithValue(MemoryModuleType<U> type, U value)"
		},
		{
			"forge": "checkMemory(MemoryModuleType<?> arg0, MemoryStatus arg1)",
			"fabric": "isMemoryInState(MemoryModuleType<?> type, MemoryModuleState state)"
		},
		{
			"forge": "getSchedule()",
			"fabric": "getSchedule()"
		},
		{
			"forge": "setSchedule(Schedule arg0)",
			"fabric": "setSchedule(Schedule schedule)"
		},
		{
			"forge": "setCoreActivities(Set<Activity> arg0)",
			"fabric": "setCoreActivities(Set<Activity> coreActivities)"
		},
		{
			"forge": "getActiveActivities()",
			"fabric": "getPossibleActivities()"
		},
		{
			"forge": "getRunningBehaviors()",
			"fabric": "getRunningTasks()"
		},
		{
			"forge": "useDefaultActivity()",
			"fabric": "resetPossibleActivities()"
		},
		{
			"forge": "getActiveNonCoreActivity()",
			"fabric": "getFirstPossibleNonCoreActivity()"
		},
		{
			"forge": "setActiveActivityIfPossible(Activity arg0)",
			"fabric": "doExclusively(Activity activity)"
		},
		{
			"forge": "setActiveActivity(Activity arg0)",
			"fabric": "resetPossibleActivities(Activity except)"
		},
		{
			"forge": "eraseMemoriesForOtherActivitesThan(Activity arg0)",
			"fabric": "forgetIrrelevantMemories(Activity except)"
		},
		{
			"forge": "updateActivityFromSchedule(long arg0, long arg1)",
			"fabric": "refreshActivities(long timeOfDay, long time)"
		},
		{
			"forge": "setActiveActivityToFirstValid(List<Activity> arg0)",
			"fabric": "resetPossibleActivities(List<Activity> activities)"
		},
		{
			"forge": "setDefaultActivity(Activity arg0)",
			"fabric": "setDefaultActivity(Activity activity)"
		},
		{
			"forge": "addActivity(Activity arg0, int arg1, com.google.common.collect.ImmutableList<? extends BehaviorControl<? super E>> arg2)",
			"fabric": "setTaskList(Activity activity, int begin, com.google.common.collect.ImmutableList<? extends Task<? super E>> list)"
		},
		{
			"forge": "addActivityAndRemoveMemoryWhenStopped(Activity arg0, int arg1, com.google.common.collect.ImmutableList<? extends BehaviorControl<? super E>> arg2, MemoryModuleType<?> arg3)",
			"fabric": "setTaskList(Activity activity, int begin, com.google.common.collect.ImmutableList<? extends Task<? super E>> tasks, MemoryModuleType<?> memoryType)"
		},
		{
			"forge": "addActivity(Activity arg0, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends BehaviorControl<? super E>>> arg1)",
			"fabric": "setTaskList(Activity activity, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends Task<? super E>>> indexedTasks)"
		},
		{
			"forge": "addActivityWithConditions(Activity arg0, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends BehaviorControl<? super E>>> arg1, Set<com.mojang.datafixers.util.Pair<MemoryModuleType<?>, MemoryStatus>> arg2)",
			"fabric": "setTaskList(Activity activity, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends Task<? super E>>> indexedTasks, Set<com.mojang.datafixers.util.Pair<MemoryModuleType<?>, MemoryModuleState>> requiredMemories)"
		},
		{
			"forge": "addActivityAndRemoveMemoriesWhenStopped(Activity arg0, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends BehaviorControl<? super E>>> arg1, Set<com.mojang.datafixers.util.Pair<MemoryModuleType<?>, MemoryStatus>> arg2, Set<MemoryModuleType<?>> arg3)",
			"fabric": "setTaskList(Activity activity, com.google.common.collect.ImmutableList<? extends com.mojang.datafixers.util.Pair<Integer, ? extends Task<? super E>>> indexedTasks, Set<com.mojang.datafixers.util.Pair<MemoryModuleType<?>, MemoryModuleState>> requiredMemories, Set<MemoryModuleType<?>> forgettingMemories)"
		},
		{
			"forge": "removeAllBehaviors()",
			"fabric": "clear()"
		},
		{
			"forge": "isActive(Activity arg0)",
			"fabric": "hasActivity(Activity activity)"
		},
		{
			"forge": "copyWithoutBehaviors()",
			"fabric": "copy()"
		},
		{
			"forge": "tick(ServerLevel arg0, E arg1)",
			"fabric": "tick(ServerWorld world, E entity)"
		},
		{
			"forge": "tickSensors(ServerLevel arg0, E arg1)",
			"fabric": "tickSensors(ServerWorld world, E entity)"
		},
		{
			"forge": "forgetOutdatedMemories()",
			"fabric": "tickMemories()"
		},
		{
			"forge": "stopAll(ServerLevel arg0, E arg1)",
			"fabric": "stopAllTasks(ServerWorld world, E entity)"
		},
		{
			"forge": "startEachNonRunningBehavior(ServerLevel arg0, E arg1)",
			"fabric": "startTasks(ServerWorld world, E entity)"
		},
		{
			"forge": "tickEachRunningBehavior(ServerLevel arg0, E arg1)",
			"fabric": "updateTasks(ServerWorld world, E entity)"
		},
		{
			"forge": "activityRequirementsAreMet(Activity arg0)",
			"fabric": "canDoActivity(Activity activity)"
		},
		{
			"forge": "isEmptyCollection(Object arg0)",
			"fabric": "isEmptyCollection(Object value)"
		},
		{
			"forge": "createPriorityPairs(int arg0, com.google.common.collect.ImmutableList<? extends BehaviorControl<? super E>> arg1)",
			"fabric": "indexTaskList(int begin, com.google.common.collect.ImmutableList<? extends Task<? super E>> tasks)"
		}
	]
}