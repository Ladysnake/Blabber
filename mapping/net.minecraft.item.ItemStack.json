{
	"title": "net.minecraft.world.item.ItemStack",
	"items": [
		{
			"forge": "net.minecraft.world.item.ItemStack",
			"fabric": "net.minecraft.item.ItemStack"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "EMPTY",
			"fabric": "EMPTY"
		},
		{
			"forge": "ATTRIBUTE_MODIFIER_FORMAT",
			"fabric": "MODIFIER_FORMAT"
		},
		{
			"forge": "TAG_ENCH",
			"fabric": "ENCHANTMENTS_KEY"
		},
		{
			"forge": "TAG_DISPLAY",
			"fabric": "DISPLAY_KEY"
		},
		{
			"forge": "TAG_DISPLAY_NAME",
			"fabric": "NAME_KEY"
		},
		{
			"forge": "TAG_LORE",
			"fabric": "LORE_KEY"
		},
		{
			"forge": "TAG_DAMAGE",
			"fabric": "DAMAGE_KEY"
		},
		{
			"forge": "TAG_COLOR",
			"fabric": "COLOR_KEY"
		},
		{
			"forge": "TAG_UNBREAKABLE",
			"fabric": "UNBREAKABLE_KEY"
		},
		{
			"forge": "TAG_REPAIR_COST",
			"fabric": "REPAIR_COST_KEY"
		},
		{
			"forge": "TAG_CAN_DESTROY_BLOCK_LIST",
			"fabric": "CAN_DESTROY_KEY"
		},
		{
			"forge": "TAG_CAN_PLACE_ON_BLOCK_LIST",
			"fabric": "CAN_PLACE_ON_KEY"
		},
		{
			"forge": "TAG_HIDE_FLAGS",
			"fabric": "HIDE_FLAGS_KEY"
		},
		{
			"forge": "DISABLED_ITEM_TOOLTIP",
			"fabric": "DISABLED_TEXT"
		},
		{
			"forge": "DONT_HIDE_TOOLTIP",
			"fabric": "field_30903"
		},
		{
			"forge": "LORE_STYLE",
			"fabric": "LORE_STYLE"
		},
		{
			"forge": "count",
			"fabric": "count"
		},
		{
			"forge": "popTime",
			"fabric": "bobbingAnimationTime"
		},
		{
			"forge": "item",
			"fabric": "item"
		},
		{
			"forge": "tag",
			"fabric": "nbt"
		},
		{
			"forge": "entityRepresentation",
			"fabric": "holder"
		},
		{
			"forge": "adventureBreakCheck",
			"fabric": "destroyChecker"
		},
		{
			"forge": "adventurePlaceCheck",
			"fabric": "placeChecker"
		},
		{
			"forge": "getTooltipImage()",
			"fabric": "getTooltipData()"
		},
		{
			"forge": "getTooltipImage()",
			"fabric": "getTooltipData()"
		},
		{
			"forge": "of(CompoundTag arg0)",
			"fabric": "fromNbt(NbtCompound nbt)"
		},
		{
			"forge": "isEmpty()",
			"fabric": "isEmpty()"
		},
		{
			"forge": "isItemEnabled(FeatureFlagSet arg0)",
			"fabric": "isItemEnabled(FeatureSet enabledFeatures)"
		},
		{
			"forge": "split(int arg0)",
			"fabric": "split(int amount)"
		},
		{
			"forge": "copyAndClear()",
			"fabric": "copyAndEmpty()"
		},
		{
			"forge": "getItem()",
			"fabric": "getItem()"
		},
		{
			"forge": "getItemHolder()",
			"fabric": "getRegistryEntry()"
		},
		{
			"forge": "is(TagKey<Item> arg0)",
			"fabric": "isIn(TagKey<Item> tag)"
		},
		{
			"forge": "is(Item arg0)",
			"fabric": "isOf(Item item)"
		},
		{
			"forge": "is(Predicate<Holder<Item>> arg0)",
			"fabric": "itemMatches(Predicate<RegistryEntry<Item>> predicate)"
		},
		{
			"forge": "is(Holder<Item> arg0)",
			"fabric": "itemMatches(RegistryEntry<Item> itemEntry)"
		},
		{
			"forge": "getTags()",
			"fabric": "streamTags()"
		},
		{
			"forge": "useOn(UseOnContext arg0)",
			"fabric": "useOnBlock(ItemUsageContext context)"
		},
		{
			"forge": "getDestroySpeed(BlockState arg0)",
			"fabric": "getMiningSpeedMultiplier(BlockState state)"
		},
		{
			"forge": "use(Level arg0, Player arg1, InteractionHand arg2)",
			"fabric": "use(World world, PlayerEntity user, Hand hand)"
		},
		{
			"forge": "finishUsingItem(Level arg0, LivingEntity arg1)",
			"fabric": "finishUsing(World world, LivingEntity user)"
		},
		{
			"forge": "save(CompoundTag arg0)",
			"fabric": "writeNbt(NbtCompound nbt)"
		},
		{
			"forge": "getMaxStackSize()",
			"fabric": "getMaxCount()"
		},
		{
			"forge": "isStackable()",
			"fabric": "isStackable()"
		},
		{
			"forge": "isDamageableItem()",
			"fabric": "isDamageable()"
		},
		{
			"forge": "isDamaged()",
			"fabric": "isDamaged()"
		},
		{
			"forge": "getDamageValue()",
			"fabric": "getDamage()"
		},
		{
			"forge": "setDamageValue(int arg0)",
			"fabric": "setDamage(int damage)"
		},
		{
			"forge": "getMaxDamage()",
			"fabric": "getMaxDamage()"
		},
		{
			"forge": "hurt(int arg0, RandomSource arg1, ServerPlayer arg2)",
			"fabric": "damage(int amount, Random random, ServerPlayerEntity player)"
		},
		{
			"forge": "hurtAndBreak(int arg0, T arg1, Consumer<T> arg2)",
			"fabric": "damage(int amount, T entity, Consumer<T> breakCallback)"
		},
		{
			"forge": "isBarVisible()",
			"fabric": "isItemBarVisible()"
		},
		{
			"forge": "getBarWidth()",
			"fabric": "getItemBarStep()"
		},
		{
			"forge": "getBarColor()",
			"fabric": "getItemBarColor()"
		},
		{
			"forge": "overrideStackedOnOther(Slot arg0, ClickAction arg1, Player arg2)",
			"fabric": "onStackClicked(Slot slot, ClickType clickType, PlayerEntity player)"
		},
		{
			"forge": "overrideOtherStackedOnMe(ItemStack arg0, Slot arg1, ClickAction arg2, Player arg3, SlotAccess arg4)",
			"fabric": "onClicked(ItemStack stack, Slot slot, ClickType clickType, PlayerEntity player, StackReference cursorStackReference)"
		},
		{
			"forge": "hurtEnemy(LivingEntity arg0, Player arg1)",
			"fabric": "postHit(LivingEntity target, PlayerEntity attacker)"
		},
		{
			"forge": "mineBlock(Level arg0, BlockState arg1, BlockPos arg2, Player arg3)",
			"fabric": "postMine(World world, BlockState state, BlockPos pos, PlayerEntity miner)"
		},
		{
			"forge": "isCorrectToolForDrops(BlockState arg0)",
			"fabric": "isSuitableFor(BlockState state)"
		},
		{
			"forge": "interactLivingEntity(Player arg0, LivingEntity arg1, InteractionHand arg2)",
			"fabric": "useOnEntity(PlayerEntity user, LivingEntity entity, Hand hand)"
		},
		{
			"forge": "copy()",
			"fabric": "copy()"
		},
		{
			"forge": "copyWithCount(int arg0)",
			"fabric": "copyWithCount(int count)"
		},
		{
			"forge": "matches(ItemStack arg0, ItemStack arg1)",
			"fabric": "areEqual(ItemStack left, ItemStack right)"
		},
		{
			"forge": "isSameItem(ItemStack arg0, ItemStack arg1)",
			"fabric": "areItemsEqual(ItemStack left, ItemStack right)"
		},
		{
			"forge": "isSameItemSameTags(ItemStack arg0, ItemStack arg1)",
			"fabric": "canCombine(ItemStack stack, ItemStack otherStack)"
		},
		{
			"forge": "getDescriptionId()",
			"fabric": "getTranslationKey()"
		},
		{
			"forge": "inventoryTick(Level arg0, Entity arg1, int arg2, boolean arg3)",
			"fabric": "inventoryTick(World world, Entity entity, int slot, boolean selected)"
		},
		{
			"forge": "onCraftedBy(Level arg0, Player arg1, int arg2)",
			"fabric": "onCraft(World world, PlayerEntity player, int amount)"
		},
		{
			"forge": "getUseDuration()",
			"fabric": "getMaxUseTime()"
		},
		{
			"forge": "getUseAnimation()",
			"fabric": "getUseAction()"
		},
		{
			"forge": "releaseUsing(Level arg0, LivingEntity arg1, int arg2)",
			"fabric": "onStoppedUsing(World world, LivingEntity user, int remainingUseTicks)"
		},
		{
			"forge": "useOnRelease()",
			"fabric": "isUsedOnRelease()"
		},
		{
			"forge": "hasTag()",
			"fabric": "hasNbt()"
		},
		{
			"forge": "getTag()",
			"fabric": "getNbt()"
		},
		{
			"forge": "getOrCreateTag()",
			"fabric": "getOrCreateNbt()"
		},
		{
			"forge": "getOrCreateTagElement(String arg0)",
			"fabric": "getOrCreateSubNbt(String key)"
		},
		{
			"forge": "getTagElement(String arg0)",
			"fabric": "getSubNbt(String key)"
		},
		{
			"forge": "removeTagKey(String arg0)",
			"fabric": "removeSubNbt(String key)"
		},
		{
			"forge": "getEnchantmentTags()",
			"fabric": "getEnchantments()"
		},
		{
			"forge": "setTag(CompoundTag arg0)",
			"fabric": "setNbt(NbtCompound nbt)"
		},
		{
			"forge": "getHoverName()",
			"fabric": "getName()"
		},
		{
			"forge": "setHoverName(Component arg0)",
			"fabric": "setCustomName(Text name)"
		},
		{
			"forge": "resetHoverName()",
			"fabric": "removeCustomName()"
		},
		{
			"forge": "hasCustomHoverName()",
			"fabric": "hasCustomName()"
		},
		{
			"forge": "getTooltipLines(Player arg0, TooltipFlag arg1)",
			"fabric": "getTooltip(PlayerEntity player, TooltipContext context)"
		},
		{
			"forge": "shouldShowInTooltip(int arg0, ItemStack$TooltipPart arg1)",
			"fabric": "isSectionVisible(int flags, ItemStack$TooltipSection tooltipSection)"
		},
		{
			"forge": "getHideFlags()",
			"fabric": "getHideFlags()"
		},
		{
			"forge": "hideTooltipPart(ItemStack$TooltipPart arg0)",
			"fabric": "addHideFlag(ItemStack$TooltipSection tooltipSection)"
		},
		{
			"forge": "appendEnchantmentNames(List<Component> arg0, ListTag arg1)",
			"fabric": "appendEnchantments(List<Text> tooltip, NbtList enchantments)"
		},
		{
			"forge": "expandBlockState(String arg0)",
			"fabric": "parseBlockTag(String tag)"
		},
		{
			"forge": "hasFoil()",
			"fabric": "hasGlint()"
		},
		{
			"forge": "getRarity()",
			"fabric": "getRarity()"
		},
		{
			"forge": "isEnchantable()",
			"fabric": "isEnchantable()"
		},
		{
			"forge": "enchant(Enchantment arg0, int arg1)",
			"fabric": "addEnchantment(Enchantment enchantment, int level)"
		},
		{
			"forge": "isEnchanted()",
			"fabric": "hasEnchantments()"
		},
		{
			"forge": "addTagElement(String arg0, Tag arg1)",
			"fabric": "setSubNbt(String key, NbtElement element)"
		},
		{
			"forge": "isFramed()",
			"fabric": "isInFrame()"
		},
		{
			"forge": "setEntityRepresentation(Entity arg0)",
			"fabric": "setHolder(Entity holder)"
		},
		{
			"forge": "getFrame()",
			"fabric": "getFrame()"
		},
		{
			"forge": "getEntityRepresentation()",
			"fabric": "getHolder()"
		},
		{
			"forge": "getBaseRepairCost()",
			"fabric": "getRepairCost()"
		},
		{
			"forge": "setRepairCost(int arg0)",
			"fabric": "setRepairCost(int repairCost)"
		},
		{
			"forge": "getAttributeModifiers(EquipmentSlot arg0)",
			"fabric": "getAttributeModifiers(EquipmentSlot slot)"
		},
		{
			"forge": "addAttributeModifier(Attribute arg0, AttributeModifier arg1, EquipmentSlot arg2)",
			"fabric": "addAttributeModifier(EntityAttribute attribute, EntityAttributeModifier modifier, EquipmentSlot slot)"
		},
		{
			"forge": "getDisplayName()",
			"fabric": "toHoverableText()"
		},
		{
			"forge": "hasAdventureModePlaceTagForBlock(Registry<Block> arg0, BlockInWorld arg1)",
			"fabric": "canPlaceOn(Registry<Block> blockRegistry, CachedBlockPosition pos)"
		},
		{
			"forge": "hasAdventureModeBreakTagForBlock(Registry<Block> arg0, BlockInWorld arg1)",
			"fabric": "canDestroy(Registry<Block> blockRegistry, CachedBlockPosition pos)"
		},
		{
			"forge": "getPopTime()",
			"fabric": "getBobbingAnimationTime()"
		},
		{
			"forge": "setPopTime(int arg0)",
			"fabric": "setBobbingAnimationTime(int bobbingAnimationTime)"
		},
		{
			"forge": "getCount()",
			"fabric": "getCount()"
		},
		{
			"forge": "setCount(int arg0)",
			"fabric": "setCount(int count)"
		},
		{
			"forge": "grow(int arg0)",
			"fabric": "increment(int amount)"
		},
		{
			"forge": "shrink(int arg0)",
			"fabric": "decrement(int amount)"
		},
		{
			"forge": "onUseTick(Level arg0, LivingEntity arg1, int arg2)",
			"fabric": "usageTick(World world, LivingEntity user, int remainingUseTicks)"
		},
		{
			"forge": "onDestroyed(ItemEntity arg0)",
			"fabric": "onItemEntityDestroyed(ItemEntity entity)"
		},
		{
			"forge": "isEdible()",
			"fabric": "isFood()"
		},
		{
			"forge": "getDrinkingSound()",
			"fabric": "getDrinkSound()"
		},
		{
			"forge": "getEatingSound()",
			"fabric": "getEatSound()"
		}
	]
}