{
	"title": "net.minecraft.world.level.levelgen.NoiseChunk$NoiseInterpolator",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.NoiseChunk$NoiseInterpolator",
			"fabric": "net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator"
		},
		{
			"forge": "slice0",
			"fabric": "startDensityBuffer"
		},
		{
			"forge": "slice0",
			"fabric": "startDensityBuffer"
		},
		{
			"forge": "slice1",
			"fabric": "endDensityBuffer"
		},
		{
			"forge": "noiseFiller",
			"fabric": "delegate"
		},
		{
			"forge": "noise000",
			"fabric": "x0y0z0"
		},
		{
			"forge": "noise001",
			"fabric": "x0y0z1"
		},
		{
			"forge": "noise100",
			"fabric": "x1y0z0"
		},
		{
			"forge": "noise101",
			"fabric": "x1y0z1"
		},
		{
			"forge": "noise010",
			"fabric": "x0y1z0"
		},
		{
			"forge": "noise011",
			"fabric": "x0y1z1"
		},
		{
			"forge": "noise110",
			"fabric": "x1y1z0"
		},
		{
			"forge": "noise111",
			"fabric": "x1y1z1"
		},
		{
			"forge": "valueXZ00",
			"fabric": "x0z0"
		},
		{
			"forge": "valueXZ10",
			"fabric": "x1z0"
		},
		{
			"forge": "valueXZ01",
			"fabric": "x0z1"
		},
		{
			"forge": "valueXZ11",
			"fabric": "x1z1"
		},
		{
			"forge": "valueZ0",
			"fabric": "z0"
		},
		{
			"forge": "valueZ1",
			"fabric": "z1"
		},
		{
			"forge": "value",
			"fabric": "result"
		},
		{
			"forge": "allocateSlice(int arg0, int arg1)",
			"fabric": "createBuffer(int sizeZ, int sizeX)"
		},
		{
			"forge": "allocateSlice(int arg0, int arg1)",
			"fabric": "createBuffer(int sizeZ, int sizeX)"
		},
		{
			"forge": "selectCellYZ(int arg0, int arg1)",
			"fabric": "onSampledCellCorners(int cellY, int cellZ)"
		},
		{
			"forge": "updateForY(double arg0)",
			"fabric": "interpolateY(double deltaY)"
		},
		{
			"forge": "updateForX(double arg0)",
			"fabric": "interpolateX(double deltaX)"
		},
		{
			"forge": "updateForZ(double arg0)",
			"fabric": "interpolateZ(double deltaZ)"
		},
		{
			"forge": "compute(DensityFunction$FunctionContext arg0)",
			"fabric": "sample(DensityFunction$NoisePos arg0)"
		},
		{
			"forge": "fillArray(double[] arg0, DensityFunction$ContextProvider arg1)",
			"fabric": "fill(double[] arg0, DensityFunction$EachApplier arg1)"
		},
		{
			"forge": "wrapped()",
			"fabric": "wrapped()"
		},
		{
			"forge": "swapSlices()",
			"fabric": "swapBuffers()"
		},
		{
			"forge": "type()",
			"fabric": "type()"
		}
	]
}