{
	"title": "net.minecraft.world.level.lighting.LayerLightSectionStorage",
	"items": [
		{
			"forge": "net.minecraft.world.level.lighting.LayerLightSectionStorage",
			"fabric": "net.minecraft.world.chunk.light.LightStorage"
		},
		{
			"forge": "layer",
			"fabric": "lightType"
		},
		{
			"forge": "layer",
			"fabric": "lightType"
		},
		{
			"forge": "chunkSource",
			"fabric": "chunkProvider"
		},
		{
			"forge": "sectionStates",
			"fabric": "sectionPropagations"
		},
		{
			"forge": "columnsWithSources",
			"fabric": "enabledColumns"
		},
		{
			"forge": "visibleSectionData",
			"fabric": "uncachedStorage"
		},
		{
			"forge": "updatingSectionData",
			"fabric": "storage"
		},
		{
			"forge": "changedSections",
			"fabric": "dirtySections"
		},
		{
			"forge": "sectionsAffectedByLightUpdates",
			"fabric": "notifySections"
		},
		{
			"forge": "queuedSections",
			"fabric": "queuedSections"
		},
		{
			"forge": "columnsToRetainQueuedDataFor",
			"fabric": "columnsToRetain"
		},
		{
			"forge": "toRemove",
			"fabric": "sectionsToRemove"
		},
		{
			"forge": "hasInconsistencies",
			"fabric": "hasLightUpdates"
		},
		{
			"forge": "storingLightForSection(long arg0)",
			"fabric": "hasSection(long sectionPos)"
		},
		{
			"forge": "storingLightForSection(long arg0)",
			"fabric": "hasSection(long sectionPos)"
		},
		{
			"forge": "getDataLayer(long arg0, boolean arg1)",
			"fabric": "getLightSection(long sectionPos, boolean cached)"
		},
		{
			"forge": "getDataLayer(M arg0, long arg1)",
			"fabric": "getLightSection(M storage, long sectionPos)"
		},
		{
			"forge": "getDataLayerToWrite(long arg0)",
			"fabric": "method_51547(long sectionPos)"
		},
		{
			"forge": "getDataLayerData(long arg0)",
			"fabric": "getLightSection(long sectionPos)"
		},
		{
			"forge": "getLightValue(long arg0)",
			"fabric": "getLight(long blockPos)"
		},
		{
			"forge": "getStoredLevel(long arg0)",
			"fabric": "get(long blockPos)"
		},
		{
			"forge": "setStoredLevel(long arg0, int arg1)",
			"fabric": "set(long blockPos, int value)"
		},
		{
			"forge": "markSectionAndNeighborsAsAffected(long arg0)",
			"fabric": "addNotifySections(long id)"
		},
		{
			"forge": "createDataLayer(long arg0)",
			"fabric": "createSection(long sectionPos)"
		},
		{
			"forge": "hasInconsistencies()",
			"fabric": "hasLightUpdates()"
		},
		{
			"forge": "markNewInconsistencies(LightEngine<M, ?> arg0)",
			"fabric": "updateLight(ChunkLightProvider<M, ?> lightProvider)"
		},
		{
			"forge": "onNodeAdded(long arg0)",
			"fabric": "onLoadSection(long sectionPos)"
		},
		{
			"forge": "onNodeRemoved(long arg0)",
			"fabric": "onUnloadSection(long sectionPos)"
		},
		{
			"forge": "setLightEnabled(long arg0, boolean arg1)",
			"fabric": "setColumnEnabled(long columnPos, boolean enabled)"
		},
		{
			"forge": "lightOnInSection(long arg0)",
			"fabric": "isSectionInEnabledColumn(long sectionPos)"
		},
		{
			"forge": "retainData(long arg0, boolean arg1)",
			"fabric": "setRetainColumn(long sectionPos, boolean retain)"
		},
		{
			"forge": "queueSectionData(long arg0, DataLayer arg1)",
			"fabric": "enqueueSectionData(long sectionPos, ChunkNibbleArray array)"
		},
		{
			"forge": "updateSectionStatus(long arg0, boolean arg1)",
			"fabric": "setSectionStatus(long sectionPos, boolean notReady)"
		},
		{
			"forge": "putSectionState(long arg0, byte arg1)",
			"fabric": "setSectionPropagation(long sectionPos, byte flags)"
		},
		{
			"forge": "initializeSection(long arg0)",
			"fabric": "queueForUpdate(long sectionPos)"
		},
		{
			"forge": "removeSection(long arg0)",
			"fabric": "queueForRemoval(long sectionPos)"
		},
		{
			"forge": "swapSectionMap()",
			"fabric": "notifyChanges()"
		},
		{
			"forge": "getDebugSectionType(long arg0)",
			"fabric": "getStatus(long sectionPos)"
		}
	]
}