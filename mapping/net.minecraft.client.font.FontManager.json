{
	"title": "net.minecraft.client.gui.font.FontManager",
	"items": [
		{
			"forge": "net.minecraft.client.gui.font.FontManager",
			"fabric": "net.minecraft.client.font.FontManager"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "FONTS_PATH",
			"fabric": "FONTS_JSON"
		},
		{
			"forge": "MISSING_FONT",
			"fabric": "MISSING_STORAGE_ID"
		},
		{
			"forge": "FONT_DEFINITIONS",
			"fabric": "FINDER"
		},
		{
			"forge": "GSON",
			"fabric": "GSON"
		},
		{
			"forge": "missingFontSet",
			"fabric": "missingStorage"
		},
		{
			"forge": "providersToClose",
			"fabric": "fonts"
		},
		{
			"forge": "fontSets",
			"fabric": "fontStorages"
		},
		{
			"forge": "textureManager",
			"fabric": "textureManager"
		},
		{
			"forge": "renames",
			"fabric": "idOverrides"
		},
		{
			"forge": "reload(PreparableReloadListener$PreparationBarrier arg0, ResourceManager arg1, ProfilerFiller arg2, ProfilerFiller arg3, Executor arg4, Executor arg5)",
			"fabric": "reload(ResourceReloader$Synchronizer arg0, ResourceManager arg1, Profiler arg2, Profiler arg3, Executor arg4, Executor arg5)"
		},
		{
			"forge": "reload(PreparableReloadListener$PreparationBarrier arg0, ResourceManager arg1, ProfilerFiller arg2, ProfilerFiller arg3, Executor arg4, Executor arg5)",
			"fabric": "reload(ResourceReloader$Synchronizer arg0, ResourceManager arg1, Profiler arg2, Profiler arg3, Executor arg4, Executor arg5)"
		},
		{
			"forge": "prepare(ResourceManager arg0, Executor arg1)",
			"fabric": "loadIndex(ResourceManager resourceManager, Executor executor)"
		},
		{
			"forge": "safeLoad(FontManager$BuilderId arg0, GlyphProviderDefinition$Loader arg1, ResourceManager arg2, Executor arg3)",
			"fabric": "load(FontManager$FontKey key, FontLoader$Loadable loadable, ResourceManager resourceManager, Executor executor)"
		},
		{
			"forge": "resolveProviders(List<FontManager$UnresolvedBuilderBundle> arg0)",
			"fabric": "getRequiredFontProviders(List<FontManager$FontEntry> entries)"
		},
		{
			"forge": "finalizeProviderLoading(List<GlyphProvider> arg0, GlyphProvider arg1)",
			"fabric": "insertFont(List<Font> fonts, Font font)"
		},
		{
			"forge": "apply(FontManager$Preparation arg0, ProfilerFiller arg1)",
			"fabric": "reload(FontManager$ProviderIndex index, Profiler profiler)"
		},
		{
			"forge": "loadResourceStack(List<Resource> arg0, ResourceLocation arg1)",
			"fabric": "loadFontProviders(List<Resource> fontResources, Identifier id)"
		},
		{
			"forge": "setRenames(Map<ResourceLocation, ResourceLocation> arg0)",
			"fabric": "setIdOverrides(Map<Identifier, Identifier> idOverrides)"
		},
		{
			"forge": "getActualId(ResourceLocation arg0)",
			"fabric": "getEffectiveId(Identifier id)"
		},
		{
			"forge": "createFont()",
			"fabric": "createTextRenderer()"
		},
		{
			"forge": "createFontFilterFishy()",
			"fabric": "createAdvanceValidatingTextRenderer()"
		}
	]
}