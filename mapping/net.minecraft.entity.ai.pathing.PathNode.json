{
	"title": "net.minecraft.world.level.pathfinder.Node",
	"items": [
		{
			"forge": "net.minecraft.world.level.pathfinder.Node",
			"fabric": "net.minecraft.entity.ai.pathing.PathNode"
		},
		{
			"forge": "x",
			"fabric": "x"
		},
		{
			"forge": "x",
			"fabric": "x"
		},
		{
			"forge": "y",
			"fabric": "y"
		},
		{
			"forge": "z",
			"fabric": "z"
		},
		{
			"forge": "hash",
			"fabric": "hashCode"
		},
		{
			"forge": "heapIdx",
			"fabric": "heapIndex"
		},
		{
			"forge": "g",
			"fabric": "penalizedPathLength"
		},
		{
			"forge": "h",
			"fabric": "distanceToNearestTarget"
		},
		{
			"forge": "f",
			"fabric": "heapWeight"
		},
		{
			"forge": "cameFrom",
			"fabric": "previous"
		},
		{
			"forge": "closed",
			"fabric": "visited"
		},
		{
			"forge": "walkedDistance",
			"fabric": "pathLength"
		},
		{
			"forge": "costMalus",
			"fabric": "penalty"
		},
		{
			"forge": "type",
			"fabric": "type"
		},
		{
			"forge": "cloneAndMove(int arg0, int arg1, int arg2)",
			"fabric": "copyWithNewPosition(int x, int y, int z)"
		},
		{
			"forge": "cloneAndMove(int arg0, int arg1, int arg2)",
			"fabric": "copyWithNewPosition(int x, int y, int z)"
		},
		{
			"forge": "createHash(int arg0, int arg1, int arg2)",
			"fabric": "hash(int x, int y, int z)"
		},
		{
			"forge": "distanceTo(Node arg0)",
			"fabric": "getDistance(PathNode node)"
		},
		{
			"forge": "distanceToXZ(Node arg0)",
			"fabric": "getHorizontalDistance(PathNode node)"
		},
		{
			"forge": "distanceTo(BlockPos arg0)",
			"fabric": "getDistance(BlockPos pos)"
		},
		{
			"forge": "distanceToSqr(Node arg0)",
			"fabric": "getSquaredDistance(PathNode node)"
		},
		{
			"forge": "distanceToSqr(BlockPos arg0)",
			"fabric": "getSquaredDistance(BlockPos pos)"
		},
		{
			"forge": "distanceManhattan(Node arg0)",
			"fabric": "getManhattanDistance(PathNode node)"
		},
		{
			"forge": "distanceManhattan(BlockPos arg0)",
			"fabric": "getManhattanDistance(BlockPos pos)"
		},
		{
			"forge": "asBlockPos()",
			"fabric": "getBlockPos()"
		},
		{
			"forge": "asVec3()",
			"fabric": "getPos()"
		},
		{
			"forge": "inOpenSet()",
			"fabric": "isInHeap()"
		},
		{
			"forge": "writeToStream(FriendlyByteBuf arg0)",
			"fabric": "write(PacketByteBuf buf)"
		},
		{
			"forge": "createFromStream(FriendlyByteBuf arg0)",
			"fabric": "fromBuf(PacketByteBuf buf)"
		},
		{
			"forge": "readContents(FriendlyByteBuf arg0, Node arg1)",
			"fabric": "readFromBuf(PacketByteBuf buf, PathNode target)"
		}
	]
}