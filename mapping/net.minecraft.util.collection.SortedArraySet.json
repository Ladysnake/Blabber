{
	"title": "net.minecraft.util.SortedArraySet",
	"items": [
		{
			"forge": "net.minecraft.util.SortedArraySet",
			"fabric": "net.minecraft.util.collection.SortedArraySet"
		},
		{
			"forge": "DEFAULT_INITIAL_CAPACITY",
			"fabric": "DEFAULT_CAPACITY"
		},
		{
			"forge": "DEFAULT_INITIAL_CAPACITY",
			"fabric": "DEFAULT_CAPACITY"
		},
		{
			"forge": "comparator",
			"fabric": "comparator"
		},
		{
			"forge": "contents",
			"fabric": "elements"
		},
		{
			"forge": "size",
			"fabric": "size"
		},
		{
			"forge": "create()",
			"fabric": "create()"
		},
		{
			"forge": "create()",
			"fabric": "create()"
		},
		{
			"forge": "create(int arg0)",
			"fabric": "create(int initialCapacity)"
		},
		{
			"forge": "create(Comparator<T> arg0)",
			"fabric": "create(Comparator<T> comparator)"
		},
		{
			"forge": "create(Comparator<T> arg0, int arg1)",
			"fabric": "create(Comparator<T> comparator, int initialCapacity)"
		},
		{
			"forge": "castRawArray(Object[] arg0)",
			"fabric": "cast(Object[] array)"
		},
		{
			"forge": "findIndex(T arg0)",
			"fabric": "binarySearch(T object)"
		},
		{
			"forge": "getInsertionPosition(int arg0)",
			"fabric": "insertionPoint(int binarySearchResult)"
		},
		{
			"forge": "add(T arg0)",
			"fabric": "add(T object)"
		},
		{
			"forge": "grow(int arg0)",
			"fabric": "ensureCapacity(int minCapacity)"
		},
		{
			"forge": "addInternal(T arg0, int arg1)",
			"fabric": "add(T object, int index)"
		},
		{
			"forge": "removeInternal(int arg0)",
			"fabric": "remove(int index)"
		},
		{
			"forge": "getInternal(int arg0)",
			"fabric": "get(int index)"
		},
		{
			"forge": "addOrGet(T arg0)",
			"fabric": "addAndGet(T object)"
		},
		{
			"forge": "remove(Object arg0)",
			"fabric": "remove(Object object)"
		},
		{
			"forge": "get(T arg0)",
			"fabric": "getIfContains(T object)"
		},
		{
			"forge": "first()",
			"fabric": "first()"
		},
		{
			"forge": "last()",
			"fabric": "last()"
		},
		{
			"forge": "contains(Object arg0)",
			"fabric": "contains(Object object)"
		},
		{
			"forge": "toArray(U[] arg0)",
			"fabric": "toArray(U[] array)"
		}
	]
}