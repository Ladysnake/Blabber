{
	"title": "net.minecraft.client.gui.screens.worldselection.WorldOpenFlows",
	"items": [
		{
			"forge": "net.minecraft.client.gui.screens.worldselection.WorldOpenFlows",
			"fabric": "net.minecraft.server.integrated.IntegratedServerLoader"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "minecraft",
			"fabric": "client"
		},
		{
			"forge": "levelSource",
			"fabric": "storage"
		},
		{
			"forge": "loadLevel(Screen arg0, String arg1)",
			"fabric": "start(Screen parent, String levelName)"
		},
		{
			"forge": "loadLevel(Screen arg0, String arg1)",
			"fabric": "start(Screen parent, String levelName)"
		},
		{
			"forge": "createFreshLevel(String arg0, LevelSettings arg1, WorldOptions arg2, Function<RegistryAccess, WorldDimensions> arg3)",
			"fabric": "createAndStart(String levelName, LevelInfo levelInfo, GeneratorOptions dynamicRegistryManager, Function<DynamicRegistryManager, DimensionOptionsRegistryHolder> dimensionsRegistrySupplier)"
		},
		{
			"forge": "createWorldAccess(String arg0)",
			"fabric": "createSession(String levelName)"
		},
		{
			"forge": "createLevelFromExistingSettings(LevelStorageSource$LevelStorageAccess arg0, ReloadableServerResources arg1, LayeredRegistryAccess<RegistryLayer> arg2, WorldData arg3)",
			"fabric": "start(LevelStorage$Session session, DataPackContents dataPackContents, CombinedDynamicRegistries<ServerDynamicRegistryType> dynamicRegistryManager, SaveProperties saveProperties)"
		},
		{
			"forge": "loadWorldStem(LevelStorageSource$LevelStorageAccess arg0, boolean arg1, PackRepository arg2)",
			"fabric": "createSaveLoader(LevelStorage$Session session, boolean safeMode, ResourcePackManager dataPackManager)"
		},
		{
			"forge": "recreateWorldData(LevelStorageSource$LevelStorageAccess arg0)",
			"fabric": "loadForRecreation(LevelStorage$Session session)"
		},
		{
			"forge": "getPackConfigFromLevelData(LevelStorageSource$LevelStorageAccess arg0, boolean arg1, PackRepository arg2)",
			"fabric": "createDataPackConfig(LevelStorage$Session session, boolean safeMode, ResourcePackManager dataPackManager)"
		},
		{
			"forge": "loadWorldStem(LevelStorageSource$LevelStorageAccess arg0, boolean arg1)",
			"fabric": "createSaveLoader(LevelStorage$Session session, boolean safeMode)"
		},
		{
			"forge": "loadWorldDataBlocking(WorldLoader$PackConfig arg0, WorldLoader$WorldDataSupplier<D> arg1, WorldLoader$ResultFactory<D, R> arg2)",
			"fabric": "load(SaveLoading$DataPacks dataPacks, SaveLoading$LoadContextSupplier<D> loadContextSupplier, SaveLoading$SaveApplierFactory<D, R> saveApplierFactory)"
		},
		{
			"forge": "doLoadLevel(Screen arg0, String arg1, boolean arg2, boolean arg3)",
			"fabric": "start(Screen parent, String levelName, boolean safeMode, boolean canShowBackupPrompt)"
		},
		{
			"forge": "promptBundledPackLoadFailure()",
			"fabric": "showPackLoadFailureScreen()"
		},
		{
			"forge": "safeCloseAccess(LevelStorageSource$LevelStorageAccess arg0, String arg1)",
			"fabric": "close(LevelStorage$Session session, String levelName)"
		},
		{
			"forge": "askForBackup(Screen arg0, String arg1, boolean arg2, Runnable arg3)",
			"fabric": "showBackupPromptScreen(Screen parent, String levelName, boolean customized, Runnable callback)"
		},
		{
			"forge": "confirmWorldCreation(Minecraft arg0, CreateWorldScreen arg1, com.mojang.serialization.Lifecycle arg2, Runnable arg3, boolean arg4)",
			"fabric": "tryLoad(MinecraftClient client, CreateWorldScreen parent, com.mojang.serialization.Lifecycle lifecycle, Runnable loader, boolean bypassWarnings)"
		}
	]
}