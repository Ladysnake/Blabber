{
	"title": "net.minecraft.client.renderer.block.BlockRenderDispatcher",
	"items": [
		{
			"forge": "net.minecraft.client.renderer.block.BlockRenderDispatcher",
			"fabric": "net.minecraft.client.render.block.BlockRenderManager"
		},
		{
			"forge": "blockModelShaper",
			"fabric": "models"
		},
		{
			"forge": "blockModelShaper",
			"fabric": "models"
		},
		{
			"forge": "modelRenderer",
			"fabric": "blockModelRenderer"
		},
		{
			"forge": "blockEntityRenderer",
			"fabric": "builtinModelItemRenderer"
		},
		{
			"forge": "liquidBlockRenderer",
			"fabric": "fluidRenderer"
		},
		{
			"forge": "random",
			"fabric": "random"
		},
		{
			"forge": "blockColors",
			"fabric": "blockColors"
		},
		{
			"forge": "getBlockModelShaper()",
			"fabric": "getModels()"
		},
		{
			"forge": "getBlockModelShaper()",
			"fabric": "getModels()"
		},
		{
			"forge": "renderBreakingTexture(BlockState arg0, BlockPos arg1, BlockAndTintGetter arg2, PoseStack arg3, VertexConsumer arg4)",
			"fabric": "renderDamage(BlockState state, BlockPos pos, BlockRenderView world, MatrixStack matrices, VertexConsumer vertexConsumer)"
		},
		{
			"forge": "renderBatched(BlockState arg0, BlockPos arg1, BlockAndTintGetter arg2, PoseStack arg3, VertexConsumer arg4, boolean arg5, RandomSource arg6)",
			"fabric": "renderBlock(BlockState state, BlockPos pos, BlockRenderView world, MatrixStack matrices, VertexConsumer vertexConsumer, boolean cull, Random random)"
		},
		{
			"forge": "renderLiquid(BlockPos arg0, BlockAndTintGetter arg1, VertexConsumer arg2, BlockState arg3, FluidState arg4)",
			"fabric": "renderFluid(BlockPos pos, BlockRenderView world, VertexConsumer vertexConsumer, BlockState blockState, FluidState fluidState)"
		},
		{
			"forge": "getModelRenderer()",
			"fabric": "getModelRenderer()"
		},
		{
			"forge": "getBlockModel(BlockState arg0)",
			"fabric": "getModel(BlockState state)"
		},
		{
			"forge": "renderSingleBlock(BlockState arg0, PoseStack arg1, MultiBufferSource arg2, int arg3, int arg4)",
			"fabric": "renderBlockAsEntity(BlockState state, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay)"
		},
		{
			"forge": "onResourceManagerReload(ResourceManager arg0)",
			"fabric": "reload(ResourceManager arg0)"
		}
	]
}