{
	"title": "net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftCorridor",
	"items": [
		{
			"forge": "net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftCorridor",
			"fabric": "net.minecraft.structure.MineshaftGenerator$MineshaftCorridor"
		},
		{
			"forge": "hasRails",
			"fabric": "hasRails"
		},
		{
			"forge": "hasRails",
			"fabric": "hasRails"
		},
		{
			"forge": "spiderCorridor",
			"fabric": "hasCobwebs"
		},
		{
			"forge": "hasPlacedSpider",
			"fabric": "hasSpawner"
		},
		{
			"forge": "numSections",
			"fabric": "length"
		},
		{
			"forge": "addAdditionalSaveData(StructurePieceSerializationContext arg0, CompoundTag arg1)",
			"fabric": "writeNbt(StructureContext arg0, NbtCompound arg1)"
		},
		{
			"forge": "addAdditionalSaveData(StructurePieceSerializationContext arg0, CompoundTag arg1)",
			"fabric": "writeNbt(StructureContext arg0, NbtCompound arg1)"
		},
		{
			"forge": "findCorridorSize(StructurePieceAccessor arg0, RandomSource arg1, int arg2, int arg3, int arg4, Direction arg5)",
			"fabric": "getBoundingBox(StructurePiecesHolder holder, Random random, int x, int y, int z, Direction orientation)"
		},
		{
			"forge": "addChildren(StructurePiece arg0, StructurePieceAccessor arg1, RandomSource arg2)",
			"fabric": "fillOpenings(StructurePiece arg0, StructurePiecesHolder arg1, Random arg2)"
		},
		{
			"forge": "createChest(WorldGenLevel arg0, BoundingBox arg1, RandomSource arg2, int arg3, int arg4, int arg5, ResourceLocation arg6)",
			"fabric": "addChest(StructureWorldAccess arg0, BlockBox arg1, Random arg2, int arg3, int arg4, int arg5, Identifier arg6)"
		},
		{
			"forge": "postProcess(WorldGenLevel arg0, StructureManager arg1, ChunkGenerator arg2, RandomSource arg3, BoundingBox arg4, ChunkPos arg5, BlockPos arg6)",
			"fabric": "generate(StructureWorldAccess arg0, StructureAccessor arg1, ChunkGenerator arg2, Random arg3, BlockBox arg4, ChunkPos arg5, BlockPos arg6)"
		},
		{
			"forge": "placeDoubleLowerOrUpperSupport(WorldGenLevel arg0, BoundingBox arg1, int arg2, int arg3, int arg4)",
			"fabric": "fillSupportBeam(StructureWorldAccess world, BlockBox box, int x, int y, int z)"
		},
		{
			"forge": "fillColumnDown(WorldGenLevel arg0, BlockState arg1, int arg2, int arg3, int arg4, BoundingBox arg5)",
			"fabric": "fillDownwards(StructureWorldAccess arg0, BlockState arg1, int arg2, int arg3, int arg4, BlockBox arg5)"
		},
		{
			"forge": "fillPillarDownOrChainUp(WorldGenLevel arg0, BlockState arg1, int arg2, int arg3, int arg4, BoundingBox arg5)",
			"fabric": "fillSupportBeam(StructureWorldAccess world, BlockState state, int x, int y, int z, BlockBox box)"
		},
		{
			"forge": "fillColumnBetween(WorldGenLevel arg0, BlockState arg1, BlockPos$MutableBlockPos arg2, int arg3, int arg4)",
			"fabric": "fillColumn(StructureWorldAccess world, BlockState state, BlockPos$Mutable pos, int startY, int endY)"
		},
		{
			"forge": "canPlaceColumnOnTopOf(LevelReader arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "isUpsideSolidFullSquare(WorldView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "canHangChainBelow(LevelReader arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "sideCoversSmallSquare(WorldView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "placeSupport(WorldGenLevel arg0, BoundingBox arg1, int arg2, int arg3, int arg4, int arg5, int arg6, RandomSource arg7)",
			"fabric": "generateSupports(StructureWorldAccess world, BlockBox boundingBox, int minX, int minY, int z, int maxY, int maxX, Random random)"
		},
		{
			"forge": "maybePlaceCobWeb(WorldGenLevel arg0, BoundingBox arg1, RandomSource arg2, float arg3, int arg4, int arg5, int arg6)",
			"fabric": "addCobwebsUnderground(StructureWorldAccess world, BlockBox box, Random random, float threshold, int x, int y, int z)"
		},
		{
			"forge": "hasSturdyNeighbours(WorldGenLevel arg0, BoundingBox arg1, int arg2, int arg3, int arg4, int arg5)",
			"fabric": "hasSolidNeighborBlocks(StructureWorldAccess world, BlockBox box, int x, int y, int z, int count)"
		}
	]
}