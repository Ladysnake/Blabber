{
	"title": "net.minecraft.world.entity.ExperienceOrb",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ExperienceOrb",
			"fabric": "net.minecraft.entity.ExperienceOrbEntity"
		},
		{
			"forge": "LIFETIME",
			"fabric": "DESPAWN_AGE"
		},
		{
			"forge": "LIFETIME",
			"fabric": "DESPAWN_AGE"
		},
		{
			"forge": "ENTITY_SCAN_PERIOD",
			"fabric": "EXPENSIVE_UPDATE_INTERVAL"
		},
		{
			"forge": "MAX_FOLLOW_DIST",
			"fabric": "field_30057"
		},
		{
			"forge": "ORB_GROUPS_PER_AREA",
			"fabric": "MERGING_CHANCE_FRACTION"
		},
		{
			"forge": "ORB_MERGE_DISTANCE",
			"fabric": "field_30059"
		},
		{
			"forge": "age",
			"fabric": "orbAge"
		},
		{
			"forge": "health",
			"fabric": "health"
		},
		{
			"forge": "value",
			"fabric": "amount"
		},
		{
			"forge": "count",
			"fabric": "pickingCount"
		},
		{
			"forge": "followingPlayer",
			"fabric": "target"
		},
		{
			"forge": "getMovementEmission()",
			"fabric": "getMoveEffect()"
		},
		{
			"forge": "getMovementEmission()",
			"fabric": "getMoveEffect()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "getBlockPosBelowThatAffectsMyMovement()",
			"fabric": "getVelocityAffectingPos()"
		},
		{
			"forge": "scanForEntities()",
			"fabric": "expensiveUpdate()"
		},
		{
			"forge": "award(ServerLevel arg0, Vec3 arg1, int arg2)",
			"fabric": "spawn(ServerWorld world, Vec3d pos, int amount)"
		},
		{
			"forge": "tryMergeToExisting(ServerLevel arg0, Vec3 arg1, int arg2)",
			"fabric": "wasMergedIntoExistingOrb(ServerWorld world, Vec3d pos, int amount)"
		},
		{
			"forge": "canMerge(ExperienceOrb arg0)",
			"fabric": "isMergeable(ExperienceOrbEntity other)"
		},
		{
			"forge": "canMerge(ExperienceOrb arg0, int arg1, int arg2)",
			"fabric": "isMergeable(ExperienceOrbEntity orb, int seed, int amount)"
		},
		{
			"forge": "merge(ExperienceOrb arg0)",
			"fabric": "merge(ExperienceOrbEntity other)"
		},
		{
			"forge": "setUnderwaterMovement()",
			"fabric": "applyWaterMovement()"
		},
		{
			"forge": "doWaterSplashEffect()",
			"fabric": "onSwimmingStart()"
		},
		{
			"forge": "hurt(DamageSource arg0, float arg1)",
			"fabric": "damage(DamageSource arg0, float arg1)"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "playerTouch(Player arg0)",
			"fabric": "onPlayerCollision(PlayerEntity arg0)"
		},
		{
			"forge": "repairPlayerItems(Player arg0, int arg1)",
			"fabric": "repairPlayerGears(PlayerEntity player, int amount)"
		},
		{
			"forge": "durabilityToXp(int arg0)",
			"fabric": "getMendingRepairCost(int repairAmount)"
		},
		{
			"forge": "xpToDurability(int arg0)",
			"fabric": "getMendingRepairAmount(int experienceAmount)"
		},
		{
			"forge": "getValue()",
			"fabric": "getExperienceAmount()"
		},
		{
			"forge": "getIcon()",
			"fabric": "getOrbSize()"
		},
		{
			"forge": "getExperienceValue(int arg0)",
			"fabric": "roundToOrbSize(int value)"
		},
		{
			"forge": "isAttackable()",
			"fabric": "isAttackable()"
		},
		{
			"forge": "getAddEntityPacket()",
			"fabric": "createSpawnPacket()"
		},
		{
			"forge": "getSoundSource()",
			"fabric": "getSoundCategory()"
		}
	]
}