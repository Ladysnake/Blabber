{
	"title": "net.minecraft.world.level.biome.Climate$RTree",
	"items": [
		{
			"forge": "net.minecraft.world.level.biome.Climate$RTree",
			"fabric": "net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree"
		},
		{
			"forge": "CHILDREN_PER_NODE",
			"fabric": "MAX_NODES_FOR_SIMPLE_TREE"
		},
		{
			"forge": "CHILDREN_PER_NODE",
			"fabric": "MAX_NODES_FOR_SIMPLE_TREE"
		},
		{
			"forge": "root",
			"fabric": "firstNode"
		},
		{
			"forge": "lastResult",
			"fabric": "previousResultNode"
		},
		{
			"forge": "create(List<com.mojang.datafixers.util.Pair<Climate$ParameterPoint, T>> arg0)",
			"fabric": "create(List<com.mojang.datafixers.util.Pair<MultiNoiseUtil$NoiseHypercube, T>> entries)"
		},
		{
			"forge": "create(List<com.mojang.datafixers.util.Pair<Climate$ParameterPoint, T>> arg0)",
			"fabric": "create(List<com.mojang.datafixers.util.Pair<MultiNoiseUtil$NoiseHypercube, T>> entries)"
		},
		{
			"forge": "build(int arg0, List<? extends Climate$RTree$Node<T>> arg1)",
			"fabric": "createNode(int parameterNumber, List<? extends MultiNoiseUtil$SearchTree$TreeNode<T>> subTree)"
		},
		{
			"forge": "sort(List<? extends Climate$RTree$Node<T>> arg0, int arg1, int arg2, boolean arg3)",
			"fabric": "sortTree(List<? extends MultiNoiseUtil$SearchTree$TreeNode<T>> subTree, int parameterNumber, int currentParameter, boolean abs)"
		},
		{
			"forge": "comparator(int arg0, boolean arg1)",
			"fabric": "createNodeComparator(int currentParameter, boolean abs)"
		},
		{
			"forge": "bucketize(List<? extends Climate$RTree$Node<T>> arg0)",
			"fabric": "getBatchedTree(List<? extends MultiNoiseUtil$SearchTree$TreeNode<T>> nodes)"
		},
		{
			"forge": "cost(Climate$Parameter[] arg0)",
			"fabric": "getRangeLengthSum(MultiNoiseUtil$ParameterRange[] parameters)"
		},
		{
			"forge": "buildParameterSpace(List<? extends Climate$RTree$Node<T>> arg0)",
			"fabric": "getEnclosingParameters(List<? extends MultiNoiseUtil$SearchTree$TreeNode<T>> subTree)"
		},
		{
			"forge": "search(Climate$TargetPoint arg0, Climate$DistanceMetric<T> arg1)",
			"fabric": "get(MultiNoiseUtil$NoiseValuePoint point, MultiNoiseUtil$NodeDistanceFunction<T> distanceFunction)"
		}
	]
}