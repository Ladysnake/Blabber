{
	"title": "net.minecraft.world.entity.monster.piglin.PiglinAi",
	"items": [
		{
			"forge": "net.minecraft.world.entity.monster.piglin.PiglinAi",
			"fabric": "net.minecraft.entity.mob.PiglinBrain"
		},
		{
			"forge": "REPELLENT_DETECTION_RANGE_HORIZONTAL",
			"fabric": "field_30565"
		},
		{
			"forge": "REPELLENT_DETECTION_RANGE_HORIZONTAL",
			"fabric": "field_30565"
		},
		{
			"forge": "REPELLENT_DETECTION_RANGE_VERTICAL",
			"fabric": "field_30566"
		},
		{
			"forge": "BARTERING_ITEM",
			"fabric": "BARTERING_ITEM"
		},
		{
			"forge": "PLAYER_ANGER_RANGE",
			"fabric": "field_30567"
		},
		{
			"forge": "ANGER_DURATION",
			"fabric": "field_30568"
		},
		{
			"forge": "ADMIRE_DURATION",
			"fabric": "field_30569"
		},
		{
			"forge": "MAX_DISTANCE_TO_WALK_TO_ITEM",
			"fabric": "field_30570"
		},
		{
			"forge": "MAX_TIME_TO_WALK_TO_ITEM",
			"fabric": "field_30571"
		},
		{
			"forge": "HOW_LONG_TIME_TO_DISABLE_ADMIRE_WALKING_IF_CANT_REACH_ITEM",
			"fabric": "field_30572"
		},
		{
			"forge": "CELEBRATION_TIME",
			"fabric": "field_30573"
		},
		{
			"forge": "TIME_BETWEEN_HUNTS",
			"fabric": "HUNT_MEMORY_DURATION"
		},
		{
			"forge": "BABY_FLEE_DURATION_AFTER_GETTING_HIT",
			"fabric": "AVOID_TARGET_EXPIRY"
		},
		{
			"forge": "HIT_BY_PLAYER_MEMORY_TIMEOUT",
			"fabric": "ADMIRING_DISABLED_EXPIRY"
		},
		{
			"forge": "MAX_WALK_DISTANCE_TO_START_RIDING",
			"fabric": "field_30576"
		},
		{
			"forge": "RIDE_START_INTERVAL",
			"fabric": "MEMORY_TRANSFER_TASK_DURATION"
		},
		{
			"forge": "RIDE_DURATION",
			"fabric": "RIDE_TARGET_MEMORY_DURATION"
		},
		{
			"forge": "RETREAT_DURATION",
			"fabric": "AVOID_MEMORY_DURATION"
		},
		{
			"forge": "MELEE_ATTACK_COOLDOWN",
			"fabric": "field_30577"
		},
		{
			"forge": "EAT_COOLDOWN",
			"fabric": "field_30578"
		},
		{
			"forge": "DESIRED_DISTANCE_FROM_ENTITY_WHEN_AVOIDING",
			"fabric": "field_30579"
		},
		{
			"forge": "MAX_LOOK_DIST",
			"fabric": "field_30580"
		},
		{
			"forge": "MAX_LOOK_DIST_FOR_PLAYER_HOLDING_LOVED_ITEM",
			"fabric": "field_30581"
		},
		{
			"forge": "INTERACTION_RANGE",
			"fabric": "field_30582"
		},
		{
			"forge": "MIN_DESIRED_DIST_FROM_TARGET_WHEN_HOLDING_CROSSBOW",
			"fabric": "field_30583"
		},
		{
			"forge": "SPEED_WHEN_STRAFING_BACK_FROM_TARGET",
			"fabric": "CROSSBOW_ATTACK_FORWARD_MOVEMENT"
		},
		{
			"forge": "DESIRED_DISTANCE_FROM_ZOMBIFIED",
			"fabric": "field_30585"
		},
		{
			"forge": "AVOID_ZOMBIFIED_DURATION",
			"fabric": "GO_TO_ZOMBIFIED_MEMORY_DURATION"
		},
		{
			"forge": "BABY_AVOID_NEMESIS_DURATION",
			"fabric": "GO_TO_NEMESIS_MEMORY_DURATION"
		},
		{
			"forge": "PROBABILITY_OF_CELEBRATION_DANCE",
			"fabric": "field_30557"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_AVOIDING",
			"fabric": "field_30558"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_RETREATING",
			"fabric": "field_30559"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_MOUNTING",
			"fabric": "START_RIDING_SPEED"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_GOING_TO_WANTED_ITEM",
			"fabric": "field_30561"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_GOING_TO_CELEBRATE_LOCATION",
			"fabric": "field_30562"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_DANCING",
			"fabric": "field_30563"
		},
		{
			"forge": "SPEED_MULTIPLIER_WHEN_IDLING",
			"fabric": "field_30564"
		},
		{
			"forge": "makeBrain(Piglin arg0, Brain<Piglin> arg1)",
			"fabric": "create(PiglinEntity piglin, Brain<PiglinEntity> brain)"
		},
		{
			"forge": "makeBrain(Piglin arg0, Brain<Piglin> arg1)",
			"fabric": "create(PiglinEntity piglin, Brain<PiglinEntity> brain)"
		},
		{
			"forge": "initMemories(Piglin arg0, RandomSource arg1)",
			"fabric": "setHuntedRecently(PiglinEntity piglin, Random random)"
		},
		{
			"forge": "initCoreActivity(Brain<Piglin> arg0)",
			"fabric": "addCoreActivities(Brain<PiglinEntity> piglin)"
		},
		{
			"forge": "initIdleActivity(Brain<Piglin> arg0)",
			"fabric": "addIdleActivities(Brain<PiglinEntity> piglin)"
		},
		{
			"forge": "initFightActivity(Piglin arg0, Brain<Piglin> arg1)",
			"fabric": "addFightActivities(PiglinEntity piglin, Brain<PiglinEntity> brain)"
		},
		{
			"forge": "initCelebrateActivity(Brain<Piglin> arg0)",
			"fabric": "addCelebrateActivities(Brain<PiglinEntity> brain)"
		},
		{
			"forge": "initAdmireItemActivity(Brain<Piglin> arg0)",
			"fabric": "addAdmireItemActivities(Brain<PiglinEntity> brain)"
		},
		{
			"forge": "initRetreatActivity(Brain<Piglin> arg0)",
			"fabric": "addAvoidActivities(Brain<PiglinEntity> brain)"
		},
		{
			"forge": "initRideHoglinActivity(Brain<Piglin> arg0)",
			"fabric": "addRideActivities(Brain<PiglinEntity> brain)"
		},
		{
			"forge": "createLookBehaviors()",
			"fabric": "makeFollowTasks()"
		},
		{
			"forge": "createIdleLookBehaviors()",
			"fabric": "makeRandomFollowTask()"
		},
		{
			"forge": "createIdleMovementBehaviors()",
			"fabric": "makeRandomWanderTask()"
		},
		{
			"forge": "avoidRepellent()",
			"fabric": "makeGoToSoulFireTask()"
		},
		{
			"forge": "babyAvoidNemesis()",
			"fabric": "goToNemesisTask()"
		},
		{
			"forge": "avoidZombified()",
			"fabric": "makeFleeFromZombifiedPiglinTask()"
		},
		{
			"forge": "updateActivity(Piglin arg0)",
			"fabric": "tickActivities(PiglinEntity piglin)"
		},
		{
			"forge": "isBabyRidingBaby(Piglin arg0)",
			"fabric": "canRideHoglin(PiglinEntity piglin)"
		},
		{
			"forge": "pickUpItem(Piglin arg0, ItemEntity arg1)",
			"fabric": "loot(PiglinEntity piglin, ItemEntity drop)"
		},
		{
			"forge": "holdInOffhand(Piglin arg0, ItemStack arg1)",
			"fabric": "swapItemWithOffHand(PiglinEntity piglin, ItemStack stack)"
		},
		{
			"forge": "removeOneItemFromItemEntity(ItemEntity arg0)",
			"fabric": "getItemFromStack(ItemEntity stack)"
		},
		{
			"forge": "stopHoldingOffHandItem(Piglin arg0, boolean arg1)",
			"fabric": "consumeOffHandItem(PiglinEntity piglin, boolean barter)"
		},
		{
			"forge": "cancelAdmiring(Piglin arg0)",
			"fabric": "pickupItemWithOffHand(PiglinEntity piglin)"
		},
		{
			"forge": "putInInventory(Piglin arg0, ItemStack arg1)",
			"fabric": "barterItem(PiglinEntity piglin, ItemStack stack)"
		},
		{
			"forge": "throwItems(Piglin arg0, List<ItemStack> arg1)",
			"fabric": "doBarter(PiglinEntity piglin, List<ItemStack> items)"
		},
		{
			"forge": "throwItemsTowardRandomPos(Piglin arg0, List<ItemStack> arg1)",
			"fabric": "dropBarteredItem(PiglinEntity piglin, List<ItemStack> items)"
		},
		{
			"forge": "throwItemsTowardPlayer(Piglin arg0, Player arg1, List<ItemStack> arg2)",
			"fabric": "dropBarteredItem(PiglinEntity piglin, PlayerEntity player, List<ItemStack> items)"
		},
		{
			"forge": "throwItemsTowardPos(Piglin arg0, List<ItemStack> arg1, Vec3 arg2)",
			"fabric": "drop(PiglinEntity piglin, List<ItemStack> items, Vec3d pos)"
		},
		{
			"forge": "getBarterResponseItems(Piglin arg0)",
			"fabric": "getBarteredItem(PiglinEntity piglin)"
		},
		{
			"forge": "wantsToDance(LivingEntity arg0, LivingEntity arg1)",
			"fabric": "isHuntingTarget(LivingEntity piglin, LivingEntity target)"
		},
		{
			"forge": "wantsToPickup(Piglin arg0, ItemStack arg1)",
			"fabric": "canGather(PiglinEntity piglin, ItemStack stack)"
		},
		{
			"forge": "isLovedItem(ItemStack arg0)",
			"fabric": "isGoldenItem(ItemStack stack)"
		},
		{
			"forge": "wantsToStopRiding(Piglin arg0, Entity arg1)",
			"fabric": "canRide(PiglinEntity piglin, Entity ridden)"
		},
		{
			"forge": "isNearestValidAttackTarget(Piglin arg0, LivingEntity arg1)",
			"fabric": "isPreferredAttackTarget(PiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "isNearZombified(Piglin arg0)",
			"fabric": "getNearestZombifiedPiglin(PiglinEntity piglin)"
		},
		{
			"forge": "findNearestValidAttackTarget(Piglin arg0)",
			"fabric": "getPreferredTarget(PiglinEntity piglin)"
		},
		{
			"forge": "angerNearbyPiglins(Player arg0, boolean arg1)",
			"fabric": "onGuardedBlockInteracted(PlayerEntity player, boolean blockOpen)"
		},
		{
			"forge": "mobInteract(Piglin arg0, Player arg1, InteractionHand arg2)",
			"fabric": "playerInteract(PiglinEntity piglin, PlayerEntity player, Hand hand)"
		},
		{
			"forge": "canAdmire(Piglin arg0, ItemStack arg1)",
			"fabric": "isWillingToTrade(PiglinEntity piglin, ItemStack nearbyItems)"
		},
		{
			"forge": "wasHurtBy(Piglin arg0, LivingEntity arg1)",
			"fabric": "onAttacked(PiglinEntity piglin, LivingEntity attacker)"
		},
		{
			"forge": "maybeRetaliate(AbstractPiglin arg0, LivingEntity arg1)",
			"fabric": "tryRevenge(AbstractPiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "getSoundForCurrentActivity(Piglin arg0)",
			"fabric": "getCurrentActivitySound(PiglinEntity piglin)"
		},
		{
			"forge": "getSoundForActivity(Piglin arg0, Activity arg1)",
			"fabric": "getSound(PiglinEntity piglin, Activity activity)"
		},
		{
			"forge": "isNearAvoidTarget(Piglin arg0)",
			"fabric": "hasTargetToAvoid(PiglinEntity piglin)"
		},
		{
			"forge": "getVisibleAdultPiglins(Piglin arg0)",
			"fabric": "getNearbyVisiblePiglins(PiglinEntity piglin)"
		},
		{
			"forge": "getAdultPiglins(AbstractPiglin arg0)",
			"fabric": "getNearbyPiglins(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "isWearingGold(LivingEntity arg0)",
			"fabric": "wearsGoldArmor(LivingEntity entity)"
		},
		{
			"forge": "stopWalking(Piglin arg0)",
			"fabric": "stopWalking(PiglinEntity piglin)"
		},
		{
			"forge": "babySometimesRideBabyHoglin()",
			"fabric": "makeRememberRideableHoglinTask()"
		},
		{
			"forge": "broadcastAngerTarget(AbstractPiglin arg0, LivingEntity arg1)",
			"fabric": "angerAtCloserTargets(AbstractPiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "broadcastUniversalAnger(AbstractPiglin arg0)",
			"fabric": "angerNearbyPiglins(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "setAngerTarget(AbstractPiglin arg0, LivingEntity arg1)",
			"fabric": "becomeAngryWith(AbstractPiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "setAngerTargetToNearestTargetablePlayerIfFound(AbstractPiglin arg0, LivingEntity arg1)",
			"fabric": "becomeAngryWithPlayer(AbstractPiglinEntity piglin, LivingEntity player)"
		},
		{
			"forge": "setAngerTargetIfCloserThanCurrent(AbstractPiglin arg0, LivingEntity arg1)",
			"fabric": "angerAtIfCloser(AbstractPiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "getAngerTarget(AbstractPiglin arg0)",
			"fabric": "getAngryAt(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "getAvoidTarget(Piglin arg0)",
			"fabric": "getAvoiding(PiglinEntity piglin)"
		},
		{
			"forge": "getNearestVisibleTargetablePlayer(AbstractPiglin arg0)",
			"fabric": "getNearestDetectedPlayer(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "broadcastRetreat(Piglin arg0, LivingEntity arg1)",
			"fabric": "groupRunAwayFrom(PiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "retreatFromNearestTarget(Piglin arg0, LivingEntity arg1)",
			"fabric": "runAwayFromClosestTarget(PiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "wantsToStopFleeing(Piglin arg0)",
			"fabric": "shouldRunAwayFromHoglins(PiglinEntity piglin)"
		},
		{
			"forge": "piglinsEqualOrOutnumberHoglins(Piglin arg0)",
			"fabric": "hasNoAdvantageAgainstHoglins(PiglinEntity piglin)"
		},
		{
			"forge": "hoglinsOutnumberPiglins(Piglin arg0)",
			"fabric": "hasOutnumberedHoglins(PiglinEntity piglins)"
		},
		{
			"forge": "setAvoidTargetAndDontHuntForAWhile(Piglin arg0, LivingEntity arg1)",
			"fabric": "runAwayFrom(PiglinEntity piglin, LivingEntity target)"
		},
		{
			"forge": "dontKillAnyMoreHoglinsForAWhile(AbstractPiglin arg0)",
			"fabric": "rememberHunting(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "eat(Piglin arg0)",
			"fabric": "setEatenRecently(PiglinEntity piglin)"
		},
		{
			"forge": "getRandomNearbyPos(Piglin arg0)",
			"fabric": "findGround(PiglinEntity piglin)"
		},
		{
			"forge": "hasEatenRecently(Piglin arg0)",
			"fabric": "hasAteRecently(PiglinEntity piglin)"
		},
		{
			"forge": "isIdle(AbstractPiglin arg0)",
			"fabric": "hasIdleActivity(AbstractPiglinEntity piglin)"
		},
		{
			"forge": "hasCrossbow(LivingEntity arg0)",
			"fabric": "isHoldingCrossbow(LivingEntity piglin)"
		},
		{
			"forge": "admireGoldItem(LivingEntity arg0)",
			"fabric": "setAdmiringItem(LivingEntity entity)"
		},
		{
			"forge": "isAdmiringItem(Piglin arg0)",
			"fabric": "isAdmiringItem(PiglinEntity entity)"
		},
		{
			"forge": "isBarterCurrency(ItemStack arg0)",
			"fabric": "acceptsForBarter(ItemStack stack)"
		},
		{
			"forge": "isFood(ItemStack arg0)",
			"fabric": "isFood(ItemStack stack)"
		},
		{
			"forge": "isNearRepellent(Piglin arg0)",
			"fabric": "hasSoulFireNearby(PiglinEntity piglin)"
		},
		{
			"forge": "seesPlayerHoldingLovedItem(LivingEntity arg0)",
			"fabric": "hasPlayerHoldingWantedItemNearby(LivingEntity entity)"
		},
		{
			"forge": "doesntSeeAnyPlayerHoldingLovedItem(LivingEntity arg0)",
			"fabric": "canWander(LivingEntity piglin)"
		},
		{
			"forge": "isPlayerHoldingLovedItem(LivingEntity arg0)",
			"fabric": "isGoldHoldingPlayer(LivingEntity target)"
		},
		{
			"forge": "isAdmiringDisabled(Piglin arg0)",
			"fabric": "hasBeenHitByPlayer(PiglinEntity piglin)"
		},
		{
			"forge": "wasHurtRecently(LivingEntity arg0)",
			"fabric": "hasBeenHurt(LivingEntity piglin)"
		},
		{
			"forge": "isHoldingItemInOffHand(Piglin arg0)",
			"fabric": "hasItemInOffHand(PiglinEntity piglin)"
		},
		{
			"forge": "isNotHoldingLovedItemInOffHand(Piglin arg0)",
			"fabric": "doesNotHaveGoldInOffHand(PiglinEntity piglin)"
		},
		{
			"forge": "isZombified(EntityType<?> arg0)",
			"fabric": "isZombified(EntityType<?> entityType)"
		}
	]
}