{
	"title": "net.minecraft.world.level.LevelAccessor",
	"items": [
		{
			"forge": "net.minecraft.world.level.LevelAccessor",
			"fabric": "net.minecraft.world.WorldAccess"
		},
		{
			"forge": "dayTime()",
			"fabric": "getLunarTime()"
		},
		{
			"forge": "dayTime()",
			"fabric": "getLunarTime()"
		},
		{
			"forge": "nextSubTickCount()",
			"fabric": "getTickOrder()"
		},
		{
			"forge": "getBlockTicks()",
			"fabric": "getBlockTickScheduler()"
		},
		{
			"forge": "createTick(BlockPos arg0, T arg1, int arg2, TickPriority arg3)",
			"fabric": "createOrderedTick(BlockPos pos, T type, int delay, TickPriority priority)"
		},
		{
			"forge": "createTick(BlockPos arg0, T arg1, int arg2)",
			"fabric": "createOrderedTick(BlockPos pos, T type, int delay)"
		},
		{
			"forge": "scheduleTick(BlockPos arg0, Block arg1, int arg2, TickPriority arg3)",
			"fabric": "scheduleBlockTick(BlockPos pos, Block block, int delay, TickPriority priority)"
		},
		{
			"forge": "scheduleTick(BlockPos arg0, Block arg1, int arg2)",
			"fabric": "scheduleBlockTick(BlockPos pos, Block block, int delay)"
		},
		{
			"forge": "getFluidTicks()",
			"fabric": "getFluidTickScheduler()"
		},
		{
			"forge": "scheduleTick(BlockPos arg0, Fluid arg1, int arg2, TickPriority arg3)",
			"fabric": "scheduleFluidTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority)"
		},
		{
			"forge": "scheduleTick(BlockPos arg0, Fluid arg1, int arg2)",
			"fabric": "scheduleFluidTick(BlockPos pos, Fluid fluid, int delay)"
		},
		{
			"forge": "getLevelData()",
			"fabric": "getLevelProperties()"
		},
		{
			"forge": "getCurrentDifficultyAt(BlockPos arg0)",
			"fabric": "getLocalDifficulty(BlockPos pos)"
		},
		{
			"forge": "getServer()",
			"fabric": "getServer()"
		},
		{
			"forge": "getDifficulty()",
			"fabric": "getDifficulty()"
		},
		{
			"forge": "getChunkSource()",
			"fabric": "getChunkManager()"
		},
		{
			"forge": "hasChunk(int arg0, int arg1)",
			"fabric": "isChunkLoaded(int arg0, int arg1)"
		},
		{
			"forge": "getRandom()",
			"fabric": "getRandom()"
		},
		{
			"forge": "blockUpdated(BlockPos arg0, Block arg1)",
			"fabric": "updateNeighbors(BlockPos pos, Block block)"
		},
		{
			"forge": "neighborShapeChanged(Direction arg0, BlockState arg1, BlockPos arg2, BlockPos arg3, int arg4, int arg5)",
			"fabric": "replaceWithStateForNeighborUpdate(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int flags, int maxUpdateDepth)"
		},
		{
			"forge": "playSound(Player arg0, BlockPos arg1, SoundEvent arg2, SoundSource arg3)",
			"fabric": "playSound(PlayerEntity except, BlockPos pos, SoundEvent sound, SoundCategory category)"
		},
		{
			"forge": "playSound(Player arg0, BlockPos arg1, SoundEvent arg2, SoundSource arg3, float arg4, float arg5)",
			"fabric": "playSound(PlayerEntity except, BlockPos pos, SoundEvent sound, SoundCategory category, float volume, float pitch)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)",
			"fabric": "addParticle(ParticleEffect parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "levelEvent(Player arg0, int arg1, BlockPos arg2, int arg3)",
			"fabric": "syncWorldEvent(PlayerEntity player, int eventId, BlockPos pos, int data)"
		},
		{
			"forge": "levelEvent(int arg0, BlockPos arg1, int arg2)",
			"fabric": "syncWorldEvent(int eventId, BlockPos pos, int data)"
		},
		{
			"forge": "gameEvent(GameEvent arg0, Vec3 arg1, GameEvent$Context arg2)",
			"fabric": "emitGameEvent(GameEvent event, Vec3d emitterPos, GameEvent$Emitter emitter)"
		},
		{
			"forge": "gameEvent(Entity arg0, GameEvent arg1, Vec3 arg2)",
			"fabric": "emitGameEvent(Entity entity, GameEvent event, Vec3d pos)"
		},
		{
			"forge": "gameEvent(Entity arg0, GameEvent arg1, BlockPos arg2)",
			"fabric": "emitGameEvent(Entity entity, GameEvent event, BlockPos pos)"
		},
		{
			"forge": "gameEvent(GameEvent arg0, BlockPos arg1, GameEvent$Context arg2)",
			"fabric": "emitGameEvent(GameEvent event, BlockPos pos, GameEvent$Emitter emitter)"
		}
	]
}