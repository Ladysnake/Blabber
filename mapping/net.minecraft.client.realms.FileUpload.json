{
	"title": "com.mojang.realmsclient.client.FileUpload",
	"items": [
		{
			"forge": "com.mojang.realmsclient.client.FileUpload",
			"fabric": "net.minecraft.client.realms.FileUpload"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "MAX_RETRIES",
			"fabric": "MAX_ATTEMPTS"
		},
		{
			"forge": "UPLOAD_PATH",
			"fabric": "UPLOAD_ENDPOINT"
		},
		{
			"forge": "file",
			"fabric": "file"
		},
		{
			"forge": "worldId",
			"fabric": "worldId"
		},
		{
			"forge": "slotId",
			"fabric": "slotId"
		},
		{
			"forge": "uploadInfo",
			"fabric": "uploadInfo"
		},
		{
			"forge": "sessionId",
			"fabric": "sessionId"
		},
		{
			"forge": "username",
			"fabric": "username"
		},
		{
			"forge": "clientVersion",
			"fabric": "clientVersion"
		},
		{
			"forge": "uploadStatus",
			"fabric": "uploadStatus"
		},
		{
			"forge": "cancelled",
			"fabric": "cancelled"
		},
		{
			"forge": "uploadTask",
			"fabric": "uploadTask"
		},
		{
			"forge": "requestConfig",
			"fabric": "requestConfig"
		},
		{
			"forge": "upload(Consumer<UploadResult> arg0)",
			"fabric": "upload(Consumer<UploadResult> callback)"
		},
		{
			"forge": "upload(Consumer<UploadResult> arg0)",
			"fabric": "upload(Consumer<UploadResult> callback)"
		},
		{
			"forge": "cancel()",
			"fabric": "cancel()"
		},
		{
			"forge": "requestUpload(int arg0)",
			"fabric": "requestUpload(int currentAttempt)"
		},
		{
			"forge": "cleanup(org.apache.http.client.methods.HttpPost arg0, org.apache.http.impl.client.CloseableHttpClient arg1)",
			"fabric": "cleanup(org.apache.http.client.methods.HttpPost request, org.apache.http.impl.client.CloseableHttpClient client)"
		},
		{
			"forge": "setupRequest(org.apache.http.client.methods.HttpPost arg0)",
			"fabric": "setupRequest(org.apache.http.client.methods.HttpPost request)"
		},
		{
			"forge": "handleResponse(org.apache.http.HttpResponse arg0, UploadResult$Builder arg1)",
			"fabric": "handleResponse(org.apache.http.HttpResponse response, UploadResult$Builder uploadResultBuilder)"
		},
		{
			"forge": "shouldRetry(long arg0, int arg1)",
			"fabric": "shouldRetry(long retryDelaySeconds, int currentAttempt)"
		},
		{
			"forge": "retryUploadAfter(long arg0, int arg1)",
			"fabric": "retryUploadAfter(long retryDelaySeconds, int currentAttempt)"
		},
		{
			"forge": "getRetryDelaySeconds(org.apache.http.HttpResponse arg0)",
			"fabric": "getRetryDelaySeconds(org.apache.http.HttpResponse response)"
		},
		{
			"forge": "isFinished()",
			"fabric": "isFinished()"
		}
	]
}