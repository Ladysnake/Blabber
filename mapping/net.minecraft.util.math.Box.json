{
	"title": "net.minecraft.world.phys.AABB",
	"items": [
		{
			"forge": "net.minecraft.world.phys.AABB",
			"fabric": "net.minecraft.util.math.Box"
		},
		{
			"forge": "EPSILON",
			"fabric": "EPSILON"
		},
		{
			"forge": "EPSILON",
			"fabric": "EPSILON"
		},
		{
			"forge": "minX",
			"fabric": "minX"
		},
		{
			"forge": "minY",
			"fabric": "minY"
		},
		{
			"forge": "minZ",
			"fabric": "minZ"
		},
		{
			"forge": "maxX",
			"fabric": "maxX"
		},
		{
			"forge": "maxY",
			"fabric": "maxY"
		},
		{
			"forge": "maxZ",
			"fabric": "maxZ"
		},
		{
			"forge": "of(BoundingBox arg0)",
			"fabric": "from(BlockBox mutable)"
		},
		{
			"forge": "of(BoundingBox arg0)",
			"fabric": "from(BlockBox mutable)"
		},
		{
			"forge": "unitCubeFromLowerCorner(Vec3 arg0)",
			"fabric": "from(Vec3d pos)"
		},
		{
			"forge": "setMinX(double arg0)",
			"fabric": "withMinX(double minX)"
		},
		{
			"forge": "setMinY(double arg0)",
			"fabric": "withMinY(double minY)"
		},
		{
			"forge": "setMinZ(double arg0)",
			"fabric": "withMinZ(double minZ)"
		},
		{
			"forge": "setMaxX(double arg0)",
			"fabric": "withMaxX(double maxX)"
		},
		{
			"forge": "setMaxY(double arg0)",
			"fabric": "withMaxY(double maxY)"
		},
		{
			"forge": "setMaxZ(double arg0)",
			"fabric": "withMaxZ(double maxZ)"
		},
		{
			"forge": "min(Direction$Axis arg0)",
			"fabric": "getMin(Direction$Axis axis)"
		},
		{
			"forge": "max(Direction$Axis arg0)",
			"fabric": "getMax(Direction$Axis axis)"
		},
		{
			"forge": "contract(double arg0, double arg1, double arg2)",
			"fabric": "shrink(double x, double y, double z)"
		},
		{
			"forge": "expandTowards(Vec3 arg0)",
			"fabric": "stretch(Vec3d scale)"
		},
		{
			"forge": "expandTowards(double arg0, double arg1, double arg2)",
			"fabric": "stretch(double x, double y, double z)"
		},
		{
			"forge": "inflate(double arg0, double arg1, double arg2)",
			"fabric": "expand(double x, double y, double z)"
		},
		{
			"forge": "inflate(double arg0)",
			"fabric": "expand(double value)"
		},
		{
			"forge": "intersect(AABB arg0)",
			"fabric": "intersection(Box box)"
		},
		{
			"forge": "minmax(AABB arg0)",
			"fabric": "union(Box box)"
		},
		{
			"forge": "move(double arg0, double arg1, double arg2)",
			"fabric": "offset(double x, double y, double z)"
		},
		{
			"forge": "move(BlockPos arg0)",
			"fabric": "offset(BlockPos blockPos)"
		},
		{
			"forge": "move(Vec3 arg0)",
			"fabric": "offset(Vec3d vec)"
		},
		{
			"forge": "intersects(AABB arg0)",
			"fabric": "intersects(Box box)"
		},
		{
			"forge": "intersects(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)",
			"fabric": "intersects(double minX, double minY, double minZ, double maxX, double maxY, double maxZ)"
		},
		{
			"forge": "intersects(Vec3 arg0, Vec3 arg1)",
			"fabric": "intersects(Vec3d pos1, Vec3d pos2)"
		},
		{
			"forge": "contains(Vec3 arg0)",
			"fabric": "contains(Vec3d pos)"
		},
		{
			"forge": "contains(double arg0, double arg1, double arg2)",
			"fabric": "contains(double x, double y, double z)"
		},
		{
			"forge": "getSize()",
			"fabric": "getAverageSideLength()"
		},
		{
			"forge": "getXsize()",
			"fabric": "getXLength()"
		},
		{
			"forge": "getYsize()",
			"fabric": "getYLength()"
		},
		{
			"forge": "getZsize()",
			"fabric": "getZLength()"
		},
		{
			"forge": "deflate(double arg0, double arg1, double arg2)",
			"fabric": "contract(double x, double y, double z)"
		},
		{
			"forge": "deflate(double arg0)",
			"fabric": "contract(double value)"
		},
		{
			"forge": "clip(Vec3 arg0, Vec3 arg1)",
			"fabric": "raycast(Vec3d min, Vec3d max)"
		},
		{
			"forge": "clip(Iterable<AABB> arg0, Vec3 arg1, Vec3 arg2, BlockPos arg3)",
			"fabric": "raycast(Iterable<Box> boxes, Vec3d from, Vec3d to, BlockPos pos)"
		},
		{
			"forge": "getDirection(AABB arg0, Vec3 arg1, double[] arg2, Direction arg3, double arg4, double arg5, double arg6)",
			"fabric": "traceCollisionSide(Box box, Vec3d intersectingVector, double[] traceDistanceResult, Direction approachDirection, double deltaX, double deltaY, double deltaZ)"
		},
		{
			"forge": "clipPoint(double[] arg0, Direction arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9, Direction arg10, double arg11, double arg12, double arg13)",
			"fabric": "traceCollisionSide(double[] traceDistanceResult, Direction approachDirection, double deltaX, double deltaY, double deltaZ, double begin, double minX, double maxX, double minZ, double maxZ, Direction resultDirection, double startX, double startY, double startZ)"
		},
		{
			"forge": "distanceToSqr(Vec3 arg0)",
			"fabric": "squaredMagnitude(Vec3d pos)"
		},
		{
			"forge": "hasNaN()",
			"fabric": "isNaN()"
		},
		{
			"forge": "getCenter()",
			"fabric": "getCenter()"
		},
		{
			"forge": "ofSize(Vec3 arg0, double arg1, double arg2, double arg3)",
			"fabric": "of(Vec3d center, double dx, double dy, double dz)"
		}
	]
}