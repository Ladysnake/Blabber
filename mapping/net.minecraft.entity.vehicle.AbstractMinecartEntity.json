{
	"title": "net.minecraft.world.entity.vehicle.AbstractMinecart",
	"items": [
		{
			"forge": "net.minecraft.world.entity.vehicle.AbstractMinecart",
			"fabric": "net.minecraft.entity.vehicle.AbstractMinecartEntity"
		},
		{
			"forge": "DATA_ID_HURT",
			"fabric": "DAMAGE_WOBBLE_TICKS"
		},
		{
			"forge": "DATA_ID_HURT",
			"fabric": "DAMAGE_WOBBLE_TICKS"
		},
		{
			"forge": "DATA_ID_HURTDIR",
			"fabric": "DAMAGE_WOBBLE_SIDE"
		},
		{
			"forge": "DATA_ID_DAMAGE",
			"fabric": "DAMAGE_WOBBLE_STRENGTH"
		},
		{
			"forge": "DATA_ID_DISPLAY_BLOCK",
			"fabric": "CUSTOM_BLOCK_ID"
		},
		{
			"forge": "DATA_ID_DISPLAY_OFFSET",
			"fabric": "CUSTOM_BLOCK_OFFSET"
		},
		{
			"forge": "DATA_ID_CUSTOM_DISPLAY",
			"fabric": "CUSTOM_BLOCK_PRESENT"
		},
		{
			"forge": "POSE_DISMOUNT_HEIGHTS",
			"fabric": "DISMOUNT_FREE_Y_SPACES_NEEDED"
		},
		{
			"forge": "WATER_SLOWDOWN_FACTOR",
			"fabric": "VELOCITY_SLOWDOWN_MULTIPLIER"
		},
		{
			"forge": "flipped",
			"fabric": "yawFlipped"
		},
		{
			"forge": "onRails",
			"fabric": "onRail"
		},
		{
			"forge": "EXITS",
			"fabric": "ADJACENT_RAIL_POSITIONS_BY_SHAPE"
		},
		{
			"forge": "lSteps",
			"fabric": "clientInterpolationSteps"
		},
		{
			"forge": "lx",
			"fabric": "clientX"
		},
		{
			"forge": "ly",
			"fabric": "clientY"
		},
		{
			"forge": "lz",
			"fabric": "clientZ"
		},
		{
			"forge": "lyr",
			"fabric": "clientYaw"
		},
		{
			"forge": "lxr",
			"fabric": "clientPitch"
		},
		{
			"forge": "lxd",
			"fabric": "clientXVelocity"
		},
		{
			"forge": "lyd",
			"fabric": "clientYVelocity"
		},
		{
			"forge": "lzd",
			"fabric": "clientZVelocity"
		},
		{
			"forge": "createMinecart(Level arg0, double arg1, double arg2, double arg3, AbstractMinecart$Type arg4)",
			"fabric": "create(World world, double x, double y, double z, AbstractMinecartEntity$Type type)"
		},
		{
			"forge": "createMinecart(Level arg0, double arg1, double arg2, double arg3, AbstractMinecart$Type arg4)",
			"fabric": "create(World world, double x, double y, double z, AbstractMinecartEntity$Type type)"
		},
		{
			"forge": "getMovementEmission()",
			"fabric": "getMoveEffect()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "canCollideWith(Entity arg0)",
			"fabric": "collidesWith(Entity arg0)"
		},
		{
			"forge": "isPushable()",
			"fabric": "isPushable()"
		},
		{
			"forge": "getRelativePortalPosition(Direction$Axis arg0, BlockUtil$FoundRectangle arg1)",
			"fabric": "positionInPortal(Direction$Axis arg0, BlockLocating$Rectangle arg1)"
		},
		{
			"forge": "getPassengersRidingOffset()",
			"fabric": "getMountedHeightOffset()"
		},
		{
			"forge": "getDismountLocationForPassenger(LivingEntity arg0)",
			"fabric": "updatePassengerForDismount(LivingEntity arg0)"
		},
		{
			"forge": "hurt(DamageSource arg0, float arg1)",
			"fabric": "damage(DamageSource arg0, float arg1)"
		},
		{
			"forge": "getBlockSpeedFactor()",
			"fabric": "getVelocityMultiplier()"
		},
		{
			"forge": "destroy(DamageSource arg0)",
			"fabric": "dropItems(DamageSource damageSource)"
		},
		{
			"forge": "getDropItem()",
			"fabric": "getItem()"
		},
		{
			"forge": "animateHurt(float arg0)",
			"fabric": "animateDamage(float arg0)"
		},
		{
			"forge": "isPickable()",
			"fabric": "canHit()"
		},
		{
			"forge": "exits(RailShape arg0)",
			"fabric": "getAdjacentRailPositionsByShape(RailShape shape)"
		},
		{
			"forge": "getMotionDirection()",
			"fabric": "getMovementDirection()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "getMaxSpeed()",
			"fabric": "getMaxSpeed()"
		},
		{
			"forge": "activateMinecart(int arg0, int arg1, int arg2, boolean arg3)",
			"fabric": "onActivatorRail(int x, int y, int z, boolean powered)"
		},
		{
			"forge": "comeOffTrack()",
			"fabric": "moveOffRail()"
		},
		{
			"forge": "moveAlongTrack(BlockPos arg0, BlockState arg1)",
			"fabric": "moveOnRail(BlockPos pos, BlockState state)"
		},
		{
			"forge": "isOnRails()",
			"fabric": "isOnRail()"
		},
		{
			"forge": "isRedstoneConductor(BlockPos arg0)",
			"fabric": "willHitBlockAt(BlockPos pos)"
		},
		{
			"forge": "applyNaturalSlowdown()",
			"fabric": "applySlowdown()"
		},
		{
			"forge": "getPosOffs(double arg0, double arg1, double arg2, double arg3)",
			"fabric": "snapPositionToRailWithOffset(double x, double y, double z, double offset)"
		},
		{
			"forge": "getPos(double arg0, double arg1, double arg2)",
			"fabric": "snapPositionToRail(double x, double y, double z)"
		},
		{
			"forge": "getBoundingBoxForCulling()",
			"fabric": "getVisibilityBoundingBox()"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "push(Entity arg0)",
			"fabric": "pushAwayFrom(Entity arg0)"
		},
		{
			"forge": "lerpTo(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, boolean arg6)",
			"fabric": "updateTrackedPositionAndAngles(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, boolean arg6)"
		},
		{
			"forge": "lerpMotion(double arg0, double arg1, double arg2)",
			"fabric": "setVelocityClient(double arg0, double arg1, double arg2)"
		},
		{
			"forge": "setDamage(float arg0)",
			"fabric": "setDamageWobbleStrength(float damageWobbleStrength)"
		},
		{
			"forge": "getDamage()",
			"fabric": "getDamageWobbleStrength()"
		},
		{
			"forge": "setHurtTime(int arg0)",
			"fabric": "setDamageWobbleTicks(int wobbleTicks)"
		},
		{
			"forge": "getHurtTime()",
			"fabric": "getDamageWobbleTicks()"
		},
		{
			"forge": "setHurtDir(int arg0)",
			"fabric": "setDamageWobbleSide(int wobbleSide)"
		},
		{
			"forge": "getHurtDir()",
			"fabric": "getDamageWobbleSide()"
		},
		{
			"forge": "getMinecartType()",
			"fabric": "getMinecartType()"
		},
		{
			"forge": "getDisplayBlockState()",
			"fabric": "getContainedBlock()"
		},
		{
			"forge": "getDefaultDisplayBlockState()",
			"fabric": "getDefaultContainedBlock()"
		},
		{
			"forge": "getDisplayOffset()",
			"fabric": "getBlockOffset()"
		},
		{
			"forge": "getDefaultDisplayOffset()",
			"fabric": "getDefaultBlockOffset()"
		},
		{
			"forge": "setDisplayBlockState(BlockState arg0)",
			"fabric": "setCustomBlock(BlockState state)"
		},
		{
			"forge": "setDisplayOffset(int arg0)",
			"fabric": "setCustomBlockOffset(int offset)"
		},
		{
			"forge": "hasCustomDisplay()",
			"fabric": "hasCustomBlock()"
		},
		{
			"forge": "setCustomDisplay(boolean arg0)",
			"fabric": "setCustomBlockPresent(boolean present)"
		},
		{
			"forge": "getPickResult()",
			"fabric": "getPickBlockStack()"
		}
	]
}