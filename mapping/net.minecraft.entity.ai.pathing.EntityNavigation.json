{
	"title": "net.minecraft.world.entity.ai.navigation.PathNavigation",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.navigation.PathNavigation",
			"fabric": "net.minecraft.entity.ai.pathing.EntityNavigation"
		},
		{
			"forge": "MAX_TIME_RECOMPUTE",
			"fabric": "RECALCULATE_COOLDOWN"
		},
		{
			"forge": "MAX_TIME_RECOMPUTE",
			"fabric": "RECALCULATE_COOLDOWN"
		},
		{
			"forge": "STUCK_CHECK_INTERVAL",
			"fabric": "field_41545"
		},
		{
			"forge": "STUCK_THRESHOLD_DISTANCE_FACTOR",
			"fabric": "field_41546"
		},
		{
			"forge": "mob",
			"fabric": "entity"
		},
		{
			"forge": "level",
			"fabric": "world"
		},
		{
			"forge": "path",
			"fabric": "currentPath"
		},
		{
			"forge": "speedModifier",
			"fabric": "speed"
		},
		{
			"forge": "tick",
			"fabric": "tickCount"
		},
		{
			"forge": "lastStuckCheck",
			"fabric": "pathStartTime"
		},
		{
			"forge": "lastStuckCheckPos",
			"fabric": "pathStartPos"
		},
		{
			"forge": "timeoutCachedNode",
			"fabric": "lastNodePosition"
		},
		{
			"forge": "timeoutTimer",
			"fabric": "currentNodeMs"
		},
		{
			"forge": "lastTimeoutCheck",
			"fabric": "lastActiveTickMs"
		},
		{
			"forge": "timeoutLimit",
			"fabric": "currentNodeTimeout"
		},
		{
			"forge": "maxDistanceToWaypoint",
			"fabric": "nodeReachProximity"
		},
		{
			"forge": "hasDelayedRecomputation",
			"fabric": "inRecalculationCooldown"
		},
		{
			"forge": "timeLastRecompute",
			"fabric": "lastRecalculateTime"
		},
		{
			"forge": "nodeEvaluator",
			"fabric": "nodeMaker"
		},
		{
			"forge": "targetPos",
			"fabric": "currentTarget"
		},
		{
			"forge": "reachRange",
			"fabric": "currentDistance"
		},
		{
			"forge": "maxVisitedNodesMultiplier",
			"fabric": "rangeMultiplier"
		},
		{
			"forge": "pathFinder",
			"fabric": "pathNodeNavigator"
		},
		{
			"forge": "isStuck",
			"fabric": "nearPathStartPos"
		},
		{
			"forge": "resetMaxVisitedNodesMultiplier()",
			"fabric": "resetRangeMultiplier()"
		},
		{
			"forge": "resetMaxVisitedNodesMultiplier()",
			"fabric": "resetRangeMultiplier()"
		},
		{
			"forge": "setMaxVisitedNodesMultiplier(float arg0)",
			"fabric": "setRangeMultiplier(float rangeMultiplier)"
		},
		{
			"forge": "getTargetPos()",
			"fabric": "getTargetPos()"
		},
		{
			"forge": "createPathFinder(int arg0)",
			"fabric": "createPathNodeNavigator(int range)"
		},
		{
			"forge": "setSpeedModifier(double arg0)",
			"fabric": "setSpeed(double speed)"
		},
		{
			"forge": "recomputePath()",
			"fabric": "recalculatePath()"
		},
		{
			"forge": "createPath(double arg0, double arg1, double arg2, int arg3)",
			"fabric": "findPathTo(double x, double y, double z, int distance)"
		},
		{
			"forge": "createPath(Stream<BlockPos> arg0, int arg1)",
			"fabric": "findPathToAny(Stream<BlockPos> positions, int distance)"
		},
		{
			"forge": "createPath(Set<BlockPos> arg0, int arg1)",
			"fabric": "findPathTo(Set<BlockPos> positions, int distance)"
		},
		{
			"forge": "createPath(BlockPos arg0, int arg1)",
			"fabric": "findPathTo(BlockPos target, int distance)"
		},
		{
			"forge": "createPath(BlockPos arg0, int arg1, int arg2)",
			"fabric": "findPathTo(BlockPos target, int minDistance, int maxDistance)"
		},
		{
			"forge": "createPath(Entity arg0, int arg1)",
			"fabric": "findPathTo(Entity entity, int distance)"
		},
		{
			"forge": "createPath(Set<BlockPos> arg0, int arg1, boolean arg2, int arg3)",
			"fabric": "findPathTo(Set<BlockPos> positions, int range, boolean useHeadPos, int distance)"
		},
		{
			"forge": "createPath(Set<BlockPos> arg0, int arg1, boolean arg2, int arg3, float arg4)",
			"fabric": "findPathToAny(Set<BlockPos> positions, int range, boolean useHeadPos, int distance, float followRange)"
		},
		{
			"forge": "moveTo(double arg0, double arg1, double arg2, double arg3)",
			"fabric": "startMovingTo(double x, double y, double z, double speed)"
		},
		{
			"forge": "moveTo(Entity arg0, double arg1)",
			"fabric": "startMovingTo(Entity entity, double speed)"
		},
		{
			"forge": "moveTo(Path arg0, double arg1)",
			"fabric": "startMovingAlong(Path path, double speed)"
		},
		{
			"forge": "getPath()",
			"fabric": "getCurrentPath()"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "getGroundY(Vec3 arg0)",
			"fabric": "adjustTargetY(Vec3d pos)"
		},
		{
			"forge": "followThePath()",
			"fabric": "continueFollowingPath()"
		},
		{
			"forge": "shouldTargetNextNodeInDirection(Vec3 arg0)",
			"fabric": "shouldJumpToNextNode(Vec3d currentPos)"
		},
		{
			"forge": "doStuckDetection(Vec3 arg0)",
			"fabric": "checkTimeouts(Vec3d currentPos)"
		},
		{
			"forge": "timeoutPath()",
			"fabric": "resetNodeAndStop()"
		},
		{
			"forge": "resetStuckTimeout()",
			"fabric": "resetNode()"
		},
		{
			"forge": "isDone()",
			"fabric": "isIdle()"
		},
		{
			"forge": "isInProgress()",
			"fabric": "isFollowingPath()"
		},
		{
			"forge": "stop()",
			"fabric": "stop()"
		},
		{
			"forge": "getTempMobPos()",
			"fabric": "getPos()"
		},
		{
			"forge": "canUpdatePath()",
			"fabric": "isAtValidPosition()"
		},
		{
			"forge": "isInLiquid()",
			"fabric": "isInLiquid()"
		},
		{
			"forge": "trimPath()",
			"fabric": "adjustPath()"
		},
		{
			"forge": "canMoveDirectly(Vec3 arg0, Vec3 arg1)",
			"fabric": "canPathDirectlyThrough(Vec3d origin, Vec3d target)"
		},
		{
			"forge": "canCutCorner(BlockPathTypes arg0)",
			"fabric": "canJumpToNext(PathNodeType nodeType)"
		},
		{
			"forge": "isClearForMovementBetween(Mob arg0, Vec3 arg1, Vec3 arg2, boolean arg3)",
			"fabric": "doesNotCollide(MobEntity entity, Vec3d startPos, Vec3d entityPos, boolean includeFluids)"
		},
		{
			"forge": "isStableDestination(BlockPos arg0)",
			"fabric": "isValidPosition(BlockPos pos)"
		},
		{
			"forge": "getNodeEvaluator()",
			"fabric": "getNodeMaker()"
		},
		{
			"forge": "setCanFloat(boolean arg0)",
			"fabric": "setCanSwim(boolean canSwim)"
		},
		{
			"forge": "canFloat()",
			"fabric": "canSwim()"
		},
		{
			"forge": "shouldRecomputePath(BlockPos arg0)",
			"fabric": "shouldRecalculatePath(BlockPos pos)"
		},
		{
			"forge": "getMaxDistanceToWaypoint()",
			"fabric": "getNodeReachProximity()"
		},
		{
			"forge": "isStuck()",
			"fabric": "isNearPathStartPos()"
		}
	]
}