{
	"title": "net.minecraft.world.level.Level",
	"items": [
		{
			"forge": "net.minecraft.world.level.Level",
			"fabric": "net.minecraft.world.World"
		},
		{
			"forge": "RESOURCE_KEY_CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "RESOURCE_KEY_CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "OVERWORLD",
			"fabric": "OVERWORLD"
		},
		{
			"forge": "NETHER",
			"fabric": "NETHER"
		},
		{
			"forge": "END",
			"fabric": "END"
		},
		{
			"forge": "MAX_LEVEL_SIZE",
			"fabric": "HORIZONTAL_LIMIT"
		},
		{
			"forge": "LONG_PARTICLE_CLIP_RANGE",
			"fabric": "MAX_UPDATE_DEPTH"
		},
		{
			"forge": "SHORT_PARTICLE_CLIP_RANGE",
			"fabric": "field_30967"
		},
		{
			"forge": "MAX_BRIGHTNESS",
			"fabric": "field_30968"
		},
		{
			"forge": "TICKS_PER_DAY",
			"fabric": "field_30969"
		},
		{
			"forge": "MAX_ENTITY_SPAWN_Y",
			"fabric": "MAX_Y"
		},
		{
			"forge": "MIN_ENTITY_SPAWN_Y",
			"fabric": "MIN_Y"
		},
		{
			"forge": "blockEntityTickers",
			"fabric": "blockEntityTickers"
		},
		{
			"forge": "neighborUpdater",
			"fabric": "neighborUpdater"
		},
		{
			"forge": "pendingBlockEntityTickers",
			"fabric": "pendingBlockEntityTickers"
		},
		{
			"forge": "tickingBlockEntities",
			"fabric": "iteratingTickingBlockEntities"
		},
		{
			"forge": "thread",
			"fabric": "thread"
		},
		{
			"forge": "isDebug",
			"fabric": "debugWorld"
		},
		{
			"forge": "skyDarken",
			"fabric": "ambientDarkness"
		},
		{
			"forge": "randValue",
			"fabric": "lcgBlockSeed"
		},
		{
			"forge": "addend",
			"fabric": "lcgBlockSeedIncrement"
		},
		{
			"forge": "oRainLevel",
			"fabric": "rainGradientPrev"
		},
		{
			"forge": "rainLevel",
			"fabric": "rainGradient"
		},
		{
			"forge": "oThunderLevel",
			"fabric": "thunderGradientPrev"
		},
		{
			"forge": "thunderLevel",
			"fabric": "thunderGradient"
		},
		{
			"forge": "random",
			"fabric": "random"
		},
		{
			"forge": "threadSafeRandom",
			"fabric": "threadSafeRandom"
		},
		{
			"forge": "dimensionTypeId",
			"fabric": "dimension"
		},
		{
			"forge": "dimensionTypeRegistration",
			"fabric": "dimensionEntry"
		},
		{
			"forge": "levelData",
			"fabric": "properties"
		},
		{
			"forge": "profiler",
			"fabric": "profiler"
		},
		{
			"forge": "isClientSide",
			"fabric": "isClient"
		},
		{
			"forge": "worldBorder",
			"fabric": "border"
		},
		{
			"forge": "biomeManager",
			"fabric": "biomeAccess"
		},
		{
			"forge": "dimension",
			"fabric": "registryKey"
		},
		{
			"forge": "registryAccess",
			"fabric": "registryManager"
		},
		{
			"forge": "damageSources",
			"fabric": "damageSources"
		},
		{
			"forge": "subTickCount",
			"fabric": "tickOrder"
		},
		{
			"forge": "isClientSide()",
			"fabric": "isClient()"
		},
		{
			"forge": "isClientSide()",
			"fabric": "isClient()"
		},
		{
			"forge": "getServer()",
			"fabric": "getServer()"
		},
		{
			"forge": "isInWorldBounds(BlockPos arg0)",
			"fabric": "isInBuildLimit(BlockPos pos)"
		},
		{
			"forge": "isInSpawnableBounds(BlockPos arg0)",
			"fabric": "isValid(BlockPos pos)"
		},
		{
			"forge": "isInWorldBoundsHorizontal(BlockPos arg0)",
			"fabric": "isValidHorizontally(BlockPos pos)"
		},
		{
			"forge": "isOutsideSpawnableHeight(int arg0)",
			"fabric": "isInvalidVertically(int y)"
		},
		{
			"forge": "getChunkAt(BlockPos arg0)",
			"fabric": "getWorldChunk(BlockPos pos)"
		},
		{
			"forge": "getChunk(int arg0, int arg1)",
			"fabric": "getChunk(int arg0, int arg1)"
		},
		{
			"forge": "getChunk(int arg0, int arg1, ChunkStatus arg2, boolean arg3)",
			"fabric": "getChunk(int arg0, int arg1, ChunkStatus arg2, boolean arg3)"
		},
		{
			"forge": "setBlock(BlockPos arg0, BlockState arg1, int arg2)",
			"fabric": "setBlockState(BlockPos arg0, BlockState arg1, int arg2)"
		},
		{
			"forge": "setBlock(BlockPos arg0, BlockState arg1, int arg2, int arg3)",
			"fabric": "setBlockState(BlockPos arg0, BlockState arg1, int arg2, int arg3)"
		},
		{
			"forge": "onBlockStateChange(BlockPos arg0, BlockState arg1, BlockState arg2)",
			"fabric": "onBlockChanged(BlockPos pos, BlockState oldBlock, BlockState newBlock)"
		},
		{
			"forge": "removeBlock(BlockPos arg0, boolean arg1)",
			"fabric": "removeBlock(BlockPos arg0, boolean arg1)"
		},
		{
			"forge": "destroyBlock(BlockPos arg0, boolean arg1, Entity arg2, int arg3)",
			"fabric": "breakBlock(BlockPos arg0, boolean arg1, Entity arg2, int arg3)"
		},
		{
			"forge": "addDestroyBlockEffect(BlockPos arg0, BlockState arg1)",
			"fabric": "addBlockBreakParticles(BlockPos pos, BlockState state)"
		},
		{
			"forge": "setBlockAndUpdate(BlockPos arg0, BlockState arg1)",
			"fabric": "setBlockState(BlockPos pos, BlockState state)"
		},
		{
			"forge": "sendBlockUpdated(BlockPos arg0, BlockState arg1, BlockState arg2, int arg3)",
			"fabric": "updateListeners(BlockPos pos, BlockState oldState, BlockState newState, int flags)"
		},
		{
			"forge": "setBlocksDirty(BlockPos arg0, BlockState arg1, BlockState arg2)",
			"fabric": "scheduleBlockRerenderIfNeeded(BlockPos pos, BlockState old, BlockState updated)"
		},
		{
			"forge": "updateNeighborsAt(BlockPos arg0, Block arg1)",
			"fabric": "updateNeighborsAlways(BlockPos pos, Block sourceBlock)"
		},
		{
			"forge": "updateNeighborsAtExceptFromFacing(BlockPos arg0, Block arg1, Direction arg2)",
			"fabric": "updateNeighborsExcept(BlockPos pos, Block sourceBlock, Direction direction)"
		},
		{
			"forge": "neighborChanged(BlockPos arg0, Block arg1, BlockPos arg2)",
			"fabric": "updateNeighbor(BlockPos pos, Block sourceBlock, BlockPos sourcePos)"
		},
		{
			"forge": "neighborChanged(BlockState arg0, BlockPos arg1, Block arg2, BlockPos arg3, boolean arg4)",
			"fabric": "updateNeighbor(BlockState state, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify)"
		},
		{
			"forge": "neighborShapeChanged(Direction arg0, BlockState arg1, BlockPos arg2, BlockPos arg3, int arg4, int arg5)",
			"fabric": "replaceWithStateForNeighborUpdate(Direction arg0, BlockState arg1, BlockPos arg2, BlockPos arg3, int arg4, int arg5)"
		},
		{
			"forge": "getHeight(Heightmap$Types arg0, int arg1, int arg2)",
			"fabric": "getTopY(Heightmap$Type arg0, int arg1, int arg2)"
		},
		{
			"forge": "getLightEngine()",
			"fabric": "getLightingProvider()"
		},
		{
			"forge": "getBlockState(BlockPos arg0)",
			"fabric": "getBlockState(BlockPos arg0)"
		},
		{
			"forge": "getFluidState(BlockPos arg0)",
			"fabric": "getFluidState(BlockPos arg0)"
		},
		{
			"forge": "isDay()",
			"fabric": "isDay()"
		},
		{
			"forge": "isNight()",
			"fabric": "isNight()"
		},
		{
			"forge": "playSound(Entity arg0, BlockPos arg1, SoundEvent arg2, SoundSource arg3, float arg4, float arg5)",
			"fabric": "playSound(Entity except, BlockPos pos, SoundEvent sound, SoundCategory category, float volume, float pitch)"
		},
		{
			"forge": "playSound(Player arg0, BlockPos arg1, SoundEvent arg2, SoundSource arg3, float arg4, float arg5)",
			"fabric": "playSound(PlayerEntity arg0, BlockPos arg1, SoundEvent arg2, SoundCategory arg3, float arg4, float arg5)"
		},
		{
			"forge": "playSeededSound(Player arg0, double arg1, double arg2, double arg3, Holder<SoundEvent> arg4, SoundSource arg5, float arg6, float arg7, long arg8)",
			"fabric": "playSound(PlayerEntity except, double x, double y, double z, RegistryEntry<SoundEvent> sound, SoundCategory category, float volume, float pitch, long seed)"
		},
		{
			"forge": "playSeededSound(Player arg0, double arg1, double arg2, double arg3, SoundEvent arg4, SoundSource arg5, float arg6, float arg7, long arg8)",
			"fabric": "playSound(PlayerEntity except, double x, double y, double z, SoundEvent sound, SoundCategory category, float volume, float pitch, long seed)"
		},
		{
			"forge": "playSeededSound(Player arg0, Entity arg1, Holder<SoundEvent> arg2, SoundSource arg3, float arg4, float arg5, long arg6)",
			"fabric": "playSoundFromEntity(PlayerEntity except, Entity entity, RegistryEntry<SoundEvent> sound, SoundCategory category, float volume, float pitch, long seed)"
		},
		{
			"forge": "playSound(Player arg0, double arg1, double arg2, double arg3, SoundEvent arg4, SoundSource arg5, float arg6, float arg7)",
			"fabric": "playSound(PlayerEntity except, double x, double y, double z, SoundEvent sound, SoundCategory category, float volume, float pitch)"
		},
		{
			"forge": "playSound(Player arg0, Entity arg1, SoundEvent arg2, SoundSource arg3, float arg4, float arg5)",
			"fabric": "playSoundFromEntity(PlayerEntity except, Entity entity, SoundEvent sound, SoundCategory category, float volume, float pitch)"
		},
		{
			"forge": "playLocalSound(BlockPos arg0, SoundEvent arg1, SoundSource arg2, float arg3, float arg4, boolean arg5)",
			"fabric": "playSoundAtBlockCenter(BlockPos pos, SoundEvent sound, SoundCategory category, float volume, float pitch, boolean useDistance)"
		},
		{
			"forge": "playLocalSound(double arg0, double arg1, double arg2, SoundEvent arg3, SoundSource arg4, float arg5, float arg6, boolean arg7)",
			"fabric": "playSound(double x, double y, double z, SoundEvent sound, SoundCategory category, float volume, float pitch, boolean useDistance)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)",
			"fabric": "addParticle(ParticleEffect arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)"
		},
		{
			"forge": "addParticle(ParticleOptions arg0, boolean arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)",
			"fabric": "addParticle(ParticleEffect parameters, boolean alwaysSpawn, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addAlwaysVisibleParticle(ParticleOptions arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)",
			"fabric": "addImportantParticle(ParticleEffect parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "addAlwaysVisibleParticle(ParticleOptions arg0, boolean arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)",
			"fabric": "addImportantParticle(ParticleEffect parameters, boolean alwaysSpawn, double x, double y, double z, double velocityX, double velocityY, double velocityZ)"
		},
		{
			"forge": "getSunAngle(float arg0)",
			"fabric": "getSkyAngleRadians(float tickDelta)"
		},
		{
			"forge": "addBlockEntityTicker(TickingBlockEntity arg0)",
			"fabric": "addBlockEntityTicker(BlockEntityTickInvoker ticker)"
		},
		{
			"forge": "tickBlockEntities()",
			"fabric": "tickBlockEntities()"
		},
		{
			"forge": "guardEntityTick(Consumer<T> arg0, T arg1)",
			"fabric": "tickEntity(Consumer<T> tickConsumer, T entity)"
		},
		{
			"forge": "shouldTickDeath(Entity arg0)",
			"fabric": "shouldUpdatePostDeath(Entity entity)"
		},
		{
			"forge": "shouldTickBlocksAt(long arg0)",
			"fabric": "shouldTickBlocksInChunk(long chunkPos)"
		},
		{
			"forge": "shouldTickBlocksAt(BlockPos arg0)",
			"fabric": "shouldTickBlockPos(BlockPos pos)"
		},
		{
			"forge": "explode(Entity arg0, double arg1, double arg2, double arg3, float arg4, Level$ExplosionInteraction arg5)",
			"fabric": "createExplosion(Entity entity, double x, double y, double z, float power, World$ExplosionSourceType explosionSourceType)"
		},
		{
			"forge": "explode(Entity arg0, double arg1, double arg2, double arg3, float arg4, boolean arg5, Level$ExplosionInteraction arg6)",
			"fabric": "createExplosion(Entity entity, double x, double y, double z, float power, boolean createFire, World$ExplosionSourceType explosionSourceType)"
		},
		{
			"forge": "explode(Entity arg0, DamageSource arg1, ExplosionDamageCalculator arg2, Vec3 arg3, float arg4, boolean arg5, Level$ExplosionInteraction arg6)",
			"fabric": "createExplosion(Entity entity, DamageSource damageSource, ExplosionBehavior behavior, Vec3d pos, float power, boolean createFire, World$ExplosionSourceType explosionSourceType)"
		},
		{
			"forge": "explode(Entity arg0, DamageSource arg1, ExplosionDamageCalculator arg2, double arg3, double arg4, double arg5, float arg6, boolean arg7, Level$ExplosionInteraction arg8)",
			"fabric": "createExplosion(Entity entity, DamageSource damageSource, ExplosionBehavior behavior, double x, double y, double z, float power, boolean createFire, World$ExplosionSourceType explosionSourceType)"
		},
		{
			"forge": "explode(Entity arg0, DamageSource arg1, ExplosionDamageCalculator arg2, double arg3, double arg4, double arg5, float arg6, boolean arg7, Level$ExplosionInteraction arg8, boolean arg9)",
			"fabric": "createExplosion(Entity entity, DamageSource damageSource, ExplosionBehavior behavior, double x, double y, double z, float power, boolean createFire, World$ExplosionSourceType explosionSourceType, boolean particles)"
		},
		{
			"forge": "getDestroyType(GameRules$Key<GameRules$BooleanValue> arg0)",
			"fabric": "getDestructionType(GameRules$Key<GameRules$BooleanRule> gameRuleKey)"
		},
		{
			"forge": "gatherChunkSourceStats()",
			"fabric": "asString()"
		},
		{
			"forge": "getBlockEntity(BlockPos arg0)",
			"fabric": "getBlockEntity(BlockPos arg0)"
		},
		{
			"forge": "setBlockEntity(BlockEntity arg0)",
			"fabric": "addBlockEntity(BlockEntity blockEntity)"
		},
		{
			"forge": "removeBlockEntity(BlockPos arg0)",
			"fabric": "removeBlockEntity(BlockPos pos)"
		},
		{
			"forge": "isLoaded(BlockPos arg0)",
			"fabric": "canSetBlock(BlockPos pos)"
		},
		{
			"forge": "loadedAndEntityCanStandOnFace(BlockPos arg0, Entity arg1, Direction arg2)",
			"fabric": "isDirectionSolid(BlockPos pos, Entity entity, Direction direction)"
		},
		{
			"forge": "loadedAndEntityCanStandOn(BlockPos arg0, Entity arg1)",
			"fabric": "isTopSolid(BlockPos pos, Entity entity)"
		},
		{
			"forge": "updateSkyBrightness()",
			"fabric": "calculateAmbientDarkness()"
		},
		{
			"forge": "setSpawnSettings(boolean arg0, boolean arg1)",
			"fabric": "setMobSpawnOptions(boolean spawnMonsters, boolean spawnAnimals)"
		},
		{
			"forge": "getSharedSpawnPos()",
			"fabric": "getSpawnPos()"
		},
		{
			"forge": "getSharedSpawnAngle()",
			"fabric": "getSpawnAngle()"
		},
		{
			"forge": "prepareWeather()",
			"fabric": "initWeatherGradients()"
		},
		{
			"forge": "getChunkForCollisions(int arg0, int arg1)",
			"fabric": "getChunkAsView(int arg0, int arg1)"
		},
		{
			"forge": "getEntities(Entity arg0, AABB arg1, Predicate<? super Entity> arg2)",
			"fabric": "getOtherEntities(Entity arg0, Box arg1, Predicate<? super Entity> arg2)"
		},
		{
			"forge": "getEntities(EntityTypeTest<Entity, T> arg0, AABB arg1, Predicate<? super T> arg2)",
			"fabric": "getEntitiesByType(TypeFilter<Entity, T> arg0, Box arg1, Predicate<? super T> arg2)"
		},
		{
			"forge": "getEntities(EntityTypeTest<Entity, T> arg0, AABB arg1, Predicate<? super T> arg2, List<? super T> arg3)",
			"fabric": "collectEntitiesByType(TypeFilter<Entity, T> filter, Box box, Predicate<? super T> predicate, List<? super T> result)"
		},
		{
			"forge": "getEntities(EntityTypeTest<Entity, T> arg0, AABB arg1, Predicate<? super T> arg2, List<? super T> arg3, int arg4)",
			"fabric": "collectEntitiesByType(TypeFilter<Entity, T> filter, Box box, Predicate<? super T> predicate, List<? super T> result, int limit)"
		},
		{
			"forge": "getEntity(int arg0)",
			"fabric": "getEntityById(int id)"
		},
		{
			"forge": "blockEntityChanged(BlockPos arg0)",
			"fabric": "markDirty(BlockPos pos)"
		},
		{
			"forge": "getSeaLevel()",
			"fabric": "getSeaLevel()"
		},
		{
			"forge": "disconnect()",
			"fabric": "disconnect()"
		},
		{
			"forge": "getGameTime()",
			"fabric": "getTime()"
		},
		{
			"forge": "getDayTime()",
			"fabric": "getTimeOfDay()"
		},
		{
			"forge": "mayInteract(Player arg0, BlockPos arg1)",
			"fabric": "canPlayerModifyAt(PlayerEntity player, BlockPos pos)"
		},
		{
			"forge": "broadcastEntityEvent(Entity arg0, byte arg1)",
			"fabric": "sendEntityStatus(Entity entity, byte status)"
		},
		{
			"forge": "broadcastDamageEvent(Entity arg0, DamageSource arg1)",
			"fabric": "sendEntityDamage(Entity entity, DamageSource damageSource)"
		},
		{
			"forge": "blockEvent(BlockPos arg0, Block arg1, int arg2, int arg3)",
			"fabric": "addSyncedBlockEvent(BlockPos pos, Block block, int type, int data)"
		},
		{
			"forge": "getLevelData()",
			"fabric": "getLevelProperties()"
		},
		{
			"forge": "getGameRules()",
			"fabric": "getGameRules()"
		},
		{
			"forge": "getThunderLevel(float arg0)",
			"fabric": "getThunderGradient(float delta)"
		},
		{
			"forge": "setThunderLevel(float arg0)",
			"fabric": "setThunderGradient(float thunderGradient)"
		},
		{
			"forge": "getRainLevel(float arg0)",
			"fabric": "getRainGradient(float delta)"
		},
		{
			"forge": "setRainLevel(float arg0)",
			"fabric": "setRainGradient(float rainGradient)"
		},
		{
			"forge": "isThundering()",
			"fabric": "isThundering()"
		},
		{
			"forge": "isRaining()",
			"fabric": "isRaining()"
		},
		{
			"forge": "isRainingAt(BlockPos arg0)",
			"fabric": "hasRain(BlockPos pos)"
		},
		{
			"forge": "getMapData(String arg0)",
			"fabric": "getMapState(String id)"
		},
		{
			"forge": "setMapData(String arg0, MapItemSavedData arg1)",
			"fabric": "putMapState(String id, MapState state)"
		},
		{
			"forge": "getFreeMapId()",
			"fabric": "getNextMapId()"
		},
		{
			"forge": "globalLevelEvent(int arg0, BlockPos arg1, int arg2)",
			"fabric": "syncGlobalEvent(int eventId, BlockPos pos, int data)"
		},
		{
			"forge": "fillReportDetails(CrashReport arg0)",
			"fabric": "addDetailsToCrashReport(CrashReport report)"
		},
		{
			"forge": "destroyBlockProgress(int arg0, BlockPos arg1, int arg2)",
			"fabric": "setBlockBreakingInfo(int entityId, BlockPos pos, int progress)"
		},
		{
			"forge": "createFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, CompoundTag arg6)",
			"fabric": "addFireworkParticle(double x, double y, double z, double velocityX, double velocityY, double velocityZ, NbtCompound nbt)"
		},
		{
			"forge": "getScoreboard()",
			"fabric": "getScoreboard()"
		},
		{
			"forge": "updateNeighbourForOutputSignal(BlockPos arg0, Block arg1)",
			"fabric": "updateComparators(BlockPos pos, Block block)"
		},
		{
			"forge": "getCurrentDifficultyAt(BlockPos arg0)",
			"fabric": "getLocalDifficulty(BlockPos arg0)"
		},
		{
			"forge": "getSkyDarken()",
			"fabric": "getAmbientDarkness()"
		},
		{
			"forge": "setSkyFlashTime(int arg0)",
			"fabric": "setLightningTicksLeft(int lightningTicksLeft)"
		},
		{
			"forge": "getWorldBorder()",
			"fabric": "getWorldBorder()"
		},
		{
			"forge": "sendPacketToServer(Packet<?> arg0)",
			"fabric": "sendPacket(Packet<?> packet)"
		},
		{
			"forge": "dimensionType()",
			"fabric": "getDimension()"
		},
		{
			"forge": "dimensionTypeId()",
			"fabric": "getDimensionKey()"
		},
		{
			"forge": "dimensionTypeRegistration()",
			"fabric": "getDimensionEntry()"
		},
		{
			"forge": "dimension()",
			"fabric": "getRegistryKey()"
		},
		{
			"forge": "getRandom()",
			"fabric": "getRandom()"
		},
		{
			"forge": "isStateAtPosition(BlockPos arg0, Predicate<BlockState> arg1)",
			"fabric": "testBlockState(BlockPos arg0, Predicate<BlockState> arg1)"
		},
		{
			"forge": "isFluidAtPosition(BlockPos arg0, Predicate<FluidState> arg1)",
			"fabric": "testFluidState(BlockPos arg0, Predicate<FluidState> arg1)"
		},
		{
			"forge": "getRecipeManager()",
			"fabric": "getRecipeManager()"
		},
		{
			"forge": "getBlockRandomPos(int arg0, int arg1, int arg2, int arg3)",
			"fabric": "getRandomPosInChunk(int x, int y, int z, int arg3)"
		},
		{
			"forge": "noSave()",
			"fabric": "isSavingDisabled()"
		},
		{
			"forge": "getProfiler()",
			"fabric": "getProfiler()"
		},
		{
			"forge": "getProfilerSupplier()",
			"fabric": "getProfilerSupplier()"
		},
		{
			"forge": "getBiomeManager()",
			"fabric": "getBiomeAccess()"
		},
		{
			"forge": "isDebug()",
			"fabric": "isDebugWorld()"
		},
		{
			"forge": "getEntities()",
			"fabric": "getEntityLookup()"
		},
		{
			"forge": "nextSubTickCount()",
			"fabric": "getTickOrder()"
		},
		{
			"forge": "registryAccess()",
			"fabric": "getRegistryManager()"
		},
		{
			"forge": "damageSources()",
			"fabric": "getDamageSources()"
		}
	]
}