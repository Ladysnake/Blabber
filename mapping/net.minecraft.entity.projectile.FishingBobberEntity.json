{
	"title": "net.minecraft.world.entity.projectile.FishingHook",
	"items": [
		{
			"forge": "net.minecraft.world.entity.projectile.FishingHook",
			"fabric": "net.minecraft.entity.projectile.FishingBobberEntity"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "syncronizedRandom",
			"fabric": "velocityRandom"
		},
		{
			"forge": "biting",
			"fabric": "caughtFish"
		},
		{
			"forge": "outOfWaterTime",
			"fabric": "outOfOpenWaterTicks"
		},
		{
			"forge": "MAX_OUT_OF_WATER_TIME",
			"fabric": "field_30665"
		},
		{
			"forge": "DATA_HOOKED_ENTITY",
			"fabric": "HOOK_ENTITY_ID"
		},
		{
			"forge": "DATA_BITING",
			"fabric": "CAUGHT_FISH"
		},
		{
			"forge": "life",
			"fabric": "removalTimer"
		},
		{
			"forge": "nibble",
			"fabric": "hookCountdown"
		},
		{
			"forge": "timeUntilLured",
			"fabric": "waitCountdown"
		},
		{
			"forge": "timeUntilHooked",
			"fabric": "fishTravelCountdown"
		},
		{
			"forge": "fishAngle",
			"fabric": "fishAngle"
		},
		{
			"forge": "openWater",
			"fabric": "inOpenWater"
		},
		{
			"forge": "hookedIn",
			"fabric": "hookedEntity"
		},
		{
			"forge": "currentState",
			"fabric": "state"
		},
		{
			"forge": "luck",
			"fabric": "luckOfTheSeaLevel"
		},
		{
			"forge": "lureSpeed",
			"fabric": "lureLevel"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "defineSynchedData()",
			"fabric": "initDataTracker()"
		},
		{
			"forge": "onSyncedDataUpdated(EntityDataAccessor<?> arg0)",
			"fabric": "onTrackedDataSet(TrackedData<?> arg0)"
		},
		{
			"forge": "shouldRenderAtSqrDistance(double arg0)",
			"fabric": "shouldRender(double arg0)"
		},
		{
			"forge": "lerpTo(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, boolean arg6)",
			"fabric": "updateTrackedPositionAndAngles(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, boolean arg6)"
		},
		{
			"forge": "tick()",
			"fabric": "tick()"
		},
		{
			"forge": "shouldStopFishing(Player arg0)",
			"fabric": "removeIfInvalid(PlayerEntity player)"
		},
		{
			"forge": "checkCollision()",
			"fabric": "checkForCollision()"
		},
		{
			"forge": "canHitEntity(Entity arg0)",
			"fabric": "canHit(Entity arg0)"
		},
		{
			"forge": "onHitEntity(EntityHitResult arg0)",
			"fabric": "onEntityHit(EntityHitResult arg0)"
		},
		{
			"forge": "onHitBlock(BlockHitResult arg0)",
			"fabric": "onBlockHit(BlockHitResult arg0)"
		},
		{
			"forge": "setHookedEntity(Entity arg0)",
			"fabric": "updateHookedEntityId(Entity entity)"
		},
		{
			"forge": "catchingFish(BlockPos arg0)",
			"fabric": "tickFishingLogic(BlockPos pos)"
		},
		{
			"forge": "calculateOpenWater(BlockPos arg0)",
			"fabric": "isOpenOrWaterAround(BlockPos pos)"
		},
		{
			"forge": "getOpenWaterTypeForArea(BlockPos arg0, BlockPos arg1)",
			"fabric": "getPositionType(BlockPos start, BlockPos end)"
		},
		{
			"forge": "getOpenWaterTypeForBlock(BlockPos arg0)",
			"fabric": "getPositionType(BlockPos pos)"
		},
		{
			"forge": "isOpenWaterFishing()",
			"fabric": "isInOpenWater()"
		},
		{
			"forge": "addAdditionalSaveData(CompoundTag arg0)",
			"fabric": "writeCustomDataToNbt(NbtCompound arg0)"
		},
		{
			"forge": "readAdditionalSaveData(CompoundTag arg0)",
			"fabric": "readCustomDataFromNbt(NbtCompound arg0)"
		},
		{
			"forge": "retrieve(ItemStack arg0)",
			"fabric": "use(ItemStack usedItem)"
		},
		{
			"forge": "handleEntityEvent(byte arg0)",
			"fabric": "handleStatus(byte arg0)"
		},
		{
			"forge": "pullEntity(Entity arg0)",
			"fabric": "pullHookedEntity(Entity entity)"
		},
		{
			"forge": "getMovementEmission()",
			"fabric": "getMoveEffect()"
		},
		{
			"forge": "remove(Entity$RemovalReason arg0)",
			"fabric": "remove(Entity$RemovalReason arg0)"
		},
		{
			"forge": "onClientRemoval()",
			"fabric": "onRemoved()"
		},
		{
			"forge": "setOwner(Entity arg0)",
			"fabric": "setOwner(Entity arg0)"
		},
		{
			"forge": "updateOwnerInfo(FishingHook arg0)",
			"fabric": "setPlayerFishHook(FishingBobberEntity fishingBobber)"
		},
		{
			"forge": "getPlayerOwner()",
			"fabric": "getPlayerOwner()"
		},
		{
			"forge": "getHookedIn()",
			"fabric": "getHookedEntity()"
		},
		{
			"forge": "canChangeDimensions()",
			"fabric": "canUsePortals()"
		},
		{
			"forge": "getAddEntityPacket()",
			"fabric": "createSpawnPacket()"
		},
		{
			"forge": "recreateFromPacket(ClientboundAddEntityPacket arg0)",
			"fabric": "onSpawnPacket(EntitySpawnS2CPacket arg0)"
		}
	]
}