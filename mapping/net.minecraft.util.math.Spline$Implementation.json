{
	"title": "net.minecraft.util.CubicSpline$Multipoint",
	"items": [
		{
			"forge": "net.minecraft.util.CubicSpline$Multipoint",
			"fabric": "net.minecraft.util.math.Spline$Implementation"
		},
		{
			"forge": "coordinate",
			"fabric": "locationFunction"
		},
		{
			"forge": "coordinate",
			"fabric": "locationFunction"
		},
		{
			"forge": "locations",
			"fabric": "locations"
		},
		{
			"forge": "values",
			"fabric": "values"
		},
		{
			"forge": "derivatives",
			"fabric": "derivatives"
		},
		{
			"forge": "minValue",
			"fabric": "min"
		},
		{
			"forge": "maxValue",
			"fabric": "max"
		},
		{
			"forge": "create(I arg0, float[] arg1, List<CubicSpline<C, I>> arg2, float[] arg3)",
			"fabric": "build(I locationFunction, float[] locations, List<Spline<C, I>> values, float[] derivatives)"
		},
		{
			"forge": "create(I arg0, float[] arg1, List<CubicSpline<C, I>> arg2, float[] arg3)",
			"fabric": "build(I locationFunction, float[] locations, List<Spline<C, I>> values, float[] derivatives)"
		},
		{
			"forge": "linearExtend(float arg0, float[] arg1, float arg2, float[] arg3, int arg4)",
			"fabric": "sampleOutsideRange(float point, float[] locations, float value, float[] derivatives, int i)"
		},
		{
			"forge": "validateSizes(float[] arg0, List<CubicSpline<C, I>> arg1, float[] arg2)",
			"fabric": "assertParametersValid(float[] locations, List<Spline<C, I>> values, float[] derivatives)"
		},
		{
			"forge": "apply(C arg0)",
			"fabric": "apply(C arg0)"
		},
		{
			"forge": "findIntervalStart(float[] arg0, float arg1)",
			"fabric": "findRangeForLocation(float[] locations, float x)"
		},
		{
			"forge": "parityString()",
			"fabric": "getDebugString()"
		},
		{
			"forge": "toString(float[] arg0)",
			"fabric": "format(float[] values)"
		},
		{
			"forge": "mapAll(CubicSpline$CoordinateVisitor<I> arg0)",
			"fabric": "apply(Spline$Visitor<I> arg0)"
		},
		{
			"forge": "coordinate()",
			"fabric": "locationFunction()"
		},
		{
			"forge": "locations()",
			"fabric": "locations()"
		},
		{
			"forge": "values()",
			"fabric": "values()"
		},
		{
			"forge": "derivatives()",
			"fabric": "derivatives()"
		},
		{
			"forge": "minValue()",
			"fabric": "min()"
		},
		{
			"forge": "maxValue()",
			"fabric": "max()"
		}
	]
}