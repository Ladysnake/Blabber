{
	"title": "net.minecraft.world.level.chunk.ChunkGenerator",
	"items": [
		{
			"forge": "net.minecraft.world.level.chunk.ChunkGenerator",
			"fabric": "net.minecraft.world.gen.chunk.ChunkGenerator"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "CODEC",
			"fabric": "CODEC"
		},
		{
			"forge": "biomeSource",
			"fabric": "biomeSource"
		},
		{
			"forge": "featuresPerStep",
			"fabric": "indexedFeaturesListSupplier"
		},
		{
			"forge": "generationSettingsGetter",
			"fabric": "generationSettingsGetter"
		},
		{
			"forge": "codec()",
			"fabric": "getCodec()"
		},
		{
			"forge": "codec()",
			"fabric": "getCodec()"
		},
		{
			"forge": "createState(HolderLookup<StructureSet> arg0, RandomState arg1, long arg2)",
			"fabric": "createStructurePlacementCalculator(RegistryWrapper<StructureSet> structureSetRegistry, NoiseConfig noiseConfig, long seed)"
		},
		{
			"forge": "getTypeNameForDataFixer()",
			"fabric": "getCodecKey()"
		},
		{
			"forge": "createBiomes(Executor arg0, RandomState arg1, Blender arg2, StructureManager arg3, ChunkAccess arg4)",
			"fabric": "populateBiomes(Executor executor, NoiseConfig noiseConfig, Blender blender, StructureAccessor structureAccessor, Chunk chunk)"
		},
		{
			"forge": "applyCarvers(WorldGenRegion arg0, long arg1, RandomState arg2, BiomeManager arg3, StructureManager arg4, ChunkAccess arg5, GenerationStep$Carving arg6)",
			"fabric": "carve(ChunkRegion chunkRegion, long seed, NoiseConfig noiseConfig, BiomeAccess biomeAccess, StructureAccessor structureAccessor, Chunk chunk, GenerationStep$Carver carverStep)"
		},
		{
			"forge": "findNearestMapStructure(ServerLevel arg0, HolderSet<Structure> arg1, BlockPos arg2, int arg3, boolean arg4)",
			"fabric": "locateStructure(ServerWorld world, RegistryEntryList<Structure> structures, BlockPos center, int radius, boolean skipReferencedStructures)"
		},
		{
			"forge": "getNearestGeneratedStructure(Set<Holder<Structure>> arg0, ServerLevel arg1, StructureManager arg2, BlockPos arg3, boolean arg4, ConcentricRingsStructurePlacement arg5)",
			"fabric": "locateConcentricRingsStructure(Set<RegistryEntry<Structure>> structures, ServerWorld world, StructureAccessor structureAccessor, BlockPos center, boolean skipReferencedStructures, ConcentricRingsStructurePlacement placement)"
		},
		{
			"forge": "getNearestGeneratedStructure(Set<Holder<Structure>> arg0, LevelReader arg1, StructureManager arg2, int arg3, int arg4, int arg5, boolean arg6, long arg7, RandomSpreadStructurePlacement arg8)",
			"fabric": "locateRandomSpreadStructure(Set<RegistryEntry<Structure>> structures, WorldView world, StructureAccessor structureAccessor, int centerChunkX, int centerChunkZ, int radius, boolean skipReferencedStructures, long seed, RandomSpreadStructurePlacement placement)"
		},
		{
			"forge": "getStructureGeneratingAt(Set<Holder<Structure>> arg0, LevelReader arg1, StructureManager arg2, boolean arg3, StructurePlacement arg4, ChunkPos arg5)",
			"fabric": "locateStructure(Set<RegistryEntry<Structure>> structures, WorldView world, StructureAccessor structureAccessor, boolean skipReferencedStructures, StructurePlacement placement, ChunkPos pos)"
		},
		{
			"forge": "tryAddReference(StructureManager arg0, StructureStart arg1)",
			"fabric": "checkNotReferenced(StructureAccessor structureAccessor, StructureStart start)"
		},
		{
			"forge": "applyBiomeDecoration(WorldGenLevel arg0, ChunkAccess arg1, StructureManager arg2)",
			"fabric": "generateFeatures(StructureWorldAccess world, Chunk chunk, StructureAccessor structureAccessor)"
		},
		{
			"forge": "getWritableArea(ChunkAccess arg0)",
			"fabric": "getBlockBoxForChunk(Chunk chunk)"
		},
		{
			"forge": "buildSurface(WorldGenRegion arg0, StructureManager arg1, RandomState arg2, ChunkAccess arg3)",
			"fabric": "buildSurface(ChunkRegion region, StructureAccessor structures, NoiseConfig noiseConfig, Chunk chunk)"
		},
		{
			"forge": "spawnOriginalMobs(WorldGenRegion arg0)",
			"fabric": "populateEntities(ChunkRegion region)"
		},
		{
			"forge": "getSpawnHeight(LevelHeightAccessor arg0)",
			"fabric": "getSpawnHeight(HeightLimitView world)"
		},
		{
			"forge": "getBiomeSource()",
			"fabric": "getBiomeSource()"
		},
		{
			"forge": "getGenDepth()",
			"fabric": "getWorldHeight()"
		},
		{
			"forge": "getMobsAt(Holder<Biome> arg0, StructureManager arg1, MobCategory arg2, BlockPos arg3)",
			"fabric": "getEntitySpawnList(RegistryEntry<Biome> biome, StructureAccessor accessor, SpawnGroup group, BlockPos pos)"
		},
		{
			"forge": "createStructures(RegistryAccess arg0, ChunkGeneratorStructureState arg1, StructureManager arg2, ChunkAccess arg3, StructureTemplateManager arg4)",
			"fabric": "setStructureStarts(DynamicRegistryManager registryManager, StructurePlacementCalculator placementCalculator, StructureAccessor structureAccessor, Chunk chunk, StructureTemplateManager structureTemplateManager)"
		},
		{
			"forge": "tryGenerateStructure(StructureSet$StructureSelectionEntry arg0, StructureManager arg1, RegistryAccess arg2, RandomState arg3, StructureTemplateManager arg4, long arg5, ChunkAccess arg6, ChunkPos arg7, SectionPos arg8)",
			"fabric": "trySetStructureStart(StructureSet$WeightedEntry weightedEntry, StructureAccessor structureAccessor, DynamicRegistryManager dynamicRegistryManager, NoiseConfig noiseConfig, StructureTemplateManager structureManager, long seed, Chunk chunk, ChunkPos pos, ChunkSectionPos sectionPos)"
		},
		{
			"forge": "fetchReferences(StructureManager arg0, ChunkAccess arg1, SectionPos arg2, Structure arg3)",
			"fabric": "getStructureReferences(StructureAccessor structureAccessor, Chunk chunk, ChunkSectionPos sectionPos, Structure structure)"
		},
		{
			"forge": "createReferences(WorldGenLevel arg0, StructureManager arg1, ChunkAccess arg2)",
			"fabric": "addStructureReferences(StructureWorldAccess world, StructureAccessor structureAccessor, Chunk chunk)"
		},
		{
			"forge": "fillFromNoise(Executor arg0, Blender arg1, RandomState arg2, StructureManager arg3, ChunkAccess arg4)",
			"fabric": "populateNoise(Executor executor, Blender blender, NoiseConfig noiseConfig, StructureAccessor structureAccessor, Chunk chunk)"
		},
		{
			"forge": "getSeaLevel()",
			"fabric": "getSeaLevel()"
		},
		{
			"forge": "getMinY()",
			"fabric": "getMinimumY()"
		},
		{
			"forge": "getBaseHeight(int arg0, int arg1, Heightmap$Types arg2, LevelHeightAccessor arg3, RandomState arg4)",
			"fabric": "getHeight(int x, int z, Heightmap$Type heightmap, HeightLimitView world, NoiseConfig noiseConfig)"
		},
		{
			"forge": "getBaseColumn(int arg0, int arg1, LevelHeightAccessor arg2, RandomState arg3)",
			"fabric": "getColumnSample(int x, int z, HeightLimitView world, NoiseConfig noiseConfig)"
		},
		{
			"forge": "getFirstFreeHeight(int arg0, int arg1, Heightmap$Types arg2, LevelHeightAccessor arg3, RandomState arg4)",
			"fabric": "getHeightOnGround(int x, int z, Heightmap$Type heightmap, HeightLimitView world, NoiseConfig noiseConfig)"
		},
		{
			"forge": "getFirstOccupiedHeight(int arg0, int arg1, Heightmap$Types arg2, LevelHeightAccessor arg3, RandomState arg4)",
			"fabric": "getHeightInGround(int x, int z, Heightmap$Type heightmap, HeightLimitView world, NoiseConfig noiseConfig)"
		},
		{
			"forge": "addDebugScreenInfo(List<String> arg0, RandomState arg1, BlockPos arg2)",
			"fabric": "getDebugHudText(List<String> text, NoiseConfig noiseConfig, BlockPos pos)"
		},
		{
			"forge": "getBiomeGenerationSettings(Holder<Biome> arg0)",
			"fabric": "getGenerationSettings(RegistryEntry<Biome> biomeEntry)"
		}
	]
}