{
	"title": "net.minecraft.core.Holder$Reference",
	"items": [
		{
			"forge": "net.minecraft.core.Holder$Reference",
			"fabric": "net.minecraft.registry.entry.RegistryEntry$Reference"
		},
		{
			"forge": "owner",
			"fabric": "owner"
		},
		{
			"forge": "owner",
			"fabric": "owner"
		},
		{
			"forge": "tags",
			"fabric": "tags"
		},
		{
			"forge": "type",
			"fabric": "referenceType"
		},
		{
			"forge": "key",
			"fabric": "registryKey"
		},
		{
			"forge": "value",
			"fabric": "value"
		},
		{
			"forge": "createStandAlone(HolderOwner<T> arg0, ResourceKey<T> arg1)",
			"fabric": "standAlone(RegistryEntryOwner<T> owner, RegistryKey<T> registryKey)"
		},
		{
			"forge": "createStandAlone(HolderOwner<T> arg0, ResourceKey<T> arg1)",
			"fabric": "standAlone(RegistryEntryOwner<T> owner, RegistryKey<T> registryKey)"
		},
		{
			"forge": "createIntrusive(HolderOwner<T> arg0, T arg1)",
			"fabric": "intrusive(RegistryEntryOwner<T> owner, T value)"
		},
		{
			"forge": "key()",
			"fabric": "registryKey()"
		},
		{
			"forge": "value()",
			"fabric": "value()"
		},
		{
			"forge": "is(ResourceLocation arg0)",
			"fabric": "matchesId(Identifier arg0)"
		},
		{
			"forge": "is(ResourceKey<T> arg0)",
			"fabric": "matchesKey(RegistryKey<T> arg0)"
		},
		{
			"forge": "is(TagKey<T> arg0)",
			"fabric": "isIn(TagKey<T> arg0)"
		},
		{
			"forge": "is(Predicate<ResourceKey<T>> arg0)",
			"fabric": "matches(Predicate<RegistryKey<T>> arg0)"
		},
		{
			"forge": "canSerializeIn(HolderOwner<T> arg0)",
			"fabric": "ownerEquals(RegistryEntryOwner<T> arg0)"
		},
		{
			"forge": "unwrap()",
			"fabric": "getKeyOrValue()"
		},
		{
			"forge": "unwrapKey()",
			"fabric": "getKey()"
		},
		{
			"forge": "kind()",
			"fabric": "getType()"
		},
		{
			"forge": "isBound()",
			"fabric": "hasKeyAndValue()"
		},
		{
			"forge": "bindKey(ResourceKey<T> arg0)",
			"fabric": "setRegistryKey(RegistryKey<T> registryKey)"
		},
		{
			"forge": "bindValue(T arg0)",
			"fabric": "setValue(T value)"
		},
		{
			"forge": "bindTags(Collection<TagKey<T>> arg0)",
			"fabric": "setTags(Collection<TagKey<T>> tags)"
		},
		{
			"forge": "tags()",
			"fabric": "streamTags()"
		}
	]
}