{
	"title": "net.minecraft.world.level.block.Block",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.Block",
			"fabric": "net.minecraft.block.Block"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "builtInRegistryHolder",
			"fabric": "registryEntry"
		},
		{
			"forge": "BLOCK_STATE_REGISTRY",
			"fabric": "STATE_IDS"
		},
		{
			"forge": "SHAPE_FULL_BLOCK_CACHE",
			"fabric": "FULL_CUBE_SHAPE_CACHE"
		},
		{
			"forge": "UPDATE_NEIGHBORS",
			"fabric": "NOTIFY_NEIGHBORS"
		},
		{
			"forge": "UPDATE_CLIENTS",
			"fabric": "NOTIFY_LISTENERS"
		},
		{
			"forge": "UPDATE_INVISIBLE",
			"fabric": "NO_REDRAW"
		},
		{
			"forge": "UPDATE_IMMEDIATE",
			"fabric": "REDRAW_ON_MAIN_THREAD"
		},
		{
			"forge": "UPDATE_KNOWN_SHAPE",
			"fabric": "FORCE_STATE"
		},
		{
			"forge": "UPDATE_SUPPRESS_DROPS",
			"fabric": "SKIP_DROPS"
		},
		{
			"forge": "UPDATE_MOVE_BY_PISTON",
			"fabric": "MOVED"
		},
		{
			"forge": "UPDATE_NONE",
			"fabric": "field_31035"
		},
		{
			"forge": "UPDATE_ALL",
			"fabric": "NOTIFY_ALL"
		},
		{
			"forge": "UPDATE_ALL_IMMEDIATE",
			"fabric": "field_31022"
		},
		{
			"forge": "INDESTRUCTIBLE",
			"fabric": "field_31023"
		},
		{
			"forge": "INSTANT",
			"fabric": "field_31024"
		},
		{
			"forge": "UPDATE_LIMIT",
			"fabric": "field_31025"
		},
		{
			"forge": "stateDefinition",
			"fabric": "stateManager"
		},
		{
			"forge": "defaultBlockState",
			"fabric": "defaultState"
		},
		{
			"forge": "descriptionId",
			"fabric": "translationKey"
		},
		{
			"forge": "item",
			"fabric": "cachedItem"
		},
		{
			"forge": "CACHE_SIZE",
			"fabric": "field_31026"
		},
		{
			"forge": "OCCLUSION_CACHE",
			"fabric": "FACE_CULL_MAP"
		},
		{
			"forge": "getId(BlockState arg0)",
			"fabric": "getRawIdFromState(BlockState state)"
		},
		{
			"forge": "getId(BlockState arg0)",
			"fabric": "getRawIdFromState(BlockState state)"
		},
		{
			"forge": "stateById(int arg0)",
			"fabric": "getStateFromRawId(int stateId)"
		},
		{
			"forge": "byItem(Item arg0)",
			"fabric": "getBlockFromItem(Item item)"
		},
		{
			"forge": "pushEntitiesUp(BlockState arg0, BlockState arg1, LevelAccessor arg2, BlockPos arg3)",
			"fabric": "pushEntitiesUpBeforeBlockChange(BlockState from, BlockState to, WorldAccess world, BlockPos pos)"
		},
		{
			"forge": "box(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)",
			"fabric": "createCuboidShape(double minX, double minY, double minZ, double maxX, double maxY, double maxZ)"
		},
		{
			"forge": "updateFromNeighbourShapes(BlockState arg0, LevelAccessor arg1, BlockPos arg2)",
			"fabric": "postProcessState(BlockState state, WorldAccess world, BlockPos pos)"
		},
		{
			"forge": "updateOrDestroy(BlockState arg0, BlockState arg1, LevelAccessor arg2, BlockPos arg3, int arg4)",
			"fabric": "replace(BlockState state, BlockState newState, WorldAccess world, BlockPos pos, int flags)"
		},
		{
			"forge": "updateOrDestroy(BlockState arg0, BlockState arg1, LevelAccessor arg2, BlockPos arg3, int arg4, int arg5)",
			"fabric": "replace(BlockState state, BlockState newState, WorldAccess world, BlockPos pos, int flags, int maxUpdateDepth)"
		},
		{
			"forge": "isExceptionForConnection(BlockState arg0)",
			"fabric": "cannotConnect(BlockState state)"
		},
		{
			"forge": "isRandomlyTicking(BlockState arg0)",
			"fabric": "hasRandomTicks(BlockState state)"
		},
		{
			"forge": "shouldRenderFace(BlockState arg0, BlockGetter arg1, BlockPos arg2, Direction arg3, BlockPos arg4)",
			"fabric": "shouldDrawSide(BlockState state, BlockView world, BlockPos pos, Direction side, BlockPos otherPos)"
		},
		{
			"forge": "canSupportRigidBlock(BlockGetter arg0, BlockPos arg1)",
			"fabric": "hasTopRim(BlockView world, BlockPos pos)"
		},
		{
			"forge": "canSupportCenter(LevelReader arg0, BlockPos arg1, Direction arg2)",
			"fabric": "sideCoversSmallSquare(WorldView world, BlockPos pos, Direction side)"
		},
		{
			"forge": "isFaceFull(VoxelShape arg0, Direction arg1)",
			"fabric": "isFaceFullSquare(VoxelShape shape, Direction side)"
		},
		{
			"forge": "isShapeFullBlock(VoxelShape arg0)",
			"fabric": "isShapeFullCube(VoxelShape shape)"
		},
		{
			"forge": "propagatesSkylightDown(BlockState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "isTransparent(BlockState state, BlockView world, BlockPos pos)"
		},
		{
			"forge": "animateTick(BlockState arg0, Level arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "randomDisplayTick(BlockState state, World world, BlockPos pos, Random random)"
		},
		{
			"forge": "destroy(LevelAccessor arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "onBroken(WorldAccess world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getDrops(BlockState arg0, ServerLevel arg1, BlockPos arg2, BlockEntity arg3)",
			"fabric": "getDroppedStacks(BlockState state, ServerWorld world, BlockPos pos, BlockEntity blockEntity)"
		},
		{
			"forge": "getDrops(BlockState arg0, ServerLevel arg1, BlockPos arg2, BlockEntity arg3, Entity arg4, ItemStack arg5)",
			"fabric": "getDroppedStacks(BlockState state, ServerWorld world, BlockPos pos, BlockEntity blockEntity, Entity entity, ItemStack stack)"
		},
		{
			"forge": "dropResources(BlockState arg0, Level arg1, BlockPos arg2)",
			"fabric": "dropStacks(BlockState state, World world, BlockPos pos)"
		},
		{
			"forge": "dropResources(BlockState arg0, LevelAccessor arg1, BlockPos arg2, BlockEntity arg3)",
			"fabric": "dropStacks(BlockState state, WorldAccess world, BlockPos pos, BlockEntity blockEntity)"
		},
		{
			"forge": "dropResources(BlockState arg0, Level arg1, BlockPos arg2, BlockEntity arg3, Entity arg4, ItemStack arg5)",
			"fabric": "dropStacks(BlockState state, World world, BlockPos pos, BlockEntity blockEntity, Entity entity, ItemStack tool)"
		},
		{
			"forge": "popResource(Level arg0, BlockPos arg1, ItemStack arg2)",
			"fabric": "dropStack(World world, BlockPos pos, ItemStack stack)"
		},
		{
			"forge": "popResourceFromFace(Level arg0, BlockPos arg1, Direction arg2, ItemStack arg3)",
			"fabric": "dropStack(World world, BlockPos pos, Direction direction, ItemStack stack)"
		},
		{
			"forge": "popResource(Level arg0, Supplier<ItemEntity> arg1, ItemStack arg2)",
			"fabric": "dropStack(World world, Supplier<ItemEntity> itemEntitySupplier, ItemStack stack)"
		},
		{
			"forge": "popExperience(ServerLevel arg0, BlockPos arg1, int arg2)",
			"fabric": "dropExperience(ServerWorld world, BlockPos pos, int size)"
		},
		{
			"forge": "getExplosionResistance()",
			"fabric": "getBlastResistance()"
		},
		{
			"forge": "wasExploded(Level arg0, BlockPos arg1, Explosion arg2)",
			"fabric": "onDestroyedByExplosion(World world, BlockPos pos, Explosion explosion)"
		},
		{
			"forge": "stepOn(Level arg0, BlockPos arg1, BlockState arg2, Entity arg3)",
			"fabric": "onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity)"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext ctx)"
		},
		{
			"forge": "playerDestroy(Level arg0, Player arg1, BlockPos arg2, BlockState arg3, BlockEntity arg4, ItemStack arg5)",
			"fabric": "afterBreak(World world, PlayerEntity player, BlockPos pos, BlockState state, BlockEntity blockEntity, ItemStack tool)"
		},
		{
			"forge": "setPlacedBy(Level arg0, BlockPos arg1, BlockState arg2, LivingEntity arg3, ItemStack arg4)",
			"fabric": "onPlaced(World world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack)"
		},
		{
			"forge": "isPossibleToRespawnInThis(BlockState arg0)",
			"fabric": "canMobSpawnInside(BlockState state)"
		},
		{
			"forge": "getName()",
			"fabric": "getName()"
		},
		{
			"forge": "getDescriptionId()",
			"fabric": "getTranslationKey()"
		},
		{
			"forge": "fallOn(Level arg0, BlockState arg1, BlockPos arg2, Entity arg3, float arg4)",
			"fabric": "onLandedUpon(World world, BlockState state, BlockPos pos, Entity entity, float fallDistance)"
		},
		{
			"forge": "updateEntityAfterFallOn(BlockGetter arg0, Entity arg1)",
			"fabric": "onEntityLand(BlockView world, Entity entity)"
		},
		{
			"forge": "getCloneItemStack(BlockGetter arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getPickStack(BlockView world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getFriction()",
			"fabric": "getSlipperiness()"
		},
		{
			"forge": "getSpeedFactor()",
			"fabric": "getVelocityMultiplier()"
		},
		{
			"forge": "getJumpFactor()",
			"fabric": "getJumpVelocityMultiplier()"
		},
		{
			"forge": "spawnDestroyParticles(Level arg0, Player arg1, BlockPos arg2, BlockState arg3)",
			"fabric": "spawnBreakParticles(World world, PlayerEntity player, BlockPos pos, BlockState state)"
		},
		{
			"forge": "playerWillDestroy(Level arg0, BlockPos arg1, BlockState arg2, Player arg3)",
			"fabric": "onBreak(World world, BlockPos pos, BlockState state, PlayerEntity player)"
		},
		{
			"forge": "handlePrecipitation(BlockState arg0, Level arg1, BlockPos arg2, Biome$Precipitation arg3)",
			"fabric": "precipitationTick(BlockState state, World world, BlockPos pos, Biome$Precipitation precipitation)"
		},
		{
			"forge": "dropFromExplosion(Explosion arg0)",
			"fabric": "shouldDropItemsOnExplosion(Explosion explosion)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> builder)"
		},
		{
			"forge": "getStateDefinition()",
			"fabric": "getStateManager()"
		},
		{
			"forge": "registerDefaultState(BlockState arg0)",
			"fabric": "setDefaultState(BlockState state)"
		},
		{
			"forge": "defaultBlockState()",
			"fabric": "getDefaultState()"
		},
		{
			"forge": "withPropertiesOf(BlockState arg0)",
			"fabric": "getStateWithProperties(BlockState state)"
		},
		{
			"forge": "copyProperty(BlockState arg0, BlockState arg1, Property<T> arg2)",
			"fabric": "copyProperty(BlockState source, BlockState target, Property<T> property)"
		},
		{
			"forge": "getSoundType(BlockState arg0)",
			"fabric": "getSoundGroup(BlockState state)"
		},
		{
			"forge": "asItem()",
			"fabric": "asItem()"
		},
		{
			"forge": "hasDynamicShape()",
			"fabric": "hasDynamicBounds()"
		},
		{
			"forge": "appendHoverText(ItemStack arg0, BlockGetter arg1, List<Component> arg2, TooltipFlag arg3)",
			"fabric": "appendTooltip(ItemStack stack, BlockView world, List<Text> tooltip, TooltipContext options)"
		},
		{
			"forge": "asBlock()",
			"fabric": "asBlock()"
		},
		{
			"forge": "getShapeForEachState(Function<BlockState, VoxelShape> arg0)",
			"fabric": "getShapesForStates(Function<BlockState, VoxelShape> stateToShape)"
		},
		{
			"forge": "builtInRegistryHolder()",
			"fabric": "getRegistryEntry()"
		},
		{
			"forge": "tryDropExperience(ServerLevel arg0, BlockPos arg1, ItemStack arg2, IntProvider arg3)",
			"fabric": "dropExperienceWhenMined(ServerWorld world, BlockPos pos, ItemStack tool, IntProvider experience)"
		}
	]
}