{
	"title": "net.minecraft.client.gui.Font",
	"items": [
		{
			"forge": "net.minecraft.client.gui.Font",
			"fabric": "net.minecraft.client.font.TextRenderer"
		},
		{
			"forge": "EFFECT_DEPTH",
			"fabric": "Z_INDEX"
		},
		{
			"forge": "EFFECT_DEPTH",
			"fabric": "Z_INDEX"
		},
		{
			"forge": "SHADOW_OFFSET",
			"fabric": "FORWARD_SHIFT"
		},
		{
			"forge": "ALPHA_CUTOFF",
			"fabric": "ARABIC_SHAPING_LETTERS_SHAPE"
		},
		{
			"forge": "lineHeight",
			"fabric": "fontHeight"
		},
		{
			"forge": "random",
			"fabric": "random"
		},
		{
			"forge": "fonts",
			"fabric": "fontStorageAccessor"
		},
		{
			"forge": "filterFishyGlyphs",
			"fabric": "validateAdvance"
		},
		{
			"forge": "splitter",
			"fabric": "handler"
		},
		{
			"forge": "getFontSet(ResourceLocation arg0)",
			"fabric": "getFontStorage(Identifier id)"
		},
		{
			"forge": "getFontSet(ResourceLocation arg0)",
			"fabric": "getFontStorage(Identifier id)"
		},
		{
			"forge": "bidirectionalShaping(String arg0)",
			"fabric": "mirror(String text)"
		},
		{
			"forge": "drawInBatch(String arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "draw(String text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, TextRenderer$TextLayerType layerType, int backgroundColor, int light)"
		},
		{
			"forge": "drawInBatch(String arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9, boolean arg10)",
			"fabric": "draw(String text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, TextRenderer$TextLayerType layerType, int backgroundColor, int light, boolean rightToLeft)"
		},
		{
			"forge": "drawInBatch(Component arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "draw(Text text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, TextRenderer$TextLayerType layerType, int backgroundColor, int light)"
		},
		{
			"forge": "drawInBatch(FormattedCharSequence arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "draw(OrderedText text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, TextRenderer$TextLayerType layerType, int backgroundColor, int light)"
		},
		{
			"forge": "drawInBatch8xOutline(FormattedCharSequence arg0, float arg1, float arg2, int arg3, int arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, int arg7)",
			"fabric": "drawWithOutline(OrderedText text, float x, float y, int color, int outlineColor, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, int light)"
		},
		{
			"forge": "adjustColor(int arg0)",
			"fabric": "tweakTransparency(int argb)"
		},
		{
			"forge": "drawInternal(String arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9, boolean arg10)",
			"fabric": "drawInternal(String text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumers, TextRenderer$TextLayerType layerType, int backgroundColor, int light, boolean mirror)"
		},
		{
			"forge": "drawInternal(FormattedCharSequence arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "drawInternal(OrderedText text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumerProvider, TextRenderer$TextLayerType layerType, int backgroundColor, int light)"
		},
		{
			"forge": "renderText(String arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "drawLayer(String text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumerProvider, TextRenderer$TextLayerType layerType, int underlineColor, int light)"
		},
		{
			"forge": "renderText(FormattedCharSequence arg0, float arg1, float arg2, int arg3, boolean arg4, org.joml.Matrix4f arg5, MultiBufferSource arg6, Font$DisplayMode arg7, int arg8, int arg9)",
			"fabric": "drawLayer(OrderedText text, float x, float y, int color, boolean shadow, org.joml.Matrix4f matrix, VertexConsumerProvider vertexConsumerProvider, TextRenderer$TextLayerType layerType, int underlineColor, int light)"
		},
		{
			"forge": "renderChar(BakedGlyph arg0, boolean arg1, boolean arg2, float arg3, float arg4, float arg5, org.joml.Matrix4f arg6, VertexConsumer arg7, float arg8, float arg9, float arg10, float arg11, int arg12)",
			"fabric": "drawGlyph(GlyphRenderer glyphRenderer, boolean bold, boolean italic, float weight, float x, float y, org.joml.Matrix4f matrix, VertexConsumer vertexConsumer, float red, float green, float blue, float alpha, int light)"
		},
		{
			"forge": "width(String arg0)",
			"fabric": "getWidth(String text)"
		},
		{
			"forge": "width(FormattedText arg0)",
			"fabric": "getWidth(StringVisitable text)"
		},
		{
			"forge": "width(FormattedCharSequence arg0)",
			"fabric": "getWidth(OrderedText text)"
		},
		{
			"forge": "plainSubstrByWidth(String arg0, int arg1, boolean arg2)",
			"fabric": "trimToWidth(String text, int maxWidth, boolean backwards)"
		},
		{
			"forge": "plainSubstrByWidth(String arg0, int arg1)",
			"fabric": "trimToWidth(String text, int maxWidth)"
		},
		{
			"forge": "substrByWidth(FormattedText arg0, int arg1)",
			"fabric": "trimToWidth(StringVisitable text, int width)"
		},
		{
			"forge": "wordWrapHeight(String arg0, int arg1)",
			"fabric": "getWrappedLinesHeight(String text, int maxWidth)"
		},
		{
			"forge": "wordWrapHeight(FormattedText arg0, int arg1)",
			"fabric": "getWrappedLinesHeight(StringVisitable text, int maxWidth)"
		},
		{
			"forge": "split(FormattedText arg0, int arg1)",
			"fabric": "wrapLines(StringVisitable text, int width)"
		},
		{
			"forge": "isBidirectional()",
			"fabric": "isRightToLeft()"
		},
		{
			"forge": "getSplitter()",
			"fabric": "getTextHandler()"
		}
	]
}