{
	"title": "net.minecraft.resources.HolderSetCodec",
	"items": [
		{
			"forge": "net.minecraft.resources.HolderSetCodec",
			"fabric": "net.minecraft.registry.entry.RegistryEntryListCodec"
		},
		{
			"forge": "registryKey",
			"fabric": "registry"
		},
		{
			"forge": "registryKey",
			"fabric": "registry"
		},
		{
			"forge": "elementCodec",
			"fabric": "entryCodec"
		},
		{
			"forge": "homogenousListCodec",
			"fabric": "directEntryListCodec"
		},
		{
			"forge": "registryAwareCodec",
			"fabric": "entryListStorageCodec"
		},
		{
			"forge": "homogenousList(com.mojang.serialization.Codec<Holder<E>> arg0, boolean arg1)",
			"fabric": "createDirectEntryListCodec(com.mojang.serialization.Codec<RegistryEntry<E>> entryCodec, boolean alwaysSerializeAsList)"
		},
		{
			"forge": "homogenousList(com.mojang.serialization.Codec<Holder<E>> arg0, boolean arg1)",
			"fabric": "createDirectEntryListCodec(com.mojang.serialization.Codec<RegistryEntry<E>> entryCodec, boolean alwaysSerializeAsList)"
		},
		{
			"forge": "create(ResourceKey<? extends Registry<E>> arg0, com.mojang.serialization.Codec<Holder<E>> arg1, boolean arg2)",
			"fabric": "create(RegistryKey<? extends Registry<E>> registryRef, com.mojang.serialization.Codec<RegistryEntry<E>> entryCodec, boolean alwaysSerializeAsList)"
		},
		{
			"forge": "decode(com.mojang.serialization.DynamicOps<T> arg0, T arg1)",
			"fabric": "decode(com.mojang.serialization.DynamicOps<T> ops, T input)"
		},
		{
			"forge": "encode(HolderSet<E> arg0, com.mojang.serialization.DynamicOps<T> arg1, T arg2)",
			"fabric": "encode(RegistryEntryList<E> arg0, com.mojang.serialization.DynamicOps<T> arg1, T arg2)"
		},
		{
			"forge": "decodeWithoutRegistry(com.mojang.serialization.DynamicOps<T> arg0, T arg1)",
			"fabric": "decodeDirect(com.mojang.serialization.DynamicOps<T> ops, T input)"
		},
		{
			"forge": "encodeWithoutRegistry(HolderSet<E> arg0, com.mojang.serialization.DynamicOps<T> arg1, T arg2)",
			"fabric": "encodeDirect(RegistryEntryList<E> entryList, com.mojang.serialization.DynamicOps<T> ops, T prefix)"
		}
	]
}