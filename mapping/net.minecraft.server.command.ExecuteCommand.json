{
	"title": "net.minecraft.server.commands.ExecuteCommand",
	"items": [
		{
			"forge": "net.minecraft.server.commands.ExecuteCommand",
			"fabric": "net.minecraft.server.command.ExecuteCommand"
		},
		{
			"forge": "MAX_TEST_AREA",
			"fabric": "MAX_BLOCKS"
		},
		{
			"forge": "MAX_TEST_AREA",
			"fabric": "MAX_BLOCKS"
		},
		{
			"forge": "ERROR_AREA_TOO_LARGE",
			"fabric": "BLOCKS_TOOBIG_EXCEPTION"
		},
		{
			"forge": "ERROR_CONDITIONAL_FAILED",
			"fabric": "CONDITIONAL_FAIL_EXCEPTION"
		},
		{
			"forge": "ERROR_CONDITIONAL_FAILED_COUNT",
			"fabric": "CONDITIONAL_FAIL_COUNT_EXCEPTION"
		},
		{
			"forge": "CALLBACK_CHAINER",
			"fabric": "BINARY_RESULT_CONSUMER"
		},
		{
			"forge": "SUGGEST_PREDICATE",
			"fabric": "LOOT_CONDITIONS"
		},
		{
			"forge": "register(com.mojang.brigadier.CommandDispatcher<CommandSourceStack> arg0, CommandBuildContext arg1)",
			"fabric": "register(com.mojang.brigadier.CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess commandRegistryAccess)"
		},
		{
			"forge": "register(com.mojang.brigadier.CommandDispatcher<CommandSourceStack> arg0, CommandBuildContext arg1)",
			"fabric": "register(com.mojang.brigadier.CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess commandRegistryAccess)"
		},
		{
			"forge": "wrapStores(com.mojang.brigadier.tree.LiteralCommandNode<CommandSourceStack> arg0, com.mojang.brigadier.builder.LiteralArgumentBuilder<CommandSourceStack> arg1, boolean arg2)",
			"fabric": "addStoreArguments(com.mojang.brigadier.tree.LiteralCommandNode<ServerCommandSource> node, com.mojang.brigadier.builder.LiteralArgumentBuilder<ServerCommandSource> builder, boolean requestResult)"
		},
		{
			"forge": "storeValue(CommandSourceStack arg0, Collection<String> arg1, Objective arg2, boolean arg3)",
			"fabric": "executeStoreScore(ServerCommandSource source, Collection<String> targets, ScoreboardObjective objective, boolean requestResult)"
		},
		{
			"forge": "storeValue(CommandSourceStack arg0, CustomBossEvent arg1, boolean arg2, boolean arg3)",
			"fabric": "executeStoreBossbar(ServerCommandSource source, CommandBossBar bossBar, boolean storeInValue, boolean requestResult)"
		},
		{
			"forge": "storeData(CommandSourceStack arg0, DataAccessor arg1, NbtPathArgument$NbtPath arg2, IntFunction<Tag> arg3, boolean arg4)",
			"fabric": "executeStoreData(ServerCommandSource source, DataCommandObject object, NbtPathArgumentType$NbtPath path, IntFunction<NbtElement> nbtSetter, boolean requestResult)"
		},
		{
			"forge": "isChunkLoaded(ServerLevel arg0, BlockPos arg1)",
			"fabric": "isLoaded(ServerWorld world, BlockPos pos)"
		},
		{
			"forge": "addConditionals(com.mojang.brigadier.tree.CommandNode<CommandSourceStack> arg0, com.mojang.brigadier.builder.LiteralArgumentBuilder<CommandSourceStack> arg1, boolean arg2, CommandBuildContext arg3)",
			"fabric": "addConditionArguments(com.mojang.brigadier.tree.CommandNode<ServerCommandSource> root, com.mojang.brigadier.builder.LiteralArgumentBuilder<ServerCommandSource> argumentBuilder, boolean positive, CommandRegistryAccess commandRegistryAccess)"
		},
		{
			"forge": "createNumericConditionalHandler(boolean arg0, ExecuteCommand$CommandNumericPredicate arg1)",
			"fabric": "getExistsConditionExecute(boolean positive, ExecuteCommand$ExistsCondition condition)"
		},
		{
			"forge": "checkMatchingData(DataAccessor arg0, NbtPathArgument$NbtPath arg1)",
			"fabric": "countPathMatches(DataCommandObject object, NbtPathArgumentType$NbtPath path)"
		},
		{
			"forge": "checkScore(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, BiPredicate<Integer, Integer> arg1)",
			"fabric": "testScoreCondition(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, BiPredicate<Integer, Integer> condition)"
		},
		{
			"forge": "checkScore(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, MinMaxBounds$Ints arg1)",
			"fabric": "testScoreMatch(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, NumberRange$IntRange range)"
		},
		{
			"forge": "checkCustomPredicate(CommandSourceStack arg0, LootItemCondition arg1)",
			"fabric": "testLootCondition(ServerCommandSource source, LootCondition condition)"
		},
		{
			"forge": "expect(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, boolean arg1, boolean arg2)",
			"fabric": "getSourceOrEmptyForConditionFork(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, boolean positive, boolean value)"
		},
		{
			"forge": "addConditional(com.mojang.brigadier.tree.CommandNode<CommandSourceStack> arg0, com.mojang.brigadier.builder.ArgumentBuilder<CommandSourceStack, ?> arg1, boolean arg2, ExecuteCommand$CommandPredicate arg3)",
			"fabric": "addConditionLogic(com.mojang.brigadier.tree.CommandNode<ServerCommandSource> root, com.mojang.brigadier.builder.ArgumentBuilder<ServerCommandSource, ?> builder, boolean positive, ExecuteCommand$Condition condition)"
		},
		{
			"forge": "addIfBlocksConditional(com.mojang.brigadier.tree.CommandNode<CommandSourceStack> arg0, com.mojang.brigadier.builder.ArgumentBuilder<CommandSourceStack, ?> arg1, boolean arg2, boolean arg3)",
			"fabric": "addBlocksConditionLogic(com.mojang.brigadier.tree.CommandNode<ServerCommandSource> root, com.mojang.brigadier.builder.ArgumentBuilder<ServerCommandSource, ?> builder, boolean positive, boolean masked)"
		},
		{
			"forge": "checkIfRegions(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, boolean arg1)",
			"fabric": "executePositiveBlockCondition(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, boolean masked)"
		},
		{
			"forge": "checkUnlessRegions(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, boolean arg1)",
			"fabric": "executeNegativeBlockCondition(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, boolean masked)"
		},
		{
			"forge": "checkRegions(com.mojang.brigadier.context.CommandContext<CommandSourceStack> arg0, boolean arg1)",
			"fabric": "testBlocksCondition(com.mojang.brigadier.context.CommandContext<ServerCommandSource> context, boolean masked)"
		},
		{
			"forge": "checkRegions(ServerLevel arg0, BlockPos arg1, BlockPos arg2, BlockPos arg3, boolean arg4)",
			"fabric": "testBlocksCondition(ServerWorld world, BlockPos start, BlockPos end, BlockPos destination, boolean masked)"
		},
		{
			"forge": "expandOneToOneEntityRelation(Function<Entity, Optional<Entity>> arg0)",
			"fabric": "createEntityModifier(Function<Entity, Optional<Entity>> function)"
		},
		{
			"forge": "expandOneToManyEntityRelation(Function<Entity, Stream<Entity>> arg0)",
			"fabric": "createMultiEntityModifier(Function<Entity, Stream<Entity>> function)"
		},
		{
			"forge": "createRelationOperations(com.mojang.brigadier.tree.CommandNode<CommandSourceStack> arg0, com.mojang.brigadier.builder.LiteralArgumentBuilder<CommandSourceStack> arg1)",
			"fabric": "addOnArguments(com.mojang.brigadier.tree.CommandNode<ServerCommandSource> node, com.mojang.brigadier.builder.LiteralArgumentBuilder<ServerCommandSource> builder)"
		},
		{
			"forge": "spawnEntityAndRedirect(CommandSourceStack arg0, Holder$Reference<EntityType<?>> arg1)",
			"fabric": "summon(ServerCommandSource source, RegistryEntry$Reference<EntityType<?>> entityType)"
		}
	]
}