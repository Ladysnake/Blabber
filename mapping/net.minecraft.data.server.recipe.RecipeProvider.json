{
	"title": "net.minecraft.data.recipes.RecipeProvider",
	"items": [
		{
			"forge": "net.minecraft.data.recipes.RecipeProvider",
			"fabric": "net.minecraft.data.server.recipe.RecipeProvider"
		},
		{
			"forge": "recipePathProvider",
			"fabric": "recipesPathResolver"
		},
		{
			"forge": "recipePathProvider",
			"fabric": "recipesPathResolver"
		},
		{
			"forge": "advancementPathProvider",
			"fabric": "advancementsPathResolver"
		},
		{
			"forge": "SHAPE_BUILDERS",
			"fabric": "VARIANT_FACTORIES"
		},
		{
			"forge": "run(CachedOutput arg0)",
			"fabric": "run(DataWriter arg0)"
		},
		{
			"forge": "run(CachedOutput arg0)",
			"fabric": "run(DataWriter arg0)"
		},
		{
			"forge": "buildAdvancement(CachedOutput arg0, ResourceLocation arg1, Advancement$Builder arg2)",
			"fabric": "saveRecipeAdvancement(DataWriter cache, Identifier advancementId, Advancement$Builder advancementBuilder)"
		},
		{
			"forge": "buildRecipes(Consumer<FinishedRecipe> arg0)",
			"fabric": "generate(Consumer<RecipeJsonProvider> exporter)"
		},
		{
			"forge": "generateForEnabledBlockFamilies(Consumer<FinishedRecipe> arg0, FeatureFlagSet arg1)",
			"fabric": "generateFamilies(Consumer<RecipeJsonProvider> exporter, FeatureSet enabledFeatures)"
		},
		{
			"forge": "oneToOneConversionRecipe(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2, String arg3)",
			"fabric": "offerSingleOutputShapelessRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input, String group)"
		},
		{
			"forge": "oneToOneConversionRecipe(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2, String arg3, int arg4)",
			"fabric": "offerShapelessRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input, String group, int outputCount)"
		},
		{
			"forge": "oreSmelting(Consumer<FinishedRecipe> arg0, List<ItemLike> arg1, RecipeCategory arg2, ItemLike arg3, float arg4, int arg5, String arg6)",
			"fabric": "offerSmelting(Consumer<RecipeJsonProvider> exporter, List<ItemConvertible> inputs, RecipeCategory category, ItemConvertible output, float experience, int cookingTime, String group)"
		},
		{
			"forge": "oreBlasting(Consumer<FinishedRecipe> arg0, List<ItemLike> arg1, RecipeCategory arg2, ItemLike arg3, float arg4, int arg5, String arg6)",
			"fabric": "offerBlasting(Consumer<RecipeJsonProvider> exporter, List<ItemConvertible> inputs, RecipeCategory category, ItemConvertible output, float experience, int cookingTime, String group)"
		},
		{
			"forge": "oreCooking(Consumer<FinishedRecipe> arg0, RecipeSerializer<? extends AbstractCookingRecipe> arg1, List<ItemLike> arg2, RecipeCategory arg3, ItemLike arg4, float arg5, int arg6, String arg7, String arg8)",
			"fabric": "offerMultipleOptions(Consumer<RecipeJsonProvider> exporter, RecipeSerializer<? extends AbstractCookingRecipe> serializer, List<ItemConvertible> inputs, RecipeCategory category, ItemConvertible output, float experience, int cookingTime, String group, String method)"
		},
		{
			"forge": "netheriteSmithing(Consumer<FinishedRecipe> arg0, Item arg1, RecipeCategory arg2, Item arg3)",
			"fabric": "offerNetheriteUpgradeRecipe(Consumer<RecipeJsonProvider> exporter, Item input, RecipeCategory category, Item result)"
		},
		{
			"forge": "trimSmithing(Consumer<FinishedRecipe> arg0, Item arg1, ResourceLocation arg2)",
			"fabric": "offerSmithingTrimRecipe(Consumer<RecipeJsonProvider> exporter, Item template, Identifier recipeId)"
		},
		{
			"forge": "twoByTwoPacker(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offer2x2CompactingRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "threeByThreePacker(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3, String arg4)",
			"fabric": "offerCompactingRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input, String criterionName)"
		},
		{
			"forge": "threeByThreePacker(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerCompactingRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "planksFromLog(Consumer<FinishedRecipe> arg0, ItemLike arg1, TagKey<Item> arg2, int arg3)",
			"fabric": "offerPlanksRecipe2(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, TagKey<Item> input, int count)"
		},
		{
			"forge": "planksFromLogs(Consumer<FinishedRecipe> arg0, ItemLike arg1, TagKey<Item> arg2, int arg3)",
			"fabric": "offerPlanksRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, TagKey<Item> input, int count)"
		},
		{
			"forge": "woodFromLogs(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerBarkBlockRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "woodenBoat(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerBoatRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "chestBoat(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerChestBoatRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "buttonBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createTransmutationRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "doorBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createDoorRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "fenceBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createFenceRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "fenceGateBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createFenceGateRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "pressurePlate(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerPressurePlateRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "pressurePlateBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "createPressurePlateRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "slab(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerSlabRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "slabBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "createSlabRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "stairBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createStairsRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "trapdoorBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createTrapdoorRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "signBuilder(ItemLike arg0, Ingredient arg1)",
			"fabric": "createSignRecipe(ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "hangingSign(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerHangingSignRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "colorBlockWithDye(Consumer<FinishedRecipe> arg0, List<Item> arg1, List<Item> arg2, String arg3)",
			"fabric": "offerDyeableRecipes(Consumer<RecipeJsonProvider> exporter, List<Item> dyes, List<Item> dyeables, String group)"
		},
		{
			"forge": "carpet(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerCarpetRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "bedFromPlanksAndWool(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerBedRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "banner(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerBannerRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "stainedGlassFromGlassAndDye(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerStainedGlassDyeingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "stainedGlassPaneFromStainedGlass(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerStainedGlassPaneRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "stainedGlassPaneFromGlassPaneAndDye(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerStainedGlassPaneDyeingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "coloredTerracottaFromTerracottaAndDye(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerTerracottaDyeingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "concretePowder(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerConcretePowderDyeingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "candle(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerCandleDyeingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "wall(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerWallRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "wallBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "getWallRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "polished(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerPolishedStoneRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "polishedBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "createCondensingRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "cut(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerCutCopperRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "cutBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "createCutCopperRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "chiseled(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerChiseledBlockRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "mosaicBuilder(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerMosaicRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "chiseledBuilder(RecipeCategory arg0, ItemLike arg1, Ingredient arg2)",
			"fabric": "createChiseledBlockRecipe(RecipeCategory category, ItemConvertible output, Ingredient input)"
		},
		{
			"forge": "stonecutterResultFromBase(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3)",
			"fabric": "offerStonecuttingRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "stonecutterResultFromBase(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, ItemLike arg3, int arg4)",
			"fabric": "offerStonecuttingRecipe(Consumer<RecipeJsonProvider> exporter, RecipeCategory category, ItemConvertible output, ItemConvertible input, int count)"
		},
		{
			"forge": "smeltingResultFromBase(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerCrackingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible output, ItemConvertible input)"
		},
		{
			"forge": "nineBlockStorageRecipes(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, RecipeCategory arg3, ItemLike arg4)",
			"fabric": "offerReversibleCompactingRecipes(Consumer<RecipeJsonProvider> exporter, RecipeCategory reverseCategory, ItemConvertible baseItem, RecipeCategory compactingCategory, ItemConvertible compactItem)"
		},
		{
			"forge": "nineBlockStorageRecipesWithCustomPacking(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, RecipeCategory arg3, ItemLike arg4, String arg5, String arg6)",
			"fabric": "offerReversibleCompactingRecipesWithCompactingRecipeGroup(Consumer<RecipeJsonProvider> exporter, RecipeCategory reverseCategory, ItemConvertible baseItem, RecipeCategory compactingCategory, ItemConvertible compactItem, String compactingId, String compactingGroup)"
		},
		{
			"forge": "nineBlockStorageRecipesRecipesWithCustomUnpacking(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, RecipeCategory arg3, ItemLike arg4, String arg5, String arg6)",
			"fabric": "offerReversibleCompactingRecipesWithReverseRecipeGroup(Consumer<RecipeJsonProvider> exporter, RecipeCategory reverseCategory, ItemConvertible baseItem, RecipeCategory compactingCategory, ItemConvertible compactItem, String reverseId, String reverseGroup)"
		},
		{
			"forge": "nineBlockStorageRecipes(Consumer<FinishedRecipe> arg0, RecipeCategory arg1, ItemLike arg2, RecipeCategory arg3, ItemLike arg4, String arg5, String arg6, String arg7, String arg8)",
			"fabric": "offerReversibleCompactingRecipes(Consumer<RecipeJsonProvider> exporter, RecipeCategory reverseCategory, ItemConvertible baseItem, RecipeCategory compactingCategory, ItemConvertible compactItem, String compactingId, String compactingGroup, String reverseId, String reverseGroup)"
		},
		{
			"forge": "copySmithingTemplate(Consumer<FinishedRecipe> arg0, ItemLike arg1, TagKey<Item> arg2)",
			"fabric": "offerSmithingTemplateCopyingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible template, TagKey<Item> resource)"
		},
		{
			"forge": "copySmithingTemplate(Consumer<FinishedRecipe> arg0, ItemLike arg1, ItemLike arg2)",
			"fabric": "offerSmithingTemplateCopyingRecipe(Consumer<RecipeJsonProvider> exporter, ItemConvertible template, ItemConvertible resource)"
		},
		{
			"forge": "cookRecipes(Consumer<FinishedRecipe> arg0, String arg1, RecipeSerializer<? extends AbstractCookingRecipe> arg2, int arg3)",
			"fabric": "generateCookingRecipes(Consumer<RecipeJsonProvider> exporter, String cooker, RecipeSerializer<? extends AbstractCookingRecipe> serializer, int cookingTime)"
		},
		{
			"forge": "simpleCookingRecipe(Consumer<FinishedRecipe> arg0, String arg1, RecipeSerializer<? extends AbstractCookingRecipe> arg2, int arg3, ItemLike arg4, ItemLike arg5, float arg6)",
			"fabric": "offerFoodCookingRecipe(Consumer<RecipeJsonProvider> exporter, String cooker, RecipeSerializer<? extends AbstractCookingRecipe> serializer, int cookingTime, ItemConvertible input, ItemConvertible output, float experience)"
		},
		{
			"forge": "waxRecipes(Consumer<FinishedRecipe> arg0)",
			"fabric": "offerWaxingRecipes(Consumer<RecipeJsonProvider> exporter)"
		},
		{
			"forge": "generateRecipes(Consumer<FinishedRecipe> arg0, BlockFamily arg1)",
			"fabric": "generateFamily(Consumer<RecipeJsonProvider> exporter, BlockFamily family)"
		},
		{
			"forge": "getBaseBlock(BlockFamily arg0, BlockFamily$Variant arg1)",
			"fabric": "getVariantRecipeInput(BlockFamily family, BlockFamily$Variant variant)"
		},
		{
			"forge": "insideOf(Block arg0)",
			"fabric": "requireEnteringFluid(Block block)"
		},
		{
			"forge": "has(MinMaxBounds$Ints arg0, ItemLike arg1)",
			"fabric": "conditionsFromItem(NumberRange$IntRange count, ItemConvertible item)"
		},
		{
			"forge": "has(ItemLike arg0)",
			"fabric": "conditionsFromItem(ItemConvertible item)"
		},
		{
			"forge": "has(TagKey<Item> arg0)",
			"fabric": "conditionsFromTag(TagKey<Item> tag)"
		},
		{
			"forge": "inventoryTrigger(ItemPredicate... arg0)",
			"fabric": "conditionsFromItemPredicates(ItemPredicate... predicates)"
		},
		{
			"forge": "getHasName(ItemLike arg0)",
			"fabric": "hasItem(ItemConvertible item)"
		},
		{
			"forge": "getItemName(ItemLike arg0)",
			"fabric": "getItemPath(ItemConvertible item)"
		},
		{
			"forge": "getSimpleRecipeName(ItemLike arg0)",
			"fabric": "getRecipeName(ItemConvertible item)"
		},
		{
			"forge": "getConversionRecipeName(ItemLike arg0, ItemLike arg1)",
			"fabric": "convertBetween(ItemConvertible to, ItemConvertible from)"
		},
		{
			"forge": "getSmeltingRecipeName(ItemLike arg0)",
			"fabric": "getSmeltingItemPath(ItemConvertible item)"
		},
		{
			"forge": "getBlastingRecipeName(ItemLike arg0)",
			"fabric": "getBlastingItemPath(ItemConvertible item)"
		},
		{
			"forge": "getName()",
			"fabric": "getName()"
		}
	]
}