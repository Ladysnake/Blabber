{
	"title": "net.minecraft.world.level.CollisionGetter",
	"items": [
		{
			"forge": "net.minecraft.world.level.CollisionGetter",
			"fabric": "net.minecraft.world.CollisionView"
		},
		{
			"forge": "getWorldBorder()",
			"fabric": "getWorldBorder()"
		},
		{
			"forge": "getWorldBorder()",
			"fabric": "getWorldBorder()"
		},
		{
			"forge": "getChunkForCollisions(int arg0, int arg1)",
			"fabric": "getChunkAsView(int chunkX, int chunkZ)"
		},
		{
			"forge": "isUnobstructed(Entity arg0, VoxelShape arg1)",
			"fabric": "doesNotIntersectEntities(Entity except, VoxelShape shape)"
		},
		{
			"forge": "isUnobstructed(BlockState arg0, BlockPos arg1, CollisionContext arg2)",
			"fabric": "canPlace(BlockState state, BlockPos pos, ShapeContext context)"
		},
		{
			"forge": "isUnobstructed(Entity arg0)",
			"fabric": "doesNotIntersectEntities(Entity entity)"
		},
		{
			"forge": "noCollision(AABB arg0)",
			"fabric": "isSpaceEmpty(Box box)"
		},
		{
			"forge": "noCollision(Entity arg0)",
			"fabric": "isSpaceEmpty(Entity entity)"
		},
		{
			"forge": "noCollision(Entity arg0, AABB arg1)",
			"fabric": "isSpaceEmpty(Entity entity, Box box)"
		},
		{
			"forge": "getEntityCollisions(Entity arg0, AABB arg1)",
			"fabric": "getEntityCollisions(Entity entity, Box box)"
		},
		{
			"forge": "getCollisions(Entity arg0, AABB arg1)",
			"fabric": "getCollisions(Entity entity, Box box)"
		},
		{
			"forge": "getBlockCollisions(Entity arg0, AABB arg1)",
			"fabric": "getBlockCollisions(Entity entity, Box box)"
		},
		{
			"forge": "borderCollision(Entity arg0, AABB arg1)",
			"fabric": "getWorldBorderCollisions(Entity entity, Box box)"
		},
		{
			"forge": "collidesWithSuffocatingBlock(Entity arg0, AABB arg1)",
			"fabric": "canCollide(Entity entity, Box box)"
		},
		{
			"forge": "findSupportingBlock(Entity arg0, AABB arg1)",
			"fabric": "findSupportingBlockPos(Entity entity, Box box)"
		},
		{
			"forge": "findFreePosition(Entity arg0, VoxelShape arg1, Vec3 arg2, double arg3, double arg4, double arg5)",
			"fabric": "findClosestCollision(Entity entity, VoxelShape shape, Vec3d target, double x, double y, double z)"
		}
	]
}