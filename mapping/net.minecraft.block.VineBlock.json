{
	"title": "net.minecraft.world.level.block.VineBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.VineBlock",
			"fabric": "net.minecraft.block.VineBlock"
		},
		{
			"forge": "UP",
			"fabric": "UP"
		},
		{
			"forge": "UP",
			"fabric": "UP"
		},
		{
			"forge": "NORTH",
			"fabric": "NORTH"
		},
		{
			"forge": "EAST",
			"fabric": "EAST"
		},
		{
			"forge": "SOUTH",
			"fabric": "SOUTH"
		},
		{
			"forge": "WEST",
			"fabric": "WEST"
		},
		{
			"forge": "PROPERTY_BY_DIRECTION",
			"fabric": "FACING_PROPERTIES"
		},
		{
			"forge": "AABB_OFFSET",
			"fabric": "field_31275"
		},
		{
			"forge": "UP_AABB",
			"fabric": "UP_SHAPE"
		},
		{
			"forge": "WEST_AABB",
			"fabric": "EAST_SHAPE"
		},
		{
			"forge": "EAST_AABB",
			"fabric": "WEST_SHAPE"
		},
		{
			"forge": "NORTH_AABB",
			"fabric": "SOUTH_SHAPE"
		},
		{
			"forge": "SOUTH_AABB",
			"fabric": "NORTH_SHAPE"
		},
		{
			"forge": "shapesCache",
			"fabric": "shapesByState"
		},
		{
			"forge": "calculateShape(BlockState arg0)",
			"fabric": "getShapeForState(BlockState state)"
		},
		{
			"forge": "calculateShape(BlockState arg0)",
			"fabric": "getShapeForState(BlockState state)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "propagatesSkylightDown(BlockState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "isTransparent(BlockState arg0, BlockView arg1, BlockPos arg2)"
		},
		{
			"forge": "canSurvive(BlockState arg0, LevelReader arg1, BlockPos arg2)",
			"fabric": "canPlaceAt(BlockState arg0, WorldView arg1, BlockPos arg2)"
		},
		{
			"forge": "hasFaces(BlockState arg0)",
			"fabric": "hasAdjacentBlocks(BlockState state)"
		},
		{
			"forge": "countFaces(BlockState arg0)",
			"fabric": "getAdjacentBlockCount(BlockState state)"
		},
		{
			"forge": "canSupportAtFace(BlockGetter arg0, BlockPos arg1, Direction arg2)",
			"fabric": "shouldHaveSide(BlockView world, BlockPos pos, Direction side)"
		},
		{
			"forge": "isAcceptableNeighbour(BlockGetter arg0, BlockPos arg1, Direction arg2)",
			"fabric": "shouldConnectTo(BlockView world, BlockPos pos, Direction direction)"
		},
		{
			"forge": "getUpdatedState(BlockState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "getPlacementShape(BlockState state, BlockView world, BlockPos pos)"
		},
		{
			"forge": "updateShape(BlockState arg0, Direction arg1, BlockState arg2, LevelAccessor arg3, BlockPos arg4, BlockPos arg5)",
			"fabric": "getStateForNeighborUpdate(BlockState arg0, Direction arg1, BlockState arg2, WorldAccess arg3, BlockPos arg4, BlockPos arg5)"
		},
		{
			"forge": "randomTick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "randomTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "copyRandomFaces(BlockState arg0, BlockState arg1, RandomSource arg2)",
			"fabric": "getGrownState(BlockState above, BlockState state, Random random)"
		},
		{
			"forge": "hasHorizontalConnection(BlockState arg0)",
			"fabric": "hasHorizontalSide(BlockState state)"
		},
		{
			"forge": "canSpread(BlockGetter arg0, BlockPos arg1)",
			"fabric": "canGrowAt(BlockView world, BlockPos pos)"
		},
		{
			"forge": "canBeReplaced(BlockState arg0, BlockPlaceContext arg1)",
			"fabric": "canReplace(BlockState arg0, ItemPlacementContext arg1)"
		},
		{
			"forge": "getStateForPlacement(BlockPlaceContext arg0)",
			"fabric": "getPlacementState(ItemPlacementContext arg0)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> arg0)"
		},
		{
			"forge": "rotate(BlockState arg0, Rotation arg1)",
			"fabric": "rotate(BlockState arg0, BlockRotation arg1)"
		},
		{
			"forge": "mirror(BlockState arg0, Mirror arg1)",
			"fabric": "mirror(BlockState arg0, BlockMirror arg1)"
		},
		{
			"forge": "getPropertyForFace(Direction arg0)",
			"fabric": "getFacingProperty(Direction direction)"
		}
	]
}