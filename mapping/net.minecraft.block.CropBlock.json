{
	"title": "net.minecraft.world.level.block.CropBlock",
	"items": [
		{
			"forge": "net.minecraft.world.level.block.CropBlock",
			"fabric": "net.minecraft.block.CropBlock"
		},
		{
			"forge": "MAX_AGE",
			"fabric": "MAX_AGE"
		},
		{
			"forge": "MAX_AGE",
			"fabric": "MAX_AGE"
		},
		{
			"forge": "AGE",
			"fabric": "AGE"
		},
		{
			"forge": "SHAPE_BY_AGE",
			"fabric": "AGE_TO_SHAPE"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "getShape(BlockState arg0, BlockGetter arg1, BlockPos arg2, CollisionContext arg3)",
			"fabric": "getOutlineShape(BlockState arg0, BlockView arg1, BlockPos arg2, ShapeContext arg3)"
		},
		{
			"forge": "mayPlaceOn(BlockState arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "canPlantOnTop(BlockState arg0, BlockView arg1, BlockPos arg2)"
		},
		{
			"forge": "getAgeProperty()",
			"fabric": "getAgeProperty()"
		},
		{
			"forge": "getMaxAge()",
			"fabric": "getMaxAge()"
		},
		{
			"forge": "getAge(BlockState arg0)",
			"fabric": "getAge(BlockState state)"
		},
		{
			"forge": "getStateForAge(int arg0)",
			"fabric": "withAge(int age)"
		},
		{
			"forge": "isMaxAge(BlockState arg0)",
			"fabric": "isMature(BlockState arg0)"
		},
		{
			"forge": "isRandomlyTicking(BlockState arg0)",
			"fabric": "hasRandomTicks(BlockState arg0)"
		},
		{
			"forge": "randomTick(BlockState arg0, ServerLevel arg1, BlockPos arg2, RandomSource arg3)",
			"fabric": "randomTick(BlockState arg0, ServerWorld arg1, BlockPos arg2, Random arg3)"
		},
		{
			"forge": "growCrops(Level arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "applyGrowth(World world, BlockPos pos, BlockState state)"
		},
		{
			"forge": "getBonemealAgeIncrease(Level arg0)",
			"fabric": "getGrowthAmount(World world)"
		},
		{
			"forge": "getGrowthSpeed(Block arg0, BlockGetter arg1, BlockPos arg2)",
			"fabric": "getAvailableMoisture(Block block, BlockView world, BlockPos pos)"
		},
		{
			"forge": "canSurvive(BlockState arg0, LevelReader arg1, BlockPos arg2)",
			"fabric": "canPlaceAt(BlockState arg0, WorldView arg1, BlockPos arg2)"
		},
		{
			"forge": "entityInside(BlockState arg0, Level arg1, BlockPos arg2, Entity arg3)",
			"fabric": "onEntityCollision(BlockState arg0, World arg1, BlockPos arg2, Entity arg3)"
		},
		{
			"forge": "getBaseSeedId()",
			"fabric": "getSeedsItem()"
		},
		{
			"forge": "getCloneItemStack(BlockGetter arg0, BlockPos arg1, BlockState arg2)",
			"fabric": "getPickStack(BlockView arg0, BlockPos arg1, BlockState arg2)"
		},
		{
			"forge": "isValidBonemealTarget(LevelReader arg0, BlockPos arg1, BlockState arg2, boolean arg3)",
			"fabric": "isFertilizable(WorldView arg0, BlockPos arg1, BlockState arg2, boolean arg3)"
		},
		{
			"forge": "isBonemealSuccess(Level arg0, RandomSource arg1, BlockPos arg2, BlockState arg3)",
			"fabric": "canGrow(World arg0, Random arg1, BlockPos arg2, BlockState arg3)"
		},
		{
			"forge": "performBonemeal(ServerLevel arg0, RandomSource arg1, BlockPos arg2, BlockState arg3)",
			"fabric": "grow(ServerWorld arg0, Random arg1, BlockPos arg2, BlockState arg3)"
		},
		{
			"forge": "createBlockStateDefinition(StateDefinition$Builder<Block, BlockState> arg0)",
			"fabric": "appendProperties(StateManager$Builder<Block, BlockState> arg0)"
		}
	]
}