{
	"title": "net.minecraft.world.entity.ai.gossip.GossipContainer",
	"items": [
		{
			"forge": "net.minecraft.world.entity.ai.gossip.GossipContainer",
			"fabric": "net.minecraft.village.VillagerGossips"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "LOGGER",
			"fabric": "LOGGER"
		},
		{
			"forge": "DISCARD_THRESHOLD",
			"fabric": "field_30236"
		},
		{
			"forge": "gossips",
			"fabric": "entityReputation"
		},
		{
			"forge": "getGossipEntries()",
			"fabric": "getEntityReputationAssociatedGossips()"
		},
		{
			"forge": "getGossipEntries()",
			"fabric": "getEntityReputationAssociatedGossips()"
		},
		{
			"forge": "decay()",
			"fabric": "decay()"
		},
		{
			"forge": "unpack()",
			"fabric": "entries()"
		},
		{
			"forge": "selectGossipsForTransfer(RandomSource arg0, int arg1)",
			"fabric": "pickGossips(Random random, int count)"
		},
		{
			"forge": "getOrCreate(UUID arg0)",
			"fabric": "getReputationFor(UUID target)"
		},
		{
			"forge": "transferFrom(GossipContainer arg0, RandomSource arg1, int arg2)",
			"fabric": "shareGossipFrom(VillagerGossips from, Random random, int count)"
		},
		{
			"forge": "getReputation(UUID arg0, Predicate<GossipType> arg1)",
			"fabric": "getReputationFor(UUID target, Predicate<VillageGossipType> gossipTypeFilter)"
		},
		{
			"forge": "getCountForType(GossipType arg0, DoublePredicate arg1)",
			"fabric": "getReputationCount(VillageGossipType type, DoublePredicate predicate)"
		},
		{
			"forge": "add(UUID arg0, GossipType arg1, int arg2)",
			"fabric": "startGossip(UUID target, VillageGossipType type, int value)"
		},
		{
			"forge": "remove(UUID arg0, GossipType arg1, int arg2)",
			"fabric": "removeGossip(UUID target, VillageGossipType type, int value)"
		},
		{
			"forge": "remove(UUID arg0, GossipType arg1)",
			"fabric": "remove(UUID target, VillageGossipType type)"
		},
		{
			"forge": "remove(GossipType arg0)",
			"fabric": "remove(VillageGossipType type)"
		},
		{
			"forge": "store(com.mojang.serialization.DynamicOps<T> arg0)",
			"fabric": "serialize(com.mojang.serialization.DynamicOps<T> ops)"
		},
		{
			"forge": "update(com.mojang.serialization.Dynamic<?> arg0)",
			"fabric": "deserialize(com.mojang.serialization.Dynamic<?> dynamic)"
		},
		{
			"forge": "mergeValuesForTransfer(int arg0, int arg1)",
			"fabric": "max(int left, int right)"
		},
		{
			"forge": "mergeValuesForAddition(GossipType arg0, int arg1, int arg2)",
			"fabric": "mergeReputation(VillageGossipType type, int left, int right)"
		}
	]
}